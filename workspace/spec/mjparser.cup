package rs.ac.bg.etf.pp1.sv110059;

import java_cup.runtime.*;
import java.io.*;
import rs.etf.pp1.symboltable.*;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.visitors.*;
import java.util.Collection;
import rs.ac.bg.etf.pp1.sv110059.util.*;
import rs.etf.pp1.mj.runtime.*;
import java.util.Stack;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Queue;
import java.util.LinkedList;


parser code {:
	//promenljive za brojanje pojavljivanja odredjenih elemenata
	
	int globalCharVarCount = 0; //R40
	int globalArrayCount = 0; //R41
	int funcCount = 0; //R42
	int classCount = 0; //R43
	int statementBlocks = 0; //R44
	int funcCallsInMain = 0; //R45
	int newStatementCount = 0; //R46
	int classMethodCount = 0; //R47
	int classFieldCount = 0; //R48
	int classDerivationCount = 0; //R49

    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
    boolean greska;
     
   public void report_fatal_error(String message, Object   info) throws java.lang.Exception {
   	  greska=true;
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info)
    {
      greska=true;
      //Code.greska = true;
      System.err.print(message);
      System.err.flush();
      if (info instanceof Symbol)
          System.err.println(" na liniji " + ((Symbol)info).left);
      else System.err.println("");
    }
    
    public void report_info(String message, Object info)
    {
      System.out.print(message);
      System.out.flush();
      if (info instanceof Symbol)
          System.out.println(" na liniji " + ((Symbol)info).left);
      else System.out.println("");
    }
   
   	MyVisitor dstv = new MyVisitor();
   	
   	public void report_error(String symName, int line, String msg) {
   	  greska=true;
   	  //Code.greska = true;
      System.err.print("Greska na "+line+"("+symName+"), "+msg);
      System.err.flush();
      System.err.println("");
   	}
   	
    public void report_info(String symName, int line, Obj obj) {
    	  dstv.visitObjNode(obj);
    	  System.out.print("Pretraga na "+line+"("+symName+"), nadjeno "+dstv.getOutput());
    	  dstv.flush();
	      System.out.flush();
	      System.out.println("");
    }
    
    
    public void printCounts() {
    	System.out.println("Broj elemenata: ");
    	System.out.println("Deklaracije globalnih promenljivih tipa char - " + globalCharVarCount);
    	System.out.println("Deklaracije globalnih nizova - " + globalArrayCount);
    	System.out.println("Definicije funkcija u glavnom programu - " + funcCount);
    	System.out.println("Definicije unutrasnjih klasa - " + classCount);
    	System.out.println("Blokovi naredbi - " + statementBlocks);
    	System.out.println("Pozivi funkcija u telu metode main - "+funcCallsInMain);
    	System.out.println("Naredbe stvaranja objekta - " + newStatementCount);
    	System.out.println("Definicije metoda unutrasnjih klasa - " + classMethodCount);
    	System.out.println("Definicije polja unutrasnjih klasa - " + classFieldCount);
    	System.out.println("Izvodjenja klasa - " + classDerivationCount);
    }
    
    public static void main(String args[]) throws Exception {
        FileReader r = new FileReader(args[0]);
        Yylex skener = new Yylex(r);
        MJParser p = new MJParser(skener);
        //Symbol s = p.debug_parse();  //pocetak parsiranja
        Symbol s = p.parse();
       
        if (p.greska || Code.greska) {
        	 Tab.dump();
        	System.out.println("Ulazni program ima gresaka!");
        }
        else {
        	File objFile = new File("test/program.obj");
        	if (objFile.exists())
        		objFile.delete();
        	Code.write(new FileOutputStream(objFile));
        	System.out.println("==================SINTAKSNA ANALIZA====================");
        	p.printCounts();
        	Tab.dump();
        	System.out.println("Parsiranje uspesno zavrseno!");
        }
        
    }

    String getTypeName(Struct t) {
    	StringBuilder output = new StringBuilder();
    	switch (t.getKind()) {
		case Struct.None:
			output.append("notype");
			break;
		case Struct.Int:
			output.append("int");
			break;
		case Struct.Char:
			output.append("char");
			break;
		case Struct.Array:
			output.append("Arr of ");
			
			switch (t.getElemType().getKind()) {
			case Struct.None:
				output.append("notype");
				break;
			case Struct.Int:
				output.append("int");
				break;
			case Struct.Char:
				output.append("char");
				break;
			case Struct.Class:
				output.append("Class");
				break;
			}
			break;
		case Struct.Class:
			output.append("Class");
			break;
		}
		return output.toString();
    }
    
:}


action code {:

	boolean global = true;
	boolean classDef = false;
	boolean isMain = false;
	boolean methodDef = false;
	Struct var_type=Tab.noType;
	Obj currentMethod = null;
	boolean returnFound = false;
	int currentLevel = -1;
	boolean isVoid=false;
	Obj curr_ident = null;
	boolean designatorIsArrElem = false;
	boolean insideWhile = false;
	Obj currentDesignator = null;
	Obj functionDesignator = null;
	int numOfActPars = 0;
	int currentMethodParams = 0;
	boolean lockFunctionDesignator = false;
	Obj previosDesignator = null;
	Obj currentClass = null;
	boolean designatorInExpr = false;
	Stack<Obj> designatorStack = new Stack<Obj>();
	Stack<Boolean> designatorInExprStack = new Stack<Boolean>();
	Stack<Integer> tops = new Stack<Integer>();
	Stack<Integer> tJumpAdrs = new Stack<Integer>();
	Stack<Integer> fJumpAdrs = new Stack<Integer>();
	Stack<Stack<Integer>> controlStacksT = new Stack<Stack<Integer>>();
	Stack<Stack<Integer>> controlStacksF = new Stack<Stack<Integer>>();
	Stack<Stack<Integer>> controlStacksB = new Stack<Stack<Integer>>();
	Queue<Obj> referenceStack = new LinkedList<Obj>();
	HashMap<Obj, Obj> var2Type = new HashMap<Obj, Obj>();
	Stack<Integer> breakJumps = new Stack<Integer>();
	int hiddenVarsCount = 0;
	boolean newClassFactor = false;
	boolean classMethodCall = false;
	Obj prevDesignator = null;
	Obj typeNode = null;

	class CodeBuff {
		 private  ArrayList<Byte> buff = new ArrayList<Byte>();
		 public void put (int x)  {
				buff.add((byte)x);
		 }
	    public void put2 (int x) { put(x>>8); put(x);  }
	    public  void put4 (int x) { put2(x>>16); put2(x); }

	    public  void loadConst (int n) {
		    if (0<=n&&n<=5) put (Code.const_n+n);
		    else if (n==-1) put (Code.const_m1);
		    else  { put (Code.const_); put4 (n); }
  		}
  		public ArrayList<Byte> getBuff() {
  			return buff;
  		}
  		public void store(Obj o) {
		  	switch (o.getKind()) {

		  	  case Obj.Con:
		  	  	if (o.getLevel()==0) { // global variable 
		            put(Code.putstatic); put2(o.getAdr()); 
		            break;
		        }
		        // local variable 
		        if (0 <= o.getAdr() && o.getAdr() <= 3) 
		            put(Code.store_n + o.getAdr());
		        else { 
		        	  put(Code.store); put(o.getAdr()); 
		        } 
		        break;
		      case Obj.Var:
		        if (o.getLevel()==0) { // global variable 
		            put(Code.putstatic); put2(o.getAdr()); 
		            break;
		        }
		        // local variable 
		        if (0 <= o.getAdr() && o.getAdr() <= 3) 
		            put(Code.store_n + o.getAdr());
		        else { 
		        	  put(Code.store); put(o.getAdr()); 
		        } 
		        break;

		      case Obj.Fld:
		        put(Code.putfield); put2(o.getAdr()); 
		        break;
		        
		      case Obj.Elem:
		        if (o.getType().getKind() == Struct.Char) put(Code.bastore);
		        else put(Code.astore); 
		        break;
		  	}
  		}
	}

	CodeBuff codeBuff = new CodeBuff();

	void redefineMethod() {
		currentMethod.getLocalSymbols().clear();
	}
	private int methodTableSize = 0;
	List<Byte> MethodTable = new ArrayList<Byte>(); 
	void addWordToStaticData (int value, int address){ 
	  MethodTable.add(new Byte((byte)Code.const_)); 
	  MethodTable.add(new Byte( (byte)( (value>>16)>>8 ) ) ); 
	  MethodTable.add(new Byte((byte)(value>>16))); 
	  MethodTable.add(new Byte((byte)(value>>8))); 
	  MethodTable.add(new Byte((byte)value)); 
	  MethodTable.add(new Byte((byte)Code.putstatic)); 
	  MethodTable.add(new Byte((byte)(address>>8))); 
	  MethodTable.add(new Byte((byte)address)); 
	  methodTableSize++;
	  Obj temp = new Obj(Obj.Var, "__"+getMethodTableSize()+"_#_", Tab.intType, methodTableSize, 0);
	  //Code.dataSize++;
	 } 
	 void addNameTerminator() { 
	  addWordToStaticData(-1, Code.dataSize++); 
	 
	 } 
	 void addTableTerminator() { 
	  addWordToStaticData(-2, Code.dataSize++); 
	  
	 } 
	 void addFunctionAddress(int functionAddress) { 
	  addWordToStaticData(functionAddress, Code.dataSize++); 
	 } 
 	void addFunctionEntry(String name, int functionAddressInCodeBuffer) { 
	  for (int j=0; j<name.length(); j++)  { 
	   addWordToStaticData((int)(name.charAt(j)), Code.dataSize++);
	  } 
	  addNameTerminator();   addFunctionAddress(functionAddressInCodeBuffer); 
 	}
 	int getMethodTableSize() {
 		return methodTableSize;
 	}

 	void resetDesignatorInExprCond() {
 		if (!designatorInExprStack.empty()) {
 			designatorInExpr = designatorInExprStack.pop();
 		}
 		else
 			designatorInExpr = false;
 	}
 	void setDesignatorInExprCond() {
 		designatorInExprStack.push(designatorInExpr);
 	}

:}

init with {:
	Tab.init();
	Code.dataSize = 0;
	System.out.println("==================SEMANTICKA OBRADA====================");
	Struct boolType = new Struct(Struct.Bool);
    Tab.insert(Obj.Type, "bool", boolType);
    Struct stringType = new Struct(Struct.Array, Tab.charType);
    Tab.insert(Obj.Type, "string", stringType);
	Obj o = Tab.find("len");
	o.setFpPos(1);
	o = Tab.find("chr");
	o.setFpPos(1);
	o = Tab.find("ord");
	o.setFpPos(1);
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	return s;
:}

terminal PROGRAM, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, COMMA, PRINT, RETURN, PLUS, EQUAL, VOID ;
terminal GT, GTE, LT, LTE, NEW, DIV, MOD, MINUS, NOT_EQUAL, IS_EQUAL, CONST, AND, LSQUARE, RSQUARE, OR, TIMES ;
terminal BREAK, INC, DEC, WHILE, CLASS, ELSE, IF, READ, DOT ;
terminal Integer NUMBER ;
terminal String IDENT ;
terminal Character CHARCONST ;
terminal Struct EXTENDS;
terminal Boolean BOOLCONST ;
terminal String STRCONST ;

non terminal Program, VarDeclList, MethodDeclList, VarDecl, MethodDecl, GlobalVarDecl, GlobalVarList ;
non terminal FormPars, Var ;
non terminal StatementList, Statement, ActPar ;
non terminal Unmatched, Matched, WhileLoop ;
non terminal DeclarationList, DeclarationPart, ConstDecl, VarList, ConstPart, VarDeclError ;
non terminal ClassDecl, ClassMethods, Parameter, FormalParams ;
non terminal DesignatorsFollowUp, OptNumbers, ActPars, ActParams ;
non terminal ElseLexem, IfLexem ;
//non terminal String Var, ConstVar;

non terminal Integer Relop, Addop, Sign, Mulop, CondTerm, CondFact, Condition;
non terminal Obj ProgName, Designator, ConstVar, IdentList, IdentRef, Rhs;
non terminal Struct Type, ReturnType, Term, Expr, Factor, Ext;

Program ::= PROGRAM ProgName:p DeclarationList LBRACE {:
						global = false;
					:} MethodDeclList RBRACE
{:
	
	//Code.dataSize += Tab.currentScope().getnVars();
	Obj myMain = Tab.find("main");
	if (myMain==Tab.noObj) {
		parser.report_error("Greska : ulazni fajl ne sadrzi main metodu", null);
	}
	Tab.chainLocalSymbols(p);
	Tab.closeScope();
	currentLevel--;
	
:};

ProgName ::= IDENT:pName
{:
	RESULT = Tab.insert(Obj.Prog, pName, Tab.noType);
	Tab.openScope();
	currentLevel++;
:};

DeclarationList	::=  DeclarationList DeclarationPart
					|
					/* epsilon */
					;

DeclarationPart	::=  ConstDecl
					|    
					GlobalVarDecl
					|
					ClassDecl
					;

ConstDecl ::= CONST Type ConstPart SEMI
				|
			CONST error:l SEMI {: parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri definiciji globalne promenljive tipa konstante",null); :}
				 ;
				 
ConstPart ::= ConstVar:dest EQUAL Rhs:e
{: 
	boolean g =false;
	boolean substitution = false;
	Struct eTemp = e.getType();
	while (eTemp.getKind()==Struct.Class) {
		if (eTemp.getElemType() == dest.getType()) {
			substitution = true;
			break;
		}
		eTemp = eTemp.getElemType();
	}
	if (!substitution && !e.getType().assignableTo(dest.getType()) && dest.getType().getKind() != Struct.Array) {
		g = true; parser.report_error("Semanticka greska na liniji "+destleft+": izraz tipa "+parser.getTypeName(e.getType())+" ne moze biti dodeljen tipu "+parser.getTypeName(dest.getType()),null);
	}
	else if (!substitution && (e.getType().getElemType()!=dest.getType().getElemType() && !e.getType().assignableTo(dest.getType().getElemType())) && dest.getType().getKind() == Struct.Array) {
		g = true; parser.report_error("Semanticka greska na liniji "+destleft+": izraz tipa "+parser.getTypeName(e.getType())+" ne moze biti dodeljen tipu "+parser.getTypeName(dest.getType()),null);
	}
	if (!g) {
		if (dest.getType() == Tab.find("string").getType()) {
			codeBuff.store(dest);
		}
		dest.setAdr(e.getAdr());
	}
		
:}
				|
				ConstVar error:l
{:
	parser.report_error("Izvrsen oporavak do ; u linij "+lleft+" pri definiciji konstante.", null);
:}
				|
			  ConstPart COMMA ConstVar:dest EQUAL Rhs:e
{:
	boolean g =false;
	boolean substitution = false;
	if (e.getType().getKind()==Struct.Class) {
		if (e.getType().getElemType() == dest.getType()) {
			substitution = true;
		}
	}
	if (!substitution && !e.getType().assignableTo(dest.getType()) && dest.getType().getKind() != Struct.Array) {
		g = false; parser.report_error("Semanticka greska na liniji "+destleft+": izraz tipa "+parser.getTypeName(e.getType())+" ne moze biti dodeljen tipu "+parser.getTypeName(dest.getType().getElemType()),null);
	}
	else if (!substitution && (e.getType().getElemType()!=dest.getType().getElemType() && !e.getType().assignableTo(dest.getType().getElemType())) && dest.getType().getKind() == Struct.Array) {
		g = false; parser.report_error("Semanticka greska na liniji "+destleft+": izraz tipa "+parser.getTypeName(e.getType())+" ne moze biti dodeljen tipu "+parser.getTypeName(dest.getType().getElemType()),null);
	}
	if (!g) {
		if (dest.getType() == Tab.find("string").getType()) {
			codeBuff.store(dest);
		}
		dest.setAdr(e.getAdr());
	}
:}

			  //	|
			 // 	error COMMA IDENT EQUAL Rhs {: parser.report_error("Uspesan oporavak od greske pri definiciji globalne promenljive konst2.", null); :}
				;

ConstVar ::= IDENT:varName
{:
	
	Obj temp = Tab.find(varName);
	if (temp.getLevel() == currentLevel) {
		parser.report_error("Semanticka greska na liniji "+varNameleft+": redefinicija promenljive "+varName, null);
		RESULT = Tab.noObj;
	}
	else {
		if (var_type==Tab.find("string").getType()) {
			Obj o = Tab.insert(Obj.Var, varName+"__$#_", var_type);
			o.setAdr(Code.dataSize);
			Code.dataSize++;
			hiddenVarsCount++;
		}
		Obj obj = Tab.insert(Obj.Con, varName, var_type);
		parser.report_info("Deklarisana promenljiva "+varName+" na liniji "+varNameleft, null);
		RESULT = obj;
		//Code.load(obj);
	}
	
:}
;
		
Rhs ::= NUMBER:i {: 
			Obj c = new Obj(Obj.Con, "", Tab.intType);
            c.setAdr(i.intValue()); 
			RESULT = c;
			setDesignatorInExprCond();
            designatorInExpr = false; 
		:}
			|
			CHARCONST:c {: 
				
				Obj o = new Obj(Obj.Con, "", Tab.charType);
                o.setAdr(c.charValue()); 
                RESULT = o;
                setDesignatorInExprCond();
                designatorInExpr = false; 
				:}
			|
			BOOLCONST:b {: 
					Obj bool = Tab.find("bool");
					setDesignatorInExprCond();
	                designatorInExpr = false; 
	                Obj o = RESULT = new Obj(Obj.Con, "", bool.getType());
	                boolean bVal = b.booleanValue();
	                if (bVal) {
	                	o.setAdr(1);
	                }
	                else {
	                	o.setAdr(0);
	                }
                :}
			|
			STRCONST:s
			{:

				Obj obj = Tab.find("string");
				Obj o = RESULT = new Obj(Obj.Var, "", obj.getType());
				setDesignatorInExprCond();
			    designatorInExpr = false;
			    int sz = s.length()-2;
			    char[] csTemp = new char[sz+2];
			    csTemp = s.toCharArray();

			    char[] cs = new char[sz+1];
			    for (int i=0; i<cs.length; i++) {
			    	cs[i] = csTemp[i+1];
			    }
			    cs[sz] = '\0';
			    

			    codeBuff.put(Code.enter);
			    codeBuff.put(0);
			    codeBuff.put(1);
			    codeBuff.loadConst(sz+1);
			    codeBuff.put(Code.newarray);
			    codeBuff.put(0);
			    codeBuff.put(Code.store_n);//addr of array
			    
			    int i = 0;
			    for (char c: cs) {

			    	codeBuff.put(Code.load_n);
				    codeBuff.loadConst(i);
				    codeBuff.loadConst(cs[i]);
				    codeBuff.put(Code.bastore);
				    i++;
			    }
			    codeBuff.put(Code.load_n);
			    codeBuff.put(Code.exit);
			    
			    
				/*Obj string = Tab.find("string");
				Obj o = new Obj(Obj.Var, "", string.getType());
				setDesignatorInExprCond();
			    designatorInExpr = false;
			    int sz = s.length()-2;
			    char[] csTemp = new char[sz+2];
			    csTemp = s.toCharArray();

			    char[] cs = new char[sz+1];
			    for (int i=0; i<cs.length; i++) {
			    	cs[i] = csTemp[i+1];
			    }
			    cs[sz] = '\0';
			    int adr = Code.dataSize;
			    o.setAdr(adr);
			    RESULT = o;
			    for (char c: cs) {
			    	Code.loadConst(c);
			    	Code.put(Code.putstatic);
			    	Code.put2(Code.dataSize);
			    	Code.dataSize++;
			    }*/
			:}
			;

GlobalVarDecl ::= Type GlobalVarList SEMI
				|
			Type:varType error:l SEMI {: parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri definiciji globalne promenljive",null); :}
			;

VarDecl ::= Type VarList SEMI
				|
			Type error:l VarDeclError {: parser.report_error("Izvrsen oporavak do ; ili { u liniji "+lleft+" pri definiciji lokalne promenljive/polja unutrasnje klase",null); :}
				;

VarDeclError ::= SEMI
					|
				/*epsilon*/
					;

GlobalVarList ::= GlobalVarList COMMA Var
					|
					Var:varName
					| 
					error:l COMMA Var 
					;

VarList ::= VarList COMMA Var
					|
					Var
					;
					
Var ::= IDENT:varName
{:
	Obj temp = Tab.find(varName);
	if (temp.getLevel() == currentLevel) {
		parser.report_error("Semanticka greska na liniji "+varNameleft+": redefinicija promenljive "+varName, null);
	}
	else {
		if (classDef) {
			Tab.insert(Obj.Fld, varName, var_type);
		}
		else {
			Obj o = Tab.insert(Obj.Var, varName, var_type);
			if (currentLevel==0) {
				o.setAdr(Code.dataSize++);
			}
			else {
				
			}
		}
		parser.report_info("Deklarisana promenljiva "+varName+" na liniji "+varNameleft, null);
		if (var_type.getKind()==Struct.Char && global == true) {
			parser.globalCharVarCount++;
		}
	}
:}
		|
		IDENT:varName LSQUARE RSQUARE 
{:
			if (global && !classDef)
				parser.globalArrayCount++;

			Obj temp = Tab.find(varName);
			if (temp.getLevel() == currentLevel) {
				parser.report_error("Semanticka greska na liniji "+varNameleft+": redefinicija promenljive "+varName, null);
			}
			else {
				if (classDef) {
					Tab.insert(Obj.Fld, varName, new Struct(Struct.Array, var_type));
				}
				else
					Tab.insert(Obj.Var, varName, new Struct(Struct.Array, var_type));
				parser.report_info("Deklarisana promenljiva "+varName+" na liniji "+varNameleft, null);
			}
:}
		;

Type ::= IDENT:typeName
{:
	
	typeNode = Tab.find(typeName);
	if (typeNode == Tab.noObj) {
		parser.report_error("Semanticka greska na liniji "+typeNameleft+ ": Nije pronadjen tip " + typeName + " u tabeli simbola.", null);
		var_type = RESULT = Tab.noType;
	}
	else {
		if (Obj.Type == typeNode.getKind()) {
			var_type = RESULT = typeNode.getType();
		}
		else {
			parser.report_error("Semanticka greska na liniji "+typeNameleft+ ": Ime " + typeName + " ne predstavlja tip.", null);
			var_type = RESULT = Tab.noType;
		}
	}
:};

ClassDecl ::= CLASS IDENT:name Ext:ext LBRACE {:
					
					classDef = true;

					Struct s = new Struct(Struct.Class);

					Obj tmp = Tab.find(name);
					if (tmp != Tab.noObj) {
						parser.report_error(name, nameleft, "duplikat naziva klase");
						currentClass = Tab.noObj;
					}
					else {
						currentClass = Tab.insert(Obj.Type, name, s);
						currentClass.getType().setElementType(ext);
					}
					Tab.openScope();
					currentLevel++;
					if (ext != Tab.noType) {
						Collection<Obj> membersInSuperclass = ext.getMembers();
						int n = ext.getNumberOfFields();
						int i=0;
						for (Obj obj:membersInSuperclass) {
							if (obj.getKind()==Obj.Fld) {//polja
								Obj o = Tab.insert(obj.getKind(), obj.getName(), obj.getType());
								//o.setAdr(Tab.currentScope().getnVars());
								o.setAdr(obj.getAdr());
							}
							else if (obj.getKind() == Obj.Meth){//metode
								Obj o = Tab.insert(obj.getKind(), obj.getName(), obj.getType());
								o.setAdr(obj.getAdr());
								o.setLevel(obj.getLevel());
								Collection<Obj> locals = obj.getLocalSymbols();
								Tab.openScope();
								currentLevel++;
								for (Obj loc: locals) {
									if (loc.getName().equals("this")) {
										Tab.insert(Obj.Var, "this", currentClass.getType());
									}
									else {
										Tab.insert(loc.getKind(), loc.getName(), loc.getType());
									}
								}
								o.setFpPos(obj.getFpPos());
								o.setLevel(obj.getLevel());
								Tab.chainLocalSymbols(o);
								Tab.closeScope();
								currentLevel--;
							}
							else {
								System.err.println("Do ovoga ne bi smelo da dodje");
							}
							i++;
						}
					}
					else {
						Obj o = Tab.insert(Obj.Fld, "hidden__$_#_", Tab.intType);
					}
					
				:} VarDeclList ClassMethods RBRACE {:
					// atributi klase koji se nalaze u unutrasnjem opsegu se  
					// pridruzuju polju fields struct cvora 
					 Tab.chainLocalSymbols(currentClass.getType());
					 int numOfFields = currentClass.getType().getNumberOfFields();
					 Collection<Obj> locals = Tab.currentScope().getLocals().symbols();
					 //int vftStart = getMethodTableSize();
					 currentClass.setAdr(Code.dataSize);
					 for (Obj obj: locals) {
						 if (obj.getKind()==Obj.Meth) {
							// Generate method entry.
							 addFunctionEntry (obj.getName(), obj.getAdr()); 
						 }
					 }
					 // Generate VFT terminator (-2). 
					 addTableTerminator(); 

					parser.classCount++;
					classDef = false;
					
					Tab.closeScope();
					currentLevel--;
				:}
				;

Ext ::= EXTENDS Type:t {:
			parser.classDerivationCount++;
			if (t.getKind() != Struct.Class) {
				parser.report_error(parser.getTypeName(t), tleft, "nije klasnog tipa");
			}
			RESULT = t;
		:}
		|
		error:l {: parser.report_error("Izvrsen oporavak do { u liniji "+lleft+" pri deklaraciji prosirenja natklase.",null); RESULT = Tab.noType; :}
		|
		/* epsilon */ {: RESULT = Tab.noType; :}
		;
		
VarDeclList ::= VarDeclList VarDecl {:
					if (classDef && !methodDef) {
						parser.classFieldCount++;
					}
				:}
				|
				/* epsilon */
				;
				
ClassMethods ::= LBRACE MethodDeclList RBRACE
				|
				/* epsilon */
				;



MethodDeclList ::= MethodDeclList MethodDecl
					|
					/* epsilon */
					;

MethodDecl ::= ReturnType:retType IDENT:methName 
				{: 
					methodDef = true;
					if (methName.equals("main")) {
						isMain = true;
					}
					boolean redefinition = false;
					if (classDef) {
						
						Struct superclass = currentClass.getType().getElemType();
						Collection<Obj> superclassMethods = superclass.getMembers();
						Obj superclassMeth = null;
						for (Obj meth:superclassMethods) {
							if (methName.equals(meth.getName())) {
								superclassMeth = meth;
								break;
							}
						}
						if (superclassMeth!=null) {
							redefinition = true;
							boolean substitution = false;
							Obj temp = currentMethod = new Obj(Obj.Meth, methName, retType);
							Struct eTemp = temp.getType();
							while (eTemp.getKind()==Struct.Class) {
								if (eTemp.getElemType() == superclassMeth.getType()) {
									substitution = true;
									break;
								}
								eTemp = eTemp.getElemType();
							}
							if (superclassMeth.getType().compatibleWith(temp.getType()) || substitution) {
								
								Collection<Obj> subclassLocals = Tab.currentScope().getLocals().symbols();
								for (Obj subclassMember:subclassLocals) {
									if (subclassMember.getName().equals(superclassMeth.getName())) {
										currentMethod = subclassMember;
										redefineMethod();
										Tab.openScope();
										currentLevel++;
										currentMethod.setLevel(1);
										//currentMethodParams++;
										Tab.insert(Obj.Var, "this", currentClass.getType());
										break;
									}
								}
							}
							else {
								parser.report_error("Greska : nekompatibilna povratna vrednost pri redefiniciji metoda u liniji "+retTypeleft, null);
							}
						}
					}
					if (!redefinition) {
						if (Tab.find(methName) != Tab.noObj) {
							parser.report_error(methName, methNameleft, "duplikat imena u tabeli simbola");
						}
						currentMethod = Tab.insert(Obj.Meth, methName, retType);
						currentMethod.setLevel(0);
						//currentMethodParams = 0;
						Tab.openScope();
						currentLevel++;
						if (classDef) {
							currentMethod.setLevel(currentMethod.getLevel()+1);
							//currentMethodParams++;
							Tab.insert(Obj.Var, "this", currentClass.getType());
						}
						parser.report_info("Obradjuje se funkcija na liniji "+methNameleft, null);
						if (currentMethod.getName().equals("main") && retType != Tab.noType) {
							parser.report_error("Main funkcija mora imati povratni tip void", null);
						}
					}
				 :}
				LPAREN FormalParams RPAREN VarDeclList LBRACE
{:
	currentMethod.setAdr(Code.pc);
	//currentMethod.setLevel(currentMethodParams);
	//currentMethod.setFpPos(currentMethodParams);
	if (isMain) {
		Code.mainPc = Code.pc;
		
		for (Byte b : codeBuff.getBuff()) {
			Code.buf[Code.pc++] = b;
		}
		for (byte b: MethodTable) {
			Code.buf[Code.pc++] = b;
		}
		MethodTable.clear();
	}
	Code.put(Code.enter);
	Code.put(currentMethod.getLevel());
	Code.put(Tab.currentScope().getnVars()); 
:} 
					StatementList RBRACE 
{:
					methodDef = false;
					if (!classDef)
						parser.funcCount++;
					else
						parser.classMethodCount++;
					parser.statementBlocks++;
					
					if (!returnFound && retType != Tab.noType) {
						parser.report_error("Semanticka greska na liniji " +methNameleft+": funkcija "+methName+" nema return iskaz.", null);
					}
					returnFound = false;
					Tab.chainLocalSymbols(currentMethod);
					
					
					if (currentMethod.getType() == Tab.noType) {
						Code.put(Code.exit);
						Code.put(Code.return_);
					}
					else {
						 Code.put(Code.trap);
						 Code.put(1);
					}
					currentMethod = null;
					Tab.closeScope();
					currentLevel--;
					isMain = false;
					isVoid = false;

:}
				;

ReturnType ::= Type:retType
{:
	RESULT = retType;
:}
				|
				VOID
{:
	isVoid=true;
	RESULT = Tab.noType;
:}
				;

FormalParams ::= FormPars 
{:
	if (currentMethod.getName().equals("main")) {
		parser.report_error("Main funkcija ne sme sadrzati argumente",null);
	}
:}
				|
				/* epsilon */
				;

FormPars  ::=  FormPars COMMA Parameter
		     		|    
		     		Parameter
		     		;

Parameter  ::=  Type IDENT:varName
{:
	Obj temp = Tab.find(varName);
	if (temp.getLevel() == currentLevel) {
		parser.report_error(varName, varNameleft, "duplikat imena u formalnim parametrima funkcije");
	}
	else {
		Tab.insert(Obj.Var, varName, var_type);
		parser.report_info("Deklarisan parametar "+varName+" na liniji "+varNameleft, null);
	}
	currentMethod.setLevel(currentMethod.getLevel()+1);
	//currentMethodParams++;
:}
	            |
	            Type IDENT:varName LSQUARE RSQUARE
{:
			Obj temp = Tab.find(varName);
			if (temp.getLevel() == currentLevel) {
				parser.report_error(varName, varNameleft, "duplikat imena u formalnim parametrima funkcije");
			}
			else {
				Tab.insert(Obj.Var, varName, new Struct(Struct.Array, var_type));
				parser.report_info("Deklarisan parametar "+varName+" na liniji "+varNameleft, null);
			}
:}
	            |
	            error:l {: parser.report_error("Izvrsen oporavak do , ili ) u liniji "+lleft+" pri deklaraciji formalnog parametra funkcije",null); :}
	            ;

StatementList ::= StatementList Statement
					|
					/* epsilon */
					;

Statement ::= Matched | Unmatched ;

 

Matched ::= Designator:dest EQUAL Expr:e SEMI
{:		
		boolean g = false;
		boolean substitution = false;

		Struct eTemp = e;
		while (eTemp.getKind()==Struct.Class) {
			if (eTemp.getElemType() == dest.getType()) {
				substitution = true;
				break;
			}
			eTemp = eTemp.getElemType();
		}
		
		if (!substitution && !e.assignableTo(dest.getType()) && dest.getType().getKind() != Struct.Array) {
			g = false; parser.report_error("Semanticka greska na liniji "+destleft+": izraz tipa "+parser.getTypeName(e)+" ne moze biti dodeljen tipu "+parser.getTypeName(dest.getType()),null);
		}
		else if (!substitution && (e.getElemType()!=dest.getType().getElemType() && !e.assignableTo(dest.getType().getElemType())) && dest.getType().getKind() == Struct.Array) {
			g = false; parser.report_error("Semanticka greska na liniji "+destleft+": izraz tipa "+parser.getTypeName(e)+" ne moze biti dodeljen tipu "+parser.getTypeName(dest.getType()),null);
		}
		if (dest.getKind() == Obj.Con) {
			g = false; parser.report_error(parser.getTypeName(dest.getType()), destleft, "ne moze se menjati vrednost konstantnom objektu");
		}
		if (dest.getKind() != Obj.Var && dest.getKind() != Obj.Fld && dest.getKind() != Obj.Elem) {
			g = false; parser.report_error(parser.getTypeName(dest.getType()), destleft, "designator mora biti promenljiva, element niza ili polje unutar objekta");
		}
		/*if (dest.getType().getKind()==Struct.Array && !designatorIsArrElem) {
			parser.report_error(parser.getTypeName(dest.getType()), destleft, "designator mora biti promenljiva, element niza ili polje unutar objekta");
		}*/
	
	Obj tmp = null;
	//boolean b = false;
	if (!g) {
		Code.store(dest);
	}
	if (designatorInExpr) {
		tmp = designatorStack.pop();
		//designatorInExpr = false;
		//b = true;
		resetDesignatorInExprCond();
	}
	//designatorStack.pop();
	if (newClassFactor) {

		newClassFactor = false;
		//if (dest.getKind()==Obj.Fld) {
			//Code.load(prevDesignator);
		//}
		while (!referenceStack.isEmpty()) {
			Code.load(referenceStack.remove());
		}
		Code.load(dest);
		Code.put(Code.const_);
		/*if (b) {
			var2Type.remove(dest);
			Obj o = var2Type.get(tmp);
			var2Type.put(dest, o);
			Code.put4(o.getAdr());
		}
		else {*/
			//var2Type.remove(dest);
			//var2Type.put(dest, typeNode);
			Code.put4(typeNode.getAdr());
		//}
		Code.put(Code.putfield);
		Code.put2(0);
	}
	
:}
				|
			Designator:dest DesignatorsFollowUp SEMI
{:
	boolean g = false;
	if (dest.getType() != Tab.intType) {
		g = true; parser.report_error(parser.getTypeName(dest.getType()), destleft, "designator mora biti tipa int u postfiksnom inkrementu i dekrementu");
	}
	if (dest.getKind() == Obj.Con) {
		g = true; parser.report_error(parser.getTypeName(dest.getType()), destleft, "ne moze se menjati vrednost konstantnom objektu");
	}
	if (dest.getKind() != Obj.Var && dest.getKind() != Obj.Fld && dest.getKind() != Obj.Elem) {
		g = true; parser.report_error(parser.getTypeName(dest.getType()), destleft, "designator mora biti promenljiva, element niza ili polje unutar objekta");
	}
	/*if (dest.getType().getKind()==Struct.Array && !designatorIsArrElem) {
		parser.report_error(parser.getTypeName(dest.getType()), destleft, "designator mora biti promenljiva, element niza ili polje unutar objekta");
	}*/
	if (!g) {
		Code.store(dest);
	}
:}
				|
			Designator:func	LPAREN ActParams RPAREN SEMI
{:
	if (Obj.Meth == func.getKind()) {
		parser.report_info("Pronadjen poziv funkcije "+func.getName()+" na liniji "+funcleft, null);
		RESULT = func.getType();
	}
	else {
		parser.report_error("Semanticka greska na liniji "+funcleft+": ime "+func.getName()+" nije funkcija.", null);
		RESULT = Tab.noType;
	}
	lockFunctionDesignator = false;
	if (isMain) {
		parser.funcCallsInMain++;
	}
	int destAdr = func.getAdr() - Code.pc;

	if (classMethodCall) {
		classMethodCall = false;
		while (!referenceStack.isEmpty()) {
			Code.load(referenceStack.remove());
		}
		Code.put(Code.getfield);
		Code.put2(0);
		Code.put(Code.invokevirtual);
		for (char c:func.getName().toCharArray()) {
			Code.put4(c);
		}
		Code.put4(-1);
	}
	else {
		Code.put(Code.call);
		Code.put2(destAdr);
	}
	if (func.getType() != Tab.noType) {
		Code.put(Code.pop);
	}
	numOfActPars = 0;
	functionDesignator = null;
:}
				|
			Designator LPAREN error:l RPAREN SEMI {: parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri zadavanju liste parametara u pozivu funkcije",null); :}
				|
			Designator LPAREN error:l SEMI {: parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri pozivu funkcije.",null); :}
				|
				Designator EQUAL error:l SEMI
					{: parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri iskazu dodele vrednosti.",null); :}
				|
				RETURN Expr:t SEMI 
				{:
					returnFound = true;
					Struct currMethType = currentMethod.getType();
					if (!currMethType.compatibleWith(t)) {
						parser.report_error("Semanticka greska na liniji "+tleft+": tip izraza u return naredbi se ne slaze sa tipom povratne vrednosti funkcije "+currentMethod.getName(),null);
					}
					if (isVoid) {
						parser.report_error("Semanticka greska na liniji "+tleft+": metod ne sme imati return sa izrazom jer je deklarisan sa void",null);
					}
					isVoid = false;
					// generisanje koda
	                Code.put(Code.exit);
	                Code.put(Code.return_);
	              if (designatorInExpr) {
					designatorStack.pop();
					//designatorInExpr = false;
					resetDesignatorInExprCond();
				}
				:}
				|
				RETURN:dummy SEMI
				{:
					returnFound = true;
					if (!isVoid) {
						parser.report_error("Semnaticka greska u liniji "+dummyleft+": nedostaje return iskaz.", null);
					}
					isVoid = false;
					// generisanje koda
	              	Code.put(Code.exit);
	                Code.put(Code.return_);
				:}
				|
				IfLexem LPAREN Condition RPAREN Matched ElseLexem Matched {:
						Code.fixup(tJumpAdrs.pop());
						tJumpAdrs = controlStacksT.pop();
						fJumpAdrs =controlStacksF.pop();
					:}
				|
				IfLexem LPAREN error:l RPAREN Matched ElseLexem Matched {: tJumpAdrs = controlStacksT.pop();
					fJumpAdrs =controlStacksF.pop(); parser.report_error("Izvrsen oporavak do ) u liniji "+lleft+" unutar izraza u if konstrukciji.",null); :}
				|
				WhileLoop  LPAREN Condition:op RPAREN Matched 
				{: 
					Code.putJump(tops.pop());
					Code.fixup(tJumpAdrs.pop());
					while (!breakJumps.empty()) {
						Code.fixup(breakJumps.pop());
					}
					breakJumps = controlStacksB.pop();
					insideWhile = false; 
					tJumpAdrs = controlStacksT.pop();
					fJumpAdrs =controlStacksF.pop();
				:}
				|
				WhileLoop LPAREN error:l RPAREN Matched {: tJumpAdrs = controlStacksT.pop(); breakJumps = controlStacksB.pop();
					fJumpAdrs =controlStacksF.pop(); insideWhile = false; parser.report_error("Izvrsen oporavak do ) u liniji "+lleft+" unutar izraza u while konstrukciji.",null); :}
				|
				BREAK:dummy SEMI
				{:	

					Code.putJump(0);
					breakJumps.push(Code.pc-2);
					if (!insideWhile) {
						parser.report_error("break", dummyleft, "moze se koristiti samo u while petlji");
					}
					:}
				|
				READ LPAREN Designator:dest RPAREN SEMI
{:
	boolean g = false;
	if (dest.getType() != Tab.intType && dest.getType() != Tab.charType && dest.getType() != Tab.find("bool").getType() && dest.getType() != Tab.find("string").getType()) {
		g = true; parser.report_error(dest.getName(), destleft, "u pozivu read(Designator) designator mora biti tipa int, char, bool ili string");
	}
	if (dest.getKind() != Obj.Var && dest.getKind() != Obj.Fld && dest.getKind() != Obj.Elem) {
		g= true; parser.report_error(parser.getTypeName(dest.getType()), destleft, "designator mora biti promenljiva, element niza ili polje unutar objekta");
	}
	/*if (dest.getType().getKind()==Struct.Array && !designatorIsArrElem) {
		parser.report_error(parser.getTypeName(dest.getType()), destleft, "designator mora biti promenljiva, element niza ili polje unutar objekta");
	}*/
	if (!g) {
		if (dest.getType() == Tab.find("string").getType()) {
			Code.put(Code.enter);
			Code.put(0);
			Code.put(3);


			Code.put(Code.bread);//read one char  : XXX
			Code.put(Code.store_n);///read one char
			Code.put(Code.load_1);//inc count
			Code.loadConst(1);
			Code.put(Code.add);
			Code.put(Code.store_1);///inc count
			Code.put(Code.load_n);//store char on stack
			Code.put(Code.load_n);//compare with '\n'
			Code.loadConst(13);///
			Code.put(Code.jcc+Code.ne);//jump up if not equal
			Code.put2(-13); //to XXX
			
			Code.put(Code.pop);
			Code.put(Code.load_1);//allocate array
			Code.put(Code.newarray);
			Code.put(0);
			Code.put(Code.store_2); //address of array

			Code.put(Code.load_1);
			Code.loadConst(1);
			Code.put(Code.sub);
			Code.put(Code.store_1);
			//put '\0'
			Code.put(Code.load_2);
			Code.put(Code.load_1);
			Code.loadConst('\0');
			Code.put(Code.bastore);
			Code.put(Code.load_1);
			Code.loadConst(1);
			Code.put(Code.sub);
			Code.put(Code.store_1);
			Code.put(Code.load_1);
			Code.loadConst(0);
			Code.put(Code.jcc+Code.eq);//no elements, only '\0'
			Code.put2(17); //to ZZZ //TODO: odrediti koliko je do ZZZ

			Code.put(Code.store_n);//take char from top of the stack : YYY
			Code.put(Code.load_2);//put adr
			Code.put(Code.load_1);//put offset
			Code.put(Code.load_n);//put val = char
			Code.put(Code.bastore);
			Code.put(Code.load_1);//dec count
			Code.loadConst(1);
			Code.put(Code.sub);
			Code.put(Code.store_1);
			Code.put(Code.load_1);
			Code.loadConst(-1);
			Code.put(Code.jcc+Code.ne);//do it again if there are more elements
			Code.put2(-11); //to YYY	
			
			Code.put(Code.load_2);//return address of array  : ZZZ

			Code.put(Code.exit);

			Code.store(dest);
			
		}
		else if (dest.getType() == Tab.find("bool").getType()) {
			Code.put(Code.read);
			Code.store(dest);
		}
		else if (dest.getType() == Tab.charType) {
			Code.put(Code.bread);
			Code.store(dest);
		}
		else {
			Code.put(Code.read);
			Code.store(dest);
		}
	}
:}
				|
				PRINT LPAREN Expr:dest OptNumbers RPAREN SEMI
{:
	if (dest != Tab.intType && dest != Tab.charType && dest != Tab.find("bool").getType() && dest != Tab.find("string").getType()) {
		parser.report_error("Greska na liniji "+destleft+": u pozivu read(Expr, [, number]) expr mora biti tipa int, char, bool ili string", null);
	}
	if (dest == Tab.intType) {
		Code.loadConst(5);
		Code.put(Code.print);
	}
	if (dest == Tab.charType) {
		Code.loadConst(1);
		Code.put(Code.bprint);
	}
	if (dest == Tab.find("bool").getType()) {
		Code.loadConst(5);
		Code.put(Code.print);
	}
	if (dest == Tab.find("string").getType()) {
		Code.put(Code.enter);
		Code.put(0);
		Code.put(3);

		Code.put(Code.store_2);//addr of array
		Code.put(Code.load_2); //YYY
		Code.put(Code.load_1);//count;
		Code.put(Code.baload);
		Code.put(Code.store_n);//char
		Code.put(Code.load_n);
		Code.loadConst('\0');
		Code.put(Code.jcc+Code.eq);
		Code.put2(13); //to XXX
		Code.put(Code.load_n);
		Code.loadConst(1);
		Code.put(Code.bprint);
		Code.put(Code.load_1);
		Code.loadConst(1);
		Code.put(Code.add);
		Code.put(Code.store_1);//inc count
		Code.put(Code.jmp);
		Code.put2(-16); //to YYY
		//XXX
		Code.put(Code.exit);
	}
	if (designatorInExpr) {
		designatorStack.pop();
		//designatorInExpr = false;
		resetDesignatorInExprCond();
	}
:}
				|
				LBRACE StatementList RBRACE  {:
						parser.statementBlocks++;
					:}
				;
				
WhileLoop ::= WHILE {:
	insideWhile = true;
	tops.push(Code.pc);
	controlStacksT.push(tJumpAdrs);
	controlStacksF.push(tJumpAdrs);
	controlStacksB.push(breakJumps);
	breakJumps = new Stack<Integer>();
	tJumpAdrs = new Stack<Integer>();
	fJumpAdrs = new Stack<Integer>();
:}
;

ElseLexem ::= ELSE {:
	Code.putJump(0);
	Code.fixup(tJumpAdrs.pop());
	tJumpAdrs.push(Code.pc-2);
:}
;

IfLexem ::= IF {:
	controlStacksT.push(tJumpAdrs);
	controlStacksF.push(tJumpAdrs);
	tJumpAdrs = new Stack<Integer>();
	fJumpAdrs = new Stack<Integer>();
:}
;

OptNumbers ::= COMMA NUMBER
				|
				/* epsilon */
				;
				
ActParams ::= ActPars:dummy
{:
		//int numOfFormPars = functionDesignator.getFpPos();
		int numOfFormPars = functionDesignator.getLevel();
		if (numOfFormPars != numOfActPars) {
			parser.report_error("Greska : netacan broj stvarnih parametara u pozivu funkcije u liniji "+dummyleft, null);
		}
:}
				|
				/* epsilon */
{:
		
		int numOfFormPars;
		boolean containsThis = false;
		Obj func = designatorStack.peek();
		if (functionDesignator==null) {
			numOfFormPars = func.getLevel();//func.getFpPos();
			Collection<Obj> col = func.getLocalSymbols();
			for (Obj o: col) {
				if (o.getName().equals("this")) {
					containsThis = true;;
				}
			}
		}
		else {
			numOfFormPars = func.getLevel();//functionDesignator.getFpPos();
			System.err.println("Greska? TODO");
		}
		if (0 != numOfFormPars && !(containsThis && numOfFormPars==1)) {
			parser.report_error("Greska : netacan broj stvarnih parametara u pozivu funkcije", null);
		}
:}
				;
				
ActPars ::= ActPars COMMA ActPar
			|
			ActPar
			;

ActPar ::= Expr:e {:

	//if (!lockFunctionDesignator) {
		//lockFunctionDesignator = true;
		Obj temp = null;
		if (designatorInExpr) {
			temp = designatorStack.pop();
			functionDesignator = designatorStack.peek();
			designatorStack.push(temp);
		}
		else {
			functionDesignator = designatorStack.peek();
		}
	//}

	Obj obj = null;
	
	int numOfFormPars = functionDesignator.getLevel();//functionDesignator.getFpPos();
	int i=0;
	boolean countedThis = false;
	Collection<Obj> col = functionDesignator.getLocalSymbols();
	for (Obj o: col) {
		if (i<numOfActPars) {
			i++;
			continue;
		}
		if (o.getName().equals("this")) {
				numOfActPars++;
				countedThis = true;
		}
		if (i==numOfActPars) {
			obj = o;
			break;
		}
		i++;
	}
	if (methodDef && obj == null) {
		if (Tab.currentScope().getLocals()!=null) {
			Collection<Obj> col2 = Tab.currentScope().getLocals().symbols();
			for (Obj o: col2) {
				if (i<numOfActPars) {
					i++;
					continue;
				}
				if (o.getName().equals("this") && !countedThis) {
						numOfActPars++;
				}
				if (i==numOfActPars) {
					obj = o;
					break;
				}
				i++;
			}
		}
	}
	if (numOfActPars >= numOfFormPars) {
		parser.report_error("Greska na liniji "+eleft+" vise stvarnih od formalnih parametara", null);
	}
	else if (!e.assignableTo(obj.getType())) {
	    parser.report_error(obj.getName(), eleft, "nekompatibilni tipovi stvarnih sa formalnim parametrima");
	}
	else {
    	parser.report_info(obj.getName(), eleft, obj);
	}
	numOfActPars++;
	if (designatorInExpr) {
		designatorStack.pop();
		//designatorInExpr = false;
		resetDesignatorInExprCond();
	}
	//Code.put(Code.pop); //TODO: //stvarni parametri nisu implementirani, pa da ne ostanu na steku
:};
			
Condition ::= CondTerm:ct
{:
	//Code.putJump(0);
	Code.putFalseJump(Code.inverse[ct], 0); //trueJump
	tJumpAdrs.push(Code.pc-2);

	while (!fJumpAdrs.empty()) {
		Code.fixup(fJumpAdrs.pop());
	}
	
	//adrs.push(Code.pc-2);
:} 
			OR Condition
				|
				CondTerm:ct
				{:
					
					
					Code.putFalseJump(Code.inverse[ct], 0); //trueJump
					tJumpAdrs.push(Code.pc-2);

					while (!fJumpAdrs.empty()) {
						Code.fixup(fJumpAdrs.pop());
					}
					Code.putJump(0);
					while (!tJumpAdrs.empty()) {
						Code.fixup(tJumpAdrs.pop());
					}
					tJumpAdrs.push(Code.pc-2);
				:} 
				;
				
CondTerm ::= CondTerm:ct 
{:
	Code.putFalseJump(ct, 0);
	fJumpAdrs.push(Code.pc-2);
:} 

AND CondFact:cf
{:	
	RESULT = cf;
:}
				|
				CondFact:cf 
{:
	RESULT = cf;
:}
				;
				
CondFact ::= Expr:tip1 Relop:uporedi Expr:tip2
 {:
   			 if (!tip1.compatibleWith(tip2)){
   				 parser.report_error(parser.getTypeName(tip1), tip1left, "nekompatiblini tipovi");
   			 }
   			 else{
   				 if (tip1.getKind() == Struct.Array || tip2.getKind() == Struct.Class){
   					 if (uporedi > 1){
   						 parser.report_error(parser.getTypeName(tip1), tip1left, "uz promenljive tipa klase ili niza se mogu koristiti samo != i ==");
   					 }
   				 }
   			 }
   			if (designatorInExpr) {
				designatorStack.pop();
				//designatorInExpr = false;
				resetDesignatorInExprCond();
			}
			RESULT = uporedi;
			//TODO
			/*if (!designatorInExprStack.empty()) {
   		 		boolean e2des = designatorInExprStack.pop();
   		 		boolean e1des = designatorInExprStack.pop();
   		 		if (e2des || e1des) {
   		 		designatorInExpr = true;
   		 		setDesignatorInExprCond();  		 		
   		 		}
   		 	}*/
   		 	if (tip1 == Tab.find("string").getType()) {
   		 		/*skini adrese sa steka, stavi 0 na stek, uporedi stringove, i ako su jednaki, stavi 0, u suprotnom, stavi jedan*/
   		 		Code.put(Code.enter);
   		 		Code.put(0);
   		 		Code.put(6);

   		 		Code.put(Code.store_n);//adr1
   		 		Code.put(Code.store_1);//adr2
   		 		Code.loadConst(0);
   		 		
   		 		Code.loadConst(0);
   		 		Code.put(Code.store_2);//count1
   		 		Code.loadConst(0);
   		 		Code.put(Code.store_3);//count2

   		 		Code.put(Code.load_n);//YYY
   		 		Code.put(Code.load_2);
   		 		Code.put(Code.baload);
   		 		Code.put(Code.store);
   		 		Code.put(4);
   		 		Code.put(Code.load);
   		 		Code.put(4);
   		 		Code.put(Code.load_1);
   		 		Code.put(Code.load_3);
   		 		Code.put(Code.baload);
   		 		Code.put(Code.store);
   		 		Code.put(5);
   		 		Code.put(Code.load);
   		 		Code.put(5);

   		 		Code.put(Code.load_2);
   		 		Code.loadConst(1);
   		 		Code.put(Code.add);
   		 		Code.put(Code.store_2);

   		 		Code.put(Code.load_3);
   		 		Code.loadConst(1);
   		 		Code.put(Code.add);
   		 		Code.put(Code.store_3);

   		 		Code.put(Code.jcc+Code.ne);
   		 		Code.put2(28);//to XXX

   		 		Code.loadConst('\0');
   		 		Code.put(Code.load);
   		 		Code.put(4);
   		 		Code.put(Code.sub);
   		 		Code.put(Code.load);
   		 		Code.put(5);
   		 		Code.put(Code.jcc+Code.eq);
   		 		Code.put2(23);//to ZZZ
   		 		Code.put(Code.load);

   		 		Code.loadConst('\0');
   		 		Code.put(Code.load);
   		 		Code.put(4);
   		 		Code.put(Code.jcc+Code.eq);
   		 		Code.put2(12); //to XXX
   		 		Code.loadConst('\0');
   		 		Code.put(Code.load);
   		 		Code.put(5);
   		 		Code.put(Code.jcc+Code.eq);
   		 		Code.put2(6); //to XXX

   		 		Code.put(Code.jmp);
   		 		Code.put2(-47); //to YYY

   		 		//XXX
   		 		Code.loadConst(1);
   		 		Code.put(Code.jmp);
   		 		Code.put2(4); //to WWW
   		 		//ZZZ
   		 		Code.loadConst(0);
   		 		//WWW
   		 		Code.put(Code.exit);
   		 	}
   		 :}

				|
				Expr:e {: 
					if (designatorInExpr) {
						designatorStack.pop();
						//designatorInExpr = false;
						resetDesignatorInExprCond();
					}
					if (e.getKind()!=Struct.Bool) {
						parser.report_error(parser.getTypeName(e), eleft, "Uslov mora biti tipa bool");
					}
					Code.put(Code.const_n);
					RESULT = 1; //Uporedi da li je ono sto je na steku (0 ili 1 za false ili true) jednako 1, ako jeste, uslov je tacan
				:}
				;
				
Expr ::= Sign:minus Term:tip1
{:  
		 if (minus == 0){
   	     	 if (tip1.getKind() != Struct.Int){
   	     		 parser.report_error(parser.getTypeName(tip1), tip1left, "pogresan tip pri operaciji negacije");
   	     	 }
   	      }
   	      RESULT = tip1;
   	      if (minus==0) {
   	      	Code.put(Code.neg);
   	      }

:}
	|
	Expr:tip1 Addop:znak Term:tip2
{:
		if (znak == 0){
   			 if( (tip1.getKind() == Struct.Int && tip2.getKind() == Struct.Int) || (tip1 == Tab.find("string").getType() && tip2 == Tab.find("string").getType() ) ){
   			 }
   			 else{
   				 parser.report_error(parser.getTypeName(tip1), tip1left, "pogresni tipovi u operaciji sabiranja");
   			 }
   		 }
   		 else{
   			 if( tip1.getKind() != Struct.Int || tip2.getKind() != Struct.Int ){
   				 parser.report_error(parser.getTypeName(tip1), tip1left, "pogresni tipovi u operaciji oduzimanja");
   			 }
   		 }
   		 RESULT = tip1;
   		 if (!designatorInExprStack.empty()) {
   		 	boolean e1des = false;
   		 	boolean e2des = designatorInExprStack.pop();
   		 	if (!designatorInExprStack.empty())
   		    	e1des = designatorInExprStack.pop();
   		 	if (e2des || e1des) {
   		 		designatorInExpr = true;
   		 		setDesignatorInExprCond();  		 		
   		 	}
   		 }
   		 if (tip1 == Tab.find("string").getType() && tip2 == Tab.find("string").getType() && znak == 0) {
   		 	Code.put(Code.enter);
   		 	Code.put(0);
   		 	Code.put(6);

   		 	
   		 	Code.put(Code.store_n);//adr
   		 	Code.put(Code.store_3);//adr1
   		 	//Code.put(Code.load_3);
   		 	Code.put(Code.load_n);
   		 	Code.put(Code.store);//adr2
   		 	Code.put(4);
   		 	//Code.put(Code.load);
   		 	//Code.put(4);

   		 	for (int i=0; i<2; i++, Code.put(Code.load_3), Code.put(Code.store_n), Code.loadConst(0), Code.put(Code.store), Code.put(5)) {
   		 		Code.put(Code.load_n);
   		 		Code.put(Code.load);//count
   		 		Code.put(5);
   		 		Code.put(Code.baload);
   		 		Code.put(Code.store_1);//save value

   		 		Code.put(Code.load);
   		 		Code.put(5);
   		 		Code.loadConst(1);
   		 		Code.put(Code.add);
   		 		Code.put(Code.store);//save incremented count
   		 		Code.put(5);

   		 		Code.put(Code.load_2);//whole count
   		 		Code.loadConst(1);
   		 		Code.put(Code.add);
   		 		Code.put(Code.store_2);

   		 		Code.put(Code.load_1);
   		 		Code.loadConst('\0');
   		 		Code.put(Code.jcc+Code.ne);
   		 		Code.put2(-17);
   		 	}

   		 	Code.put(Code.load_2);//new count
   		 	Code.loadConst(-1);
   		 	Code.put(Code.add);
   		 	Code.put(Code.store_2);


   		 	Code.put(Code.load_2);
   		 	Code.put(Code.newarray);
   		 	Code.put(0);
   		 	Code.put(Code.store);//dst array
   		 	Code.put(5);
   		 	//copy chars into new array
   		 	Code.loadConst(0);//src index
   		 	Code.put(Code.store_1);//src index
   		 	Code.loadConst(0);//dst index
   		 	Code.put(Code.store_2);//dst index
   		 	Code.put(Code.load_3);//src array  YYY
   		 	Code.put(Code.load_1);
   		 	Code.put(Code.baload);
   		 	Code.put(Code.store_n);

   		 	Code.put(Code.load_n);
   		 	Code.loadConst('\0');
   		 	Code.put(Code.jcc+Code.eq);
   		 	Code.put2(19);//to XXX

   		 	Code.put(Code.load);
   		 	Code.put(5);
   		 	Code.put(Code.load_2);
   		 	Code.put(Code.load_n);
   		 	Code.put(Code.bastore);

   		 	Code.put(Code.load_2);
   		 	Code.loadConst(1);
   		 	Code.put(Code.add);
   		 	Code.put(Code.store_2);

   		 	Code.put(Code.load_1);
   		 	Code.loadConst(1);
   		 	Code.put(Code.add);
   		 	Code.put(Code.store_1);

   		 	Code.put(Code.jmp);
   		 	Code.put2(-22); //to YYY
   		 	///XXX, second string copy
   		 	Code.loadConst(0);//src index
   		 	Code.put(Code.store_1);//src index
   		 	Code.put(Code.load);//src array WWW
   		 	Code.put(4);
   		 	Code.put(Code.load_1);
   		 	Code.put(Code.baload);
   		 	Code.put(Code.store_n);

   		 	Code.put(Code.load);
   		 	Code.put(5);
   		 	Code.put(Code.load_2);
   		 	Code.put(Code.load_n);
   		 	Code.put(Code.bastore);

   		 	Code.put(Code.load_2);
   		 	Code.loadConst(1);
   		 	Code.put(Code.add);
   		 	Code.put(Code.store_2);

   		 	Code.put(Code.load_1);
   		 	Code.loadConst(1);
   		 	Code.put(Code.add);
   		 	Code.put(Code.store_1);

   		 	Code.put(Code.load_n);
   		 	Code.loadConst('\0');
   		 	Code.put(Code.jcc+Code.eq);
   		 	Code.put2(6);//to ZZZ

   		 	Code.put(Code.jmp);
   		 	Code.put2(-23);//to WWW
   		 	//ZZZ, end of copying
   		 	Code.put(Code.load);
   		 	Code.put(5);

   		 	Code.put(Code.exit);
   		 }
   		 else {
	   		 switch(znak) {
	   			case 0: Code.put(Code.add);
	   					break;
	   			case 1: Code.put(Code.sub);
	   					break;
	   		}
   		}
:}
;

Sign ::= MINUS  {:
   			 RESULT = 0;
   		 :}
| /* epsilon */  {:
   			 RESULT = 1;
   		 :}
;

			
Term ::= Factor:tip1
 {:
   		 RESULT = tip1;
 :}

	|
	Term:tip1 Mulop:op Factor:tip2
	 {:
   		 if( tip1.getKind() != Struct.Int || tip2.getKind() != Struct.Int ){
   			parser.report_error(parser.getTypeName(tip1), tip1left, "pogresni tipovi u operaciji, dozvoljeno je koristiti samo operande tipa int");
   		 }
   		 RESULT = tip1;

   		 if (!designatorInExprStack.empty()) {
   		 	boolean e1des = false;
   		 	boolean e2des = designatorInExprStack.pop();
   		 	if (!designatorInExprStack.empty())
   		    	e1des = designatorInExprStack.pop();
   		 	if (e2des || e1des) {
   		 		designatorInExpr = true;
   		 		setDesignatorInExprCond();  		 		
   		 	}
   		 }
   		switch(op) {
   			case 0: Code.put(Code.mul);
   					break;
   			case 1: Code.put(Code.div);
   					break;
   			case 2: Code.put(Code.rem);
   					break;
   		}
   	 :}
   	 
;

			
Factor ::= Designator:func LPAREN ActParams RPAREN
{:
	if (Obj.Meth == func.getKind()) {
		parser.report_info("Pronadjen poziv funkcije "+func.getName()+" na liniji "+funcleft, null);
		RESULT = func.getType();
	}
	else {
		parser.report_error("Semanticka greska na liniji "+funcleft+": ime "+func.getName()+" nije funkcija.", null);
		RESULT = Tab.noType;
	}
	lockFunctionDesignator = false;
	if (isMain) {
		parser.funcCallsInMain++;
	}
	if (func.getType() == Tab.noType) {
		parser.report_error(func.getName(), funcleft, "ne moze se koristiti u izrazima jer nema povratnu vrednost");
	}
	int destAdr = func.getAdr() - Code.pc;
	if (classMethodCall) {
		classMethodCall = false;
		while (!referenceStack.isEmpty()) {
			Code.load(referenceStack.remove());
		}
		Code.put(Code.getfield);
		Code.put2(0);
		Code.put(Code.invokevirtual);
		for (char c:func.getName().toCharArray()) {
			Code.put(c);
		}
		Code.loadConst(-1);
	}
	else {
		Code.put(Code.call);
		Code.put2(destAdr);
	}
	setDesignatorInExprCond();
	designatorInExpr = true;
	//designatorInExpr = true;
	numOfActPars = 0;
	functionDesignator = null;

:}
			|
		   Designator:d {: RESULT = d.getType();
		     if (d.getType()==Tab.find("string").getType() && d.getKind()==Obj.Con) 
		     	Code.load(Tab.find(d.getName()+"__$#_"));
		     else 
		     	Code.load(d); //designatorInExpr = true;
		   	setDesignatorInExprCond();
		   	designatorInExpr = true;
		   	 :}
			|
			NUMBER:i 
			{: 
				
				/*Obj temp = Tab.find(""+i.intValue());
				if (temp == Tab.noObj) {
					Obj c = Tab.insert(Obj.Con, ""+i.intValue(), Tab.intType);
					c.setAdr(i.intValue());
					Code.load(c);
				}
				else {
					Code.load(temp);
				}*/
				Obj c = new Obj(Obj.Con, "", Tab.intType);
                c.setAdr(i.intValue()); 
                Code.load(c); 
				RESULT = Tab.intType;
				setDesignatorInExprCond();
                designatorInExpr = false; 
			:}
			|
			CHARCONST:c {: 
				RESULT = Tab.charType;
				Obj o = new Obj(Obj.Con, "", Tab.charType);
                o.setAdr(c.charValue()); 
                Code.load(o);
                setDesignatorInExprCond();
                designatorInExpr = false; 
				:}
			|
			BOOLCONST:b {: 
				Struct boolType = RESULT = Tab.find("bool").getType(); 
				setDesignatorInExprCond();
                designatorInExpr = false; 
                Obj o = new Obj(Obj.Con, "", boolType);
                boolean bVal = b.booleanValue();
                if (bVal) {
                	o.setAdr(1);
                }
                else {
                	o.setAdr(0);
                }
                Code.load(o);
                :}
			|
			STRCONST:s 
{: 
	Obj obj = Tab.find("string");
	RESULT = obj.getType(); 
	setDesignatorInExprCond();
    designatorInExpr = false;
    int sz = s.length()-2;
    char[] csTemp = new char[sz+2];
    csTemp = s.toCharArray();

    char[] cs = new char[sz+1];
    for (int i=0; i<cs.length; i++) {
    	cs[i] = csTemp[i+1];
    }
    cs[sz] = '\0';
    
    Code.put(Code.enter);
    Code.put(0);
    Code.put(1);
    Code.loadConst(sz+1);
    Code.put(Code.newarray);
    Code.put(0);
    Code.put(Code.store_n);//addr of array
    
    int i = 0;
    for (char c: cs) {

    	Code.put(Code.load_n);
	    Code.loadConst(i);
	    Code.loadConst(cs[i]);
	    Code.put(Code.bastore);
	    i++;
    }
    Code.put(Code.load_n);
    Code.put(Code.exit);
    //Obj o = new Obj(Obj.Con, "", obj.getType());
   // o.setAdr(adr);
:}
			|
			NEW Type:tip1 {:
				parser.newStatementCount++;
	   			 if (tip1.getKind() != Struct.Class){
	   				 parser.report_error(parser.getTypeName(tip1), tip1left, "nevalidan tip u operatoru NEW");
	   			 }
	   			 RESULT = tip1; setDesignatorInExprCond();
                designatorInExpr = false; 
                int n = tip1.getNumberOfFields()*4;
                Code.put(Code.new_);
                Code.put2(n);
                newClassFactor = true;
			:}
			|
			NEW Type:t LSQUARE Expr:e RSQUARE
			{:
				if (e.getKind() != Struct.Int) {
					parser.report_error(parser.getTypeName(e), eleft, "nevalidan tip expr u operatoru NEW[expr]");
				}
				Code.put(Code.newarray);
                if ( t == Tab.charType ) 
                	Code.put(0); 
                else 
                	Code.put(1);
                RESULT=new Struct(Struct.Array, t);
               if (designatorInExpr) {
					designatorStack.pop();
					//designatorInExpr = false;
					resetDesignatorInExprCond();
				}
				setDesignatorInExprCond();
                designatorInExpr = false; 
				:}
			|
			LPAREN Expr:e RPAREN {: 
				RESULT = e;
				if (designatorInExpr) {
					designatorStack.pop();
					//designatorInExpr = false;
					resetDesignatorInExprCond();
				}
				setDesignatorInExprCond();
                designatorInExpr = false; 
			 :}
			;
				
DesignatorsFollowUp ::= 
						INC
{:
	Obj dsgn = designatorStack.peek();
	Code.load(dsgn);
	Code.put(Code.const_n+1);
	Code.put(Code.add);
:}
						|
						DEC
{:
	Obj dsgn = designatorStack.peek();
	Code.load(dsgn);
	Code.put(Code.const_n+1);
	Code.put(Code.sub);
:}
						;
				
Unmatched ::= IfLexem LPAREN Condition RPAREN Statement {: 
					Code.fixup(tJumpAdrs.pop());
					tJumpAdrs = controlStacksT.pop();
					fJumpAdrs =controlStacksF.pop(); :}
			 |
			 IfLexem LPAREN error:l RPAREN Statement {: tJumpAdrs = controlStacksT.pop();
					fJumpAdrs =controlStacksF.pop(); parser.report_error("Izvrsen oporavak do ) u liniji "+lleft+" unutar izraza u if konstrukciji.",null); :}
			 | 
			 IfLexem LPAREN Condition RPAREN Matched ElseLexem Unmatched {: 
			 		Code.fixup(tJumpAdrs.pop());
			 		tJumpAdrs = controlStacksT.pop();
					fJumpAdrs =controlStacksF.pop();  :}
			 |
			 IfLexem LPAREN error:l RPAREN Matched ElseLexem Unmatched {: tJumpAdrs = controlStacksT.pop();
					fJumpAdrs =controlStacksF.pop(); parser.report_error("Izvrsen oporavak do ) u liniji "+lleft+" unutar izraza u if konstrukciji.",null); :}
			 |
			 WhileLoop LPAREN Condition RPAREN  Unmatched
			  {: 

					Code.putJump(tops.pop());
					while (!breakJumps.empty()) {
						Code.fixup(breakJumps.pop());
					}
					breakJumps = controlStacksB.pop();
					Code.fixup(tJumpAdrs.pop());
					insideWhile = false; 
					tJumpAdrs = controlStacksT.pop();
					fJumpAdrs =controlStacksF.pop();
			 	:}
			 |
			 WhileLoop LPAREN error:l RPAREN Unmatched {: tJumpAdrs = controlStacksT.pop(); breakJumps = controlStacksB.pop();
					fJumpAdrs =controlStacksF.pop(); insideWhile = false; parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" unutar izraza u while konstrukciji.",null); :}
			 ;
					
Designator ::= IDENT:name
{:	
	previosDesignator = currentDesignator;
	referenceStack = new LinkedList<Obj>();
	Obj obj = currentDesignator = Tab.find(name);
	/*if (obj.getType()==Tab.find("string").getType() && obj.getKind()==Obj.Con) {
		obj = currentDesignator = Tab.find(name+"__$#_");
	}*/
	if (obj == Tab.noObj) {
		parser.report_error(name, nameleft, "nije deklarisano");
	}
	else
		parser.report_info(name, nameleft, obj);
	designatorStack.push(obj);
	RESULT = obj;
	curr_ident = obj;
	designatorIsArrElem = false;
	//if (obj.getType().getKind()==Struct.Array && obj.getType() != Tab.find("string").getType()) {
		//Code.load(curr_ident);
	//}

:} IdentList:il {:
	if (il != Tab.noObj) {
		RESULT = il;
	}
:}
;

IdentList ::= IdentList:il
{:
	if (il.getType().getKind()==Struct.Array && il.getType() != Tab.find("string").getType()) {
		Code.load(il);
	}
:}
 IdentRef:ir 
{: 
	if (ir != null)
		RESULT = ir;
	else
		RESULT = il;
:}
				|
				/* epsilon */ {: RESULT = Tab.noObj; :}
				;
				
IdentRef ::= DOT IDENT:ident
			{:
				if (curr_ident.getType().getKind() == Struct.Class) {
					Obj obj = Tab.noObj;
					Collection<Obj> polja = curr_ident.getType().getMembers();
   					boolean pronasao = false;
   					for(Obj polje: polja){
   						if(ident.equals(polje.getName())){
   							pronasao = true;
   							obj = polje;
   							/*if (obj.getType()==Tab.find("string").getType() && obj.getKind()==Obj.Con) {
								obj = Tab.find(name+"__$#_");
							}*/
   							break;
   						}
   					}
   					if (curr_ident.getName().equals("this") && classDef) {
   						//TODO, napravi funckiju za proveravanje da li je trazeni simbol u local scopu
   						obj = Tab.noObj;
   						Collection<Obj> col = Tab.currentScope().getOuter().getLocals().symbols();
   						for (Obj c: col) {
   							if (c.getName().equals(ident)) {
   								pronasao = true;
   								obj = c;
   								break;
   							}
   						}
						/*if (obj.getType()==Tab.find("string").getType() && obj.getKind()==Obj.Con) {
								obj = Tab.find(name+"__$#_");
						}*/

						/*boolean uslov;
						if (obj.getKind()==Obj.Meth) {
							//proveri tip this parametra
						}
						else {
							uslov = obj.getLevel()==currentLevel-1;
						}*/
						pronasao = obj != Tab.noObj;// && uslov;
					}
   					if(!pronasao){
   						parser.report_error(curr_ident.getName(), identleft, "pogresni tipovi u izrazu IDENT[.IDENT]");
   					}
   					else {
						previosDesignator = currentDesignator;
						currentDesignator = obj;
						//if (designatorInExpr) {
							//if (obj.getKind()!=Obj.Meth) {
								Obj t  = prevDesignator = designatorStack.pop();
								if (t.getType()==Tab.find("string").getType() && t.getKind()==Obj.Con) {
									t = Tab.find(ident+"__$#_");
								}
								Code.load(t);
								referenceStack.add(t);
							//}
							//resetDesignatorInExprCond();
						//}
						designatorStack.push(obj);
						if (obj == Tab.noObj) {
							parser.report_error("Semanticka greska na liniji "+identleft+": ime "+ident+" nije deklarisano.", null);
						}
						RESULT = obj;
						if (obj.getKind() == Obj.Meth) {
							classMethodCall = true;
							//Code.load();
						}
						curr_ident = obj;


						designatorIsArrElem = false;
						if (obj.getType().getKind()==Struct.Class) {
							//newClassFactor = true;
							//Code.load(obj);
						}
						else {
							//newClassFactor = false;
						}

					}
				}
				else {
					parser.report_error("Semanticka greska u liniji "+identleft+": "+curr_ident.getName()+" mora biti promenljiva klasnog tipa.",null);
				}
			:}
			|
			LSQUARE:dummy 
				 Expr:e RSQUARE
			{:
				 // generisanje koda 
				 if (e != Tab.intType) {
				 	parser.report_error("Greska u liniji "+eleft+": indeks niza mora biti tipa int", null);
				 }
                 
                Obj temp = null;
				if (designatorInExpr) {
					temp = designatorStack.pop();
					curr_ident = designatorStack.peek();
					designatorStack.push(temp);
				}
				else {
					curr_ident = designatorStack.peek();
				}
                 // dalje prenosimo element niza
                // curr_ident = designatorInExpr ? previosDesignator : currentDesignator;
                Struct s = curr_ident.getType().getElemType();
                if (s==null) {
                	s = Tab.noType;
                }
                 RESULT=new Obj(Obj.Elem, "", s);
				 designatorIsArrElem = true;
				if (designatorInExpr) {
					designatorStack.pop();
					//designatorInExpr = false;
					resetDesignatorInExprCond();
				}
				 if (curr_ident.getType().getKind()!=Struct.Array) 
                              parser.report_error("Semanticka greska u liniji "+dummyleft+": Ocekivan niz na mestu identifikatora "+curr_ident.getName(),null);
				
				
			:}
			|
			LSQUARE error:l RSQUARE {: 
				designatorIsArrElem = true;
				parser.report_error("Izvrsen oporavak do ] u liniji "+lleft+" pri indeksiranju niza.",null);
			 :}
			;

Relop ::= IS_EQUAL
 {:
   			 RESULT = 0;
   		 :}

			|
			NOT_EQUAL
			 {:
   			 RESULT = 1;
   		 :}

			|
			GT
			 {:
   			 RESULT = 4;
   		 :}

			|
			GTE
			 {:
   			 RESULT = 5;
   		 :}

			|
			LT
			 {:
   			 RESULT = 2;
   		 :}

			|
			LTE
			 {:
   			 RESULT = 3;
   		 :}

			;

Addop ::= PLUS
 {:
   			 RESULT = 0;
   		 :}

			|
			MINUS
			 {:
   			 RESULT = 1;
   		 :}

			;
			
Mulop ::= TIMES
{:
	RESULT = 0;
:}
			|
			DIV
{:
	RESULT = 1;
:}
			|
			MOD
{:
	RESULT = 2;
:}
			;