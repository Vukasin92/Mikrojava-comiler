
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jan 28 00:58:11 CET 2015
//----------------------------------------------------

package rs.ac.bg.etf.pp1.sv110059;

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jan 28 00:58:11 CET 2015
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\177\000\002\060\002\000\002\002\011\000\002\002" +
    "\004\000\002\025\004\000\002\025\002\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\027\006\000" +
    "\002\027\005\000\002\032\005\000\002\032\004\000\002" +
    "\032\007\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\010\005\000\002\010\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\004\000" +
    "\002\011\005\000\002\011\003\000\002\011\005\000\002" +
    "\030\005\000\002\030\003\000\002\031\003\000\002\031" +
    "\005\000\002\006\003\000\002\061\002\000\002\033\012" +
    "\000\002\034\004\000\002\034\003\000\002\034\002\000" +
    "\002\003\004\000\002\003\002\000\002\035\005\000\002" +
    "\035\002\000\002\004\004\000\002\004\002\000\002\062" +
    "\002\000\002\007\014\000\002\040\003\000\002\040\003" +
    "\000\002\037\003\000\002\037\002\000\002\012\005\000" +
    "\002\012\003\000\002\036\004\000\002\036\006\000\002" +
    "\036\003\000\002\015\004\000\002\015\002\000\002\016" +
    "\003\000\002\016\003\000\002\023\005\000\002\023\007" +
    "\000\002\023\007\000\002\023\006\000\002\023\006\000" +
    "\002\023\005\000\002\023\004\000\002\023\011\000\002" +
    "\023\011\000\002\023\007\000\002\023\007\000\002\023" +
    "\004\000\002\023\007\000\002\023\010\000\002\023\005" +
    "\000\002\046\005\000\002\046\002\000\002\057\003\000" +
    "\002\057\002\000\002\047\005\000\002\047\003\000\002" +
    "\045\005\000\002\045\003\000\002\050\005\000\002\050" +
    "\003\000\002\051\005\000\002\051\003\000\002\020\005" +
    "\000\002\053\003\000\002\053\002\000\002\054\005\000" +
    "\002\054\002\000\002\021\004\000\002\055\005\000\002" +
    "\055\002\000\002\014\004\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\004" +
    "\000\002\014\007\000\002\014\005\000\002\041\005\000" +
    "\002\041\002\000\002\044\004\000\002\044\003\000\002" +
    "\044\003\000\002\022\007\000\002\022\007\000\002\022" +
    "\011\000\002\022\011\000\002\022\007\000\002\022\007" +
    "\000\002\017\004\000\002\042\004\000\002\042\002\000" +
    "\002\043\004\000\002\043\005\000\002\043\005\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\013\003" +
    "\000\002\013\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\334\000\004\004\005\001\002\000\004\002\336\001" +
    "\002\000\004\056\006\001\002\000\012\005\ufffd\033\ufffd" +
    "\045\ufffd\056\ufffd\001\002\000\012\005\012\033\020\045" +
    "\017\056\013\001\002\000\012\005\ufffe\033\ufffe\045\ufffe" +
    "\056\ufffe\001\002\000\006\003\325\056\060\001\002\000" +
    "\010\006\001\017\001\056\001\001\002\000\054\003\uffe4" +
    "\005\uffe4\007\uffe4\011\uffe4\012\uffe4\015\uffe4\021\uffe4\022" +
    "\uffe4\023\uffe4\024\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\056" +
    "\uffe4\001\002\000\012\005\ufffb\033\ufffb\045\ufffb\056\ufffb" +
    "\001\002\000\012\005\ufffa\033\ufffa\045\ufffa\056\ufffa\001" +
    "\002\000\012\005\ufffc\033\ufffc\045\ufffc\056\ufffc\001\002" +
    "\000\004\056\042\001\002\000\006\003\022\056\013\001" +
    "\002\000\004\056\025\001\002\000\004\007\023\001\002" +
    "\000\012\005\ufff8\033\ufff8\045\ufff8\056\ufff8\001\002\000" +
    "\006\007\036\012\035\001\002\000\006\003\026\016\027" +
    "\001\002\000\006\007\ufff6\012\ufff6\001\002\000\012\046" +
    "\034\047\033\050\031\055\030\001\002\000\006\007\ufff4" +
    "\012\ufff4\001\002\000\006\007\ufff1\012\ufff1\001\002\000" +
    "\006\007\ufff7\012\ufff7\001\002\000\006\007\ufff2\012\ufff2" +
    "\001\002\000\006\007\ufff3\012\ufff3\001\002\000\004\056" +
    "\037\001\002\000\012\005\ufff9\033\ufff9\045\ufff9\056\ufff9" +
    "\001\002\000\004\016\040\001\002\000\012\046\034\047" +
    "\033\050\031\055\030\001\002\000\006\007\ufff5\012\ufff5" +
    "\001\002\000\010\003\045\005\uffdf\020\044\001\002\000" +
    "\004\005\047\001\002\000\004\056\013\001\002\000\004" +
    "\005\uffe0\001\002\000\004\005\uffe1\001\002\000\010\005" +
    "\uffe3\006\uffe3\056\uffe3\001\002\000\010\005\uffdd\006\uffdd" +
    "\056\uffdd\001\002\000\010\005\052\006\uffdb\056\013\001" +
    "\002\000\010\006\uffd9\017\uffd9\056\uffd9\001\002\000\006" +
    "\003\057\056\060\001\002\000\010\005\uffde\006\uffde\056" +
    "\uffde\001\002\000\004\006\056\001\002\000\012\005\uffe2" +
    "\033\uffe2\045\uffe2\056\uffe2\001\002\000\012\005\uffec\006" +
    "\uffec\007\070\056\uffec\001\002\000\010\007\uffe6\012\uffe6" +
    "\035\066\001\002\000\006\007\064\012\063\001\002\000" +
    "\006\007\uffe7\012\uffe7\001\002\000\004\056\060\001\002" +
    "\000\010\005\uffee\006\uffee\056\uffee\001\002\000\006\007" +
    "\uffe8\012\uffe8\001\002\000\004\036\067\001\002\000\006" +
    "\007\uffe5\012\uffe5\001\002\000\010\005\uffed\006\uffed\056" +
    "\uffed\001\002\000\010\006\073\017\075\056\013\001\002" +
    "\000\004\056\uffd6\001\002\000\004\006\uffdc\001\002\000" +
    "\010\006\uffda\017\uffda\056\uffda\001\002\000\004\056\uffd5" +
    "\001\002\000\004\056\077\001\002\000\004\010\100\001" +
    "\002\000\010\003\102\011\uffd3\056\013\001\002\000\004" +
    "\056\317\001\002\000\006\011\uffce\012\uffce\001\002\000" +
    "\006\011\uffd4\012\315\001\002\000\004\011\106\001\002" +
    "\000\006\011\uffd1\012\uffd1\001\002\000\006\005\uffd8\056" +
    "\uffd8\001\002\000\006\005\uffdd\056\uffdd\001\002\000\006" +
    "\005\111\056\013\001\002\000\024\005\uffcc\006\uffcc\013" +
    "\uffcc\014\uffcc\041\uffcc\044\uffcc\052\uffcc\053\uffcc\056\uffcc" +
    "\001\002\000\024\005\115\006\126\013\123\014\125\041" +
    "\127\044\114\052\121\053\113\056\116\001\002\000\004" +
    "\010\311\001\002\000\004\010\300\001\002\000\024\005" +
    "\uffcc\006\uffcc\013\uffcc\014\uffcc\041\uffcc\044\uffcc\052\uffcc" +
    "\053\uffcc\056\uffcc\001\002\000\060\007\uff91\010\uff91\011" +
    "\uff91\012\uff91\015\uff91\016\uff91\021\uff91\022\uff91\023\uff91" +
    "\024\uff91\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91\034" +
    "\uff91\035\uff91\036\uff91\037\uff91\040\uff91\042\uff91\043\uff91" +
    "\054\uff91\001\002\000\012\010\251\016\247\042\246\043" +
    "\250\001\002\000\024\005\uffca\006\uffca\013\uffca\014\uffca" +
    "\041\uffca\044\uffca\052\uffca\053\uffca\056\uffca\001\002\000" +
    "\004\010\207\001\002\000\024\005\uffcd\006\uffcd\013\uffcd" +
    "\014\uffcd\041\uffcd\044\uffcd\052\uffcd\053\uffcd\056\uffcd\001" +
    "\002\000\004\010\200\001\002\000\024\005\uffcb\006\uffcb" +
    "\013\uffcb\014\uffcb\041\uffcb\044\uffcb\052\uffcb\053\uffcb\056" +
    "\uffcb\001\002\000\024\007\133\010\uffac\025\uffac\030\132" +
    "\046\uffac\047\uffac\050\uffac\055\uffac\056\uffac\001\002\000" +
    "\010\006\uffd7\017\uffd7\056\uffd7\001\002\000\004\007\130" +
    "\001\002\000\026\005\uffbe\006\uffbe\013\uffbe\014\uffbe\041" +
    "\uffbe\044\uffbe\051\uffbe\052\uffbe\053\uffbe\056\uffbe\001\002" +
    "\000\004\007\177\001\002\000\020\010\uffad\025\uffad\046" +
    "\uffad\047\uffad\050\uffad\055\uffad\056\uffad\001\002\000\026" +
    "\005\uffc3\006\uffc3\013\uffc3\014\uffc3\041\uffc3\044\uffc3\051" +
    "\uffc3\052\uffc3\053\uffc3\056\uffc3\001\002\000\020\010\145" +
    "\025\135\046\140\047\141\050\144\055\137\056\116\001" +
    "\002\000\004\056\013\001\002\000\046\007\uff9d\010\163" +
    "\011\uff9d\012\uff9d\015\uff9d\021\uff9d\022\uff9d\023\uff9d\024" +
    "\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\034\uff9d" +
    "\036\uff9d\037\uff9d\040\uff9d\001\002\000\044\007\uffa5\011" +
    "\uffa5\012\uffa5\015\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5" +
    "\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\034\uffa5\036" +
    "\uffa5\037\uffa5\040\uffa5\001\002\000\044\007\uffa4\011\uffa4" +
    "\012\uffa4\015\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\026" +
    "\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\034\uffa4\036\uffa4" +
    "\037\uffa4\040\uffa4\001\002\000\044\007\uffa3\011\uffa3\012" +
    "\uffa3\015\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\026\uffa3" +
    "\027\uffa3\030\uffa3\031\uffa3\032\uffa3\034\uffa3\036\uffa3\037" +
    "\uffa3\040\uffa3\001\002\000\036\007\uffaa\011\uffaa\012\uffaa" +
    "\015\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\030\uffaa\031" +
    "\uffaa\032\uffaa\034\uffaa\036\uffaa\037\uffaa\001\002\000\044" +
    "\007\uffa7\011\uffa7\012\uffa7\015\uffa7\021\uffa7\022\uffa7\023" +
    "\uffa7\024\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7" +
    "\034\uffa7\036\uffa7\037\uffa7\040\uffa7\001\002\000\044\007" +
    "\uffa2\011\uffa2\012\uffa2\015\uffa2\021\uffa2\022\uffa2\023\uffa2" +
    "\024\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\034" +
    "\uffa2\036\uffa2\037\uffa2\040\uffa2\001\002\000\022\010\uffac" +
    "\025\uffac\030\132\046\uffac\047\uffac\050\uffac\055\uffac\056" +
    "\uffac\001\002\000\004\011\147\001\002\000\044\007\uff9f" +
    "\011\uff9f\012\uff9f\015\uff9f\021\uff9f\022\uff9f\023\uff9f\024" +
    "\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\034\uff9f" +
    "\036\uff9f\037\uff9f\040\uff9f\001\002\000\044\007\uffa9\011" +
    "\uffa9\012\uffa9\015\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9" +
    "\026\152\027\151\030\uffa9\031\uffa9\032\uffa9\034\uffa9\036" +
    "\uffa9\037\uffa9\040\154\001\002\000\020\010\uff83\025\uff83" +
    "\046\uff83\047\uff83\050\uff83\055\uff83\056\uff83\001\002\000" +
    "\020\010\uff84\025\uff84\046\uff84\047\uff84\050\uff84\055\uff84" +
    "\056\uff84\001\002\000\020\010\145\025\135\046\140\047" +
    "\141\050\144\055\137\056\116\001\002\000\020\010\uff85" +
    "\025\uff85\046\uff85\047\uff85\050\uff85\055\uff85\056\uff85\001" +
    "\002\000\044\007\uffa8\011\uffa8\012\uffa8\015\uffa8\021\uffa8" +
    "\022\uffa8\023\uffa8\024\uffa8\026\uffa8\027\uffa8\030\uffa8\031" +
    "\uffa8\032\uffa8\034\uffa8\036\uffa8\037\uffa8\040\uffa8\001\002" +
    "\000\036\007\uffae\011\uffae\012\uffae\015\157\021\uffae\022" +
    "\uffae\023\uffae\024\uffae\030\160\031\uffae\032\uffae\034\uffae" +
    "\036\uffae\037\uffae\001\002\000\020\010\uff87\025\uff87\046" +
    "\uff87\047\uff87\050\uff87\055\uff87\056\uff87\001\002\000\020" +
    "\010\uff86\025\uff86\046\uff86\047\uff86\050\uff86\055\uff86\056" +
    "\uff86\001\002\000\020\010\145\025\135\046\140\047\141" +
    "\050\144\055\137\056\116\001\002\000\036\007\uffab\011" +
    "\uffab\012\uffab\015\uffab\021\uffab\022\uffab\023\uffab\024\uffab" +
    "\030\uffab\031\uffab\032\uffab\034\uffab\036\uffab\037\uffab\001" +
    "\002\000\024\010\uffac\011\uffb7\025\uffac\030\132\046\uffac" +
    "\047\uffac\050\uffac\055\uffac\056\uffac\001\002\000\044\007" +
    "\uffa6\011\uffa6\012\uffa6\015\uffa6\021\uffa6\022\uffa6\023\uffa6" +
    "\024\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\034" +
    "\uffa6\036\uffa6\037\uffa6\040\uffa6\001\002\000\004\011\172" +
    "\001\002\000\006\011\uffb8\012\170\001\002\000\006\011" +
    "\uffb5\012\uffb5\001\002\000\022\010\uffac\025\uffac\030\132" +
    "\046\uffac\047\uffac\050\uffac\055\uffac\056\uffac\001\002\000" +
    "\006\011\uffb6\012\uffb6\001\002\000\044\007\uff9e\011\uff9e" +
    "\012\uff9e\015\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\026" +
    "\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\034\uff9e\036\uff9e" +
    "\037\uff9e\040\uff9e\001\002\000\046\007\uffa1\011\uffa1\012" +
    "\uffa1\015\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\026\uffa1" +
    "\027\uffa1\030\uffa1\031\uffa1\032\uffa1\034\uffa1\035\174\036" +
    "\uffa1\037\uffa1\040\uffa1\001\002\000\022\010\uffac\025\uffac" +
    "\030\132\046\uffac\047\uffac\050\uffac\055\uffac\056\uffac\001" +
    "\002\000\004\036\176\001\002\000\044\007\uffa0\011\uffa0" +
    "\012\uffa0\015\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\026" +
    "\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\034\uffa0\036\uffa0" +
    "\037\uffa0\040\uffa0\001\002\000\026\005\uffc4\006\uffc4\013" +
    "\uffc4\014\uffc4\041\uffc4\044\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\056\uffc4\001\002\000\022\010\uffac\025\uffac\030\132\046" +
    "\uffac\047\uffac\050\uffac\055\uffac\056\uffac\001\002\000\006" +
    "\011\uffb9\012\uffb9\001\002\000\006\011\204\012\203\001" +
    "\002\000\004\055\206\001\002\000\004\007\205\001\002" +
    "\000\026\005\uffbc\006\uffbc\013\uffbc\014\uffbc\041\uffbc\044" +
    "\uffbc\051\uffbc\052\uffbc\053\uffbc\056\uffbc\001\002\000\006" +
    "\011\uffba\012\uffba\001\002\000\024\003\211\010\uffac\025" +
    "\uffac\030\132\046\uffac\047\uffac\050\uffac\055\uffac\056\uffac" +
    "\001\002\000\010\011\uffb3\034\220\037\uffb3\001\002\000" +
    "\004\011\237\001\002\000\024\011\uffaf\021\uffaf\022\uffaf" +
    "\023\uffaf\024\uffaf\031\uffaf\032\uffaf\034\uffaf\037\uffaf\001" +
    "\002\000\024\011\uffb1\021\225\022\223\023\224\024\226" +
    "\031\222\032\227\034\uffb1\037\uffb1\001\002\000\006\011" +
    "\215\037\216\001\002\000\022\005\115\013\123\014\125" +
    "\041\127\044\114\052\121\053\113\056\116\001\002\000" +
    "\022\010\uffac\025\uffac\030\132\046\uffac\047\uffac\050\uffac" +
    "\055\uffac\056\uffac\001\002\000\010\011\uffb4\034\220\037" +
    "\uffb4\001\002\000\022\010\uffac\025\uffac\030\132\046\uffac" +
    "\047\uffac\050\uffac\055\uffac\056\uffac\001\002\000\024\011" +
    "\uffb2\021\225\022\223\023\224\024\226\031\222\032\227" +
    "\034\uffb2\037\uffb2\001\002\000\022\010\uff8c\025\uff8c\030" +
    "\uff8c\046\uff8c\047\uff8c\050\uff8c\055\uff8c\056\uff8c\001\002" +
    "\000\022\010\uff8a\025\uff8a\030\uff8a\046\uff8a\047\uff8a\050" +
    "\uff8a\055\uff8a\056\uff8a\001\002\000\022\010\uff89\025\uff89" +
    "\030\uff89\046\uff89\047\uff89\050\uff89\055\uff89\056\uff89\001" +
    "\002\000\022\010\uff8b\025\uff8b\030\uff8b\046\uff8b\047\uff8b" +
    "\050\uff8b\055\uff8b\056\uff8b\001\002\000\022\010\uff88\025" +
    "\uff88\030\uff88\046\uff88\047\uff88\050\uff88\055\uff88\056\uff88" +
    "\001\002\000\022\010\uff8d\025\uff8d\030\uff8d\046\uff8d\047" +
    "\uff8d\050\uff8d\055\uff8d\056\uff8d\001\002\000\022\010\uffac" +
    "\025\uffac\030\132\046\uffac\047\uffac\050\uffac\055\uffac\056" +
    "\uffac\001\002\000\024\011\uffb0\021\uffb0\022\uffb0\023\uffb0" +
    "\024\uffb0\031\uffb0\032\uffb0\034\uffb0\037\uffb0\001\002\000" +
    "\024\005\uff99\006\uff99\013\uff99\014\uff99\041\uff99\044\uff99" +
    "\052\uff99\053\uff99\056\uff99\001\002\000\026\005\uffcb\006" +
    "\uffcb\013\uffcb\014\uffcb\041\uffcb\044\uffcb\051\234\052\uffcb" +
    "\053\uffcb\056\uffcb\001\002\000\022\005\115\013\123\014" +
    "\125\041\127\044\114\052\121\053\113\056\116\001\002" +
    "\000\024\005\uff97\006\uff97\013\uff97\014\uff97\041\uff97\044" +
    "\uff97\052\uff97\053\uff97\056\uff97\001\002\000\026\005\uffc2" +
    "\006\uffc2\013\uffc2\014\uffc2\041\uffc2\044\uffc2\051\uffc2\052" +
    "\uffc2\053\uffc2\056\uffc2\001\002\000\022\005\115\013\123" +
    "\014\125\041\127\044\114\052\121\053\113\056\116\001" +
    "\002\000\024\005\uff98\006\uff98\013\uff98\014\uff98\041\uff98" +
    "\044\uff98\052\uff98\053\uff98\056\uff98\001\002\000\026\005" +
    "\uffcb\006\uffcb\013\uffcb\014\uffcb\041\uffcb\044\uffcb\051\242" +
    "\052\uffcb\053\uffcb\056\uffcb\001\002\000\022\005\115\013" +
    "\123\014\125\041\127\044\114\052\121\053\113\056\116" +
    "\001\002\000\024\005\uff96\006\uff96\013\uff96\014\uff96\041" +
    "\uff96\044\uff96\052\uff96\053\uff96\056\uff96\001\002\000\026" +
    "\005\uffc1\006\uffc1\013\uffc1\014\uffc1\041\uffc1\044\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\056\uffc1\001\002\000\004\007\264" +
    "\001\002\000\004\007\uff9b\001\002\000\024\003\261\010" +
    "\uffac\025\uffac\030\132\046\uffac\047\uffac\050\uffac\055\uffac" +
    "\056\uffac\001\002\000\004\007\uff9a\001\002\000\026\003" +
    "\253\010\uffac\011\uffb7\025\uffac\030\132\046\uffac\047\uffac" +
    "\050\uffac\055\uffac\056\uffac\001\002\000\004\011\257\001" +
    "\002\000\006\007\255\011\254\001\002\000\004\007\256" +
    "\001\002\000\026\005\uffc6\006\uffc6\013\uffc6\014\uffc6\041" +
    "\uffc6\044\uffc6\051\uffc6\052\uffc6\053\uffc6\056\uffc6\001\002" +
    "\000\026\005\uffc7\006\uffc7\013\uffc7\014\uffc7\041\uffc7\044" +
    "\uffc7\051\uffc7\052\uffc7\053\uffc7\056\uffc7\001\002\000\004" +
    "\007\260\001\002\000\026\005\uffc8\006\uffc8\013\uffc8\014" +
    "\uffc8\041\uffc8\044\uffc8\051\uffc8\052\uffc8\053\uffc8\056\uffc8" +
    "\001\002\000\004\007\263\001\002\000\004\007\uff9c\001" +
    "\002\000\026\005\uffc5\006\uffc5\013\uffc5\014\uffc5\041\uffc5" +
    "\044\uffc5\051\uffc5\052\uffc5\053\uffc5\056\uffc5\001\002\000" +
    "\026\005\uffc9\006\uffc9\013\uffc9\014\uffc9\041\uffc9\044\uffc9" +
    "\051\uffc9\052\uffc9\053\uffc9\056\uffc9\001\002\000\060\007" +
    "\uff93\010\uff93\011\uff93\012\uff93\015\uff93\016\uff93\021\uff93" +
    "\022\uff93\023\uff93\024\uff93\026\uff93\027\uff93\030\uff93\031" +
    "\uff93\032\uff93\034\uff93\035\266\036\uff93\037\uff93\040\uff93" +
    "\042\uff93\043\uff93\054\270\001\002\000\024\003\272\010" +
    "\uffac\025\uffac\030\132\046\uffac\047\uffac\050\uffac\055\uffac" +
    "\056\uffac\001\002\000\060\007\uff92\010\uff92\011\uff92\012" +
    "\uff92\015\uff92\016\uff92\021\uff92\022\uff92\023\uff92\024\uff92" +
    "\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92\034\uff92\035" +
    "\uff92\036\uff92\037\uff92\040\uff92\042\uff92\043\uff92\054\uff92" +
    "\001\002\000\004\056\271\001\002\000\060\007\uff90\010" +
    "\uff90\011\uff90\012\uff90\015\uff90\016\uff90\021\uff90\022\uff90" +
    "\023\uff90\024\uff90\026\uff90\027\uff90\030\uff90\031\uff90\032" +
    "\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90\042\uff90" +
    "\043\uff90\054\uff90\001\002\000\004\036\275\001\002\000" +
    "\004\036\274\001\002\000\060\007\uff8f\010\uff8f\011\uff8f" +
    "\012\uff8f\015\uff8f\016\uff8f\021\uff8f\022\uff8f\023\uff8f\024" +
    "\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\034\uff8f" +
    "\035\uff8f\036\uff8f\037\uff8f\040\uff8f\042\uff8f\043\uff8f\054" +
    "\uff8f\001\002\000\060\007\uff8e\010\uff8e\011\uff8e\012\uff8e" +
    "\015\uff8e\016\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e\026" +
    "\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\034\uff8e\035\uff8e" +
    "\036\uff8e\037\uff8e\040\uff8e\042\uff8e\043\uff8e\054\uff8e\001" +
    "\002\000\024\005\115\006\277\013\123\014\125\041\127" +
    "\044\114\052\121\053\113\056\116\001\002\000\026\005" +
    "\uffbb\006\uffbb\013\uffbb\014\uffbb\041\uffbb\044\uffbb\051\uffbb" +
    "\052\uffbb\053\uffbb\056\uffbb\001\002\000\024\003\301\010" +
    "\uffac\025\uffac\030\132\046\uffac\047\uffac\050\uffac\055\uffac" +
    "\056\uffac\001\002\000\004\011\306\001\002\000\006\011" +
    "\303\037\216\001\002\000\022\005\115\013\123\014\125" +
    "\041\127\044\114\052\121\053\113\056\116\001\002\000" +
    "\024\005\uff95\006\uff95\013\uff95\014\uff95\041\uff95\044\uff95" +
    "\052\uff95\053\uff95\056\uff95\001\002\000\026\005\uffc0\006" +
    "\uffc0\013\uffc0\014\uffc0\041\uffc0\044\uffc0\051\uffc0\052\uffc0" +
    "\053\uffc0\056\uffc0\001\002\000\022\005\115\013\123\014" +
    "\125\041\127\044\114\052\121\053\113\056\116\001\002" +
    "\000\024\005\uff94\006\uff94\013\uff94\014\uff94\041\uff94\044" +
    "\uff94\052\uff94\053\uff94\056\uff94\001\002\000\026\005\uffbf" +
    "\006\uffbf\013\uffbf\014\uffbf\041\uffbf\044\uffbf\051\uffbf\052" +
    "\uffbf\053\uffbf\056\uffbf\001\002\000\004\056\116\001\002" +
    "\000\004\011\313\001\002\000\004\007\314\001\002\000" +
    "\026\005\uffbd\006\uffbd\013\uffbd\014\uffbd\041\uffbd\044\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\056\uffbd\001\002\000\006\003" +
    "\102\056\013\001\002\000\006\011\uffd2\012\uffd2\001\002" +
    "\000\010\011\uffd0\012\uffd0\035\320\001\002\000\004\036" +
    "\321\001\002\000\006\011\uffcf\012\uffcf\001\002\000\010" +
    "\006\uffd9\017\uffd9\056\uffd9\001\002\000\010\006\324\017" +
    "\075\056\013\001\002\000\004\002\000\001\002\000\006" +
    "\007\334\012\333\001\002\000\006\007\331\012\330\001" +
    "\002\000\006\007\uffea\012\uffea\001\002\000\004\056\060" +
    "\001\002\000\012\005\ufff0\033\ufff0\045\ufff0\056\ufff0\001" +
    "\002\000\006\007\uffeb\012\uffeb\001\002\000\004\056\060" +
    "\001\002\000\012\005\uffef\033\uffef\045\uffef\056\uffef\001" +
    "\002\000\006\007\uffe9\012\uffe9\001\002\000\004\002\uffff" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\334\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\006\001\001\000\014\006\010" +
    "\010\013\026\007\027\015\033\014\001\001\000\002\001" +
    "\001\000\006\011\325\031\326\001\001\000\004\060\321" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\020" +
    "\001\001\000\004\032\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\040\001\001\000\002\001\001\000\004" +
    "\034\042\001\001\000\002\001\001\000\004\006\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\047" +
    "\001\001\000\004\003\050\001\001\000\010\005\053\006" +
    "\052\035\054\001\001\000\004\004\070\001\001\000\006" +
    "\030\060\031\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\071\007" +
    "\073\040\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\100\012\102\036\104\037\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\106" +
    "\001\001\000\004\003\107\001\001\000\006\005\053\006" +
    "\052\001\001\000\004\015\111\001\001\000\012\016\121" +
    "\017\116\022\117\023\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\275\001\001\000\004\042\264" +
    "\001\001\000\004\044\244\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\130\053\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\142\017" +
    "\135\021\141\001\001\000\004\006\172\001\001\000\004" +
    "\041\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\054\155\001\001\000\004\055\147" +
    "\001\001\000\002\001\001\000\006\020\145\053\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\056\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\154\017\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\142\017\135\021\161\001\001\000\002" +
    "\001\001\000\012\020\166\047\165\053\133\057\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\170\053\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\174\053\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\200\053\133\001\001" +
    "\000\004\046\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\020\211\045\213\050\207\051\212\053\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\227\001\001\000\002\001\001\000\012\016" +
    "\231\017\116\022\117\023\232\001\001\000\012\020\211" +
    "\050\216\051\212\053\133\001\001\000\002\001\001\000" +
    "\010\020\211\051\220\053\133\001\001\000\004\052\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\230\053\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\116\022\234" +
    "\023\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\237\017\116\022\117\023\240\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\116\022\242\023" +
    "\243\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\261\053\133\001" +
    "\001\000\002\001\001\000\012\020\166\047\165\053\133" +
    "\057\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\266" +
    "\001\001\000\006\020\272\053\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\121\017\116\022\117\023\123\001\001\000\002" +
    "\001\001\000\014\020\211\045\301\050\207\051\212\053" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\116\022\303\023\304\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\116\022\306\023\307\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\311\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\100\036\315\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\322\001\001\000\010\006\071\007\073\040\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\331\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\334\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		System.out.println(s.toString() + " " + s.value.toString());
	return s;

    }


	//promenljive za brojanje pojavljivanja odredjenih elemenata
	
	int globalCharVarCount = 0; //TODO: R40
	int globalArrayCount = 0; //R41
	int funcCount = 0; //R42
	int classCount = 0; //R43
	int statementBlocks = 0; //R44
	int funcCallsInMain = 0; //TODO: R45
	int newStatementCount = 0; //R46
	int classMethodCount = 0; //R47
	int classFieldCount = 0; //R48
	int classDerivationCount = 0; //R49

    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
    boolean greska;
     
   public void report_fatal_error(String message, Object   info) throws java.lang.Exception {
   	  greska=true;
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

  public void report_error(String message, Object info)
    {
      greska=true;
      System.err.print(message);
      System.err.flush();
      if (info instanceof Symbol)
          System.err.println(" na liniji " + ((Symbol)info).left);
      else System.err.println("");
    }
    
    public void printCounts() {
    	System.out.println("Broj elemenata: ");
    	System.out.println("Deklaracije globalnih nizova - " + globalArrayCount);
    	System.out.println("Definicije funkcija u glavnom programu - " + funcCount);
    	System.out.println("Definicije unutrasnjih klasa - " + classCount);
    	System.out.println("Blokovi naredbi - " + statementBlocks);
    	System.out.println("Naredbe stvaranja objekta - " + newStatementCount);
    	System.out.println("Definicije metoda unutrasnjih klasa - " + classMethodCount);
    	System.out.println("Definicije polja unutrasnjih klasa - " + classFieldCount);
    	System.out.println("Izvodjenja klasa - " + classDerivationCount);
    }
    
    public static void main(String args[]) throws Exception {
        FileReader r = new FileReader(args[0]);
        Yylex skener = new Yylex(r);
        MJParser p = new MJParser(skener);
        Symbol s = p.parse();  //pocetak parsiranja
        if (p.greska) 
        	System.out.println("Ulazni program ima gresaka!");
        else {
        	p.printCounts();
        	System.out.println("Parsiranje uspesno zavrseno!");
        }
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {



	boolean global = true;
	boolean classDef = false;
	boolean methodDef = false;
	

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Mulop ::= MOD 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Mulop ::= DIV 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Mulop ::= TIMES 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Addop ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Addop ::= PLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Relop ::= LTE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Relop ::= LT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Relop ::= GTE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Relop ::= GT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Relop ::= NOT_EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Relop ::= IS_EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // IdentRef ::= LSQUARE error RSQUARE 
            {
              Object RESULT =null;
		  System.err.println("Uspesan oporavak od greske pri indeksiranju niza."); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentRef",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // IdentRef ::= LSQUARE Expr RSQUARE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentRef",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // IdentRef ::= DOT IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentRef",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // IdentList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // IdentList ::= IdentList IdentRef 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Designator ::= IDENT IdentList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Unmatched ::= WHILE LPAREN error RPAREN Unmatched 
            {
              Object RESULT =null;
		 System.err.println("Uspesan oporavak od greske unutar izraza u while konstrukciji."); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Unmatched ::= WHILE LPAREN Condition RPAREN Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Unmatched ::= IF LPAREN error RPAREN Matched ELSE Unmatched 
            {
              Object RESULT =null;
		  System.err.println("Uspesan oporavak od greske unutar izraza u if konstrukciji."); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Unmatched ::= IF LPAREN Condition RPAREN Matched ELSE Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Unmatched ::= IF LPAREN error RPAREN Statement 
            {
              Object RESULT =null;
		  System.err.println("Uspesan oporavak od greske unutar izraza u if konstrukciji."); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Unmatched ::= IF LPAREN Condition RPAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DesignatorsFollowUp ::= DEC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorsFollowUp",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DesignatorsFollowUp ::= INC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorsFollowUp",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DesignatorsFollowUp ::= EQUAL Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorsFollowUp",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FunctionCall ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FunctionCall",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FunctionCall ::= LPAREN ActParams RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FunctionCall",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Factor ::= LPAREN Expr RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Factor ::= NEW Type LSQUARE Expr RSQUARE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Factor ::= NEW Type 
            {
              Object RESULT =null;
		
				parser.newStatementCount++;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Factor ::= STRCONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Factor ::= BOOLCONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Factor ::= CHARCONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Factor ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Factor ::= Designator FunctionCall 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // MulList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulList",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // MulList ::= MulList Mulop Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulList",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Term ::= Factor MulList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // AddList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddList",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // AddList ::= AddList Addop Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddList",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Sign ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Sign",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Sign ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Sign",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Sign Term AddList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CondFact ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CondFact ::= CondFact Relop Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CondTerm ::= CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CondTerm ::= CondTerm AND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Condition ::= CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Condition ::= Condition OR CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ActPars ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ActPars ::= ActPars COMMA Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ActParams ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParams",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ActParams ::= ActPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParams",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OptNumbers ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptNumbers",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OptNumbers ::= OptNumbers COMMA NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptNumbers",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Matched ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
		
						parser.statementBlocks++;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Matched ::= PRINT LPAREN Expr OptNumbers RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Matched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Matched ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Matched ::= WHILE LPAREN error RPAREN Matched 
            {
              Object RESULT =null;
		 System.err.println("Uspesan oporavak od greske unutar izraza u while konstrukciji."); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Matched ::= WHILE LPAREN Condition RPAREN Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Matched ::= IF LPAREN error RPAREN Matched ELSE Matched 
            {
              Object RESULT =null;
		  System.err.println("Uspesan oporavak od greske unutar izraza u if konstrukciji."); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Matched ::= IF LPAREN Condition RPAREN Matched ELSE Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Matched ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Matched ::= RETURN Expr SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Matched ::= Designator EQUAL error SEMI 
            {
              Object RESULT =null;
		 System.err.println("Uspesan oporavak od greske pri dodeli vrednosti."); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Matched ::= Designator LPAREN error SEMI 
            {
              Object RESULT =null;
		  System.err.println("Uspesan oporavak od greske pri pozivu funkcije."); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Matched ::= Designator LPAREN error RPAREN SEMI 
            {
              Object RESULT =null;
		 System.err.println("Uspesan oporavak od greske pri zadavanju liste parametara u pozivu funkcije."); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Matched ::= Designator LPAREN ActParams RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Matched ::= Designator DesignatorsFollowUp SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Parameter ::= error 
            {
              Object RESULT =null;
		 System.err.println("Uspesan oporavak od greske pri deklaraciji formalnog parametra funkcije."); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Parameter",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Parameter ::= Type IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Parameter",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Parameter ::= Type IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Parameter",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FormPars ::= Parameter 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FormPars ::= FormPars COMMA Parameter 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FormalParams ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParams",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FormalParams ::= FormPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParams",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ReturnType ::= VOID 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnType",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ReturnType ::= Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnType",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MethodDecl ::= ReturnType IDENT LPAREN FormalParams RPAREN NT$2 VarDeclList LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
					methodDef = false;
					if (!classDef)
						parser.funcCount++;
					else
						parser.classMethodCount++;
					
					parser.statementBlocks++;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$2 ::= 
            {
              Object RESULT =null;

					methodDef = true;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ClassMethods ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethods",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ClassMethods ::= LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethods",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VarDeclList ::= VarDeclList VarDecl 
            {
              Object RESULT =null;
		
					if (classDef && !methodDef) {
						parser.classFieldCount++;
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Ext ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Ext",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Ext ::= error 
            {
              Object RESULT =null;
		 System.err.println("Uspesan oporavak od greske pri deklaraciji prosirenja natklase."); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Ext",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Ext ::= EXTENDS Type 
            {
              Object RESULT =null;
		
			parser.classDerivationCount++;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Ext",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassDecl ::= CLASS IDENT Ext LBRACE NT$1 VarDeclList ClassMethods RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
					parser.classCount++;
					classDef = false;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$1 ::= 
            {
              Object RESULT =null;

					classDef = true;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Type ::= IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Var ::= IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;
		
			if (global && !classDef)
				parser.globalArrayCount++;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Var ::= IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VarList ::= Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VarList ::= VarList COMMA Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // GlobalVarList ::= error COMMA Var 
            {
              Object RESULT =null;
		 System.err.println("Uspesan oporavak od greske pri definiciji globalne promenljive 2."); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // GlobalVarList ::= Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // GlobalVarList ::= GlobalVarList COMMA Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarDecl ::= Type error 
            {
              Object RESULT =null;
		 System.err.println("Uspesan oporavak od greske pri deklaraciji lokalne promenljive/polja unutrasnje klase."); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDecl ::= Type error SEMI 
            {
              Object RESULT =null;
		 System.err.println("Uspesan oporavak od greske pri deklaraciji lokalne promenljive/polja unutrasnje klase."); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDecl ::= Type VarList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GlobalVarDecl ::= Type error SEMI 
            {
              Object RESULT =null;
		 System.err.println("Uspesan oporavak od greske pri definiciji globalne promenljive 1."); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDecl",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // GlobalVarDecl ::= Type GlobalVarList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDecl",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Rhs ::= STRCONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Rhs",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Rhs ::= BOOLCONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Rhs",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Rhs ::= CHARCONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Rhs",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Rhs ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Rhs",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstPart ::= ConstPart COMMA IDENT EQUAL Rhs 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstPart",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstPart ::= IDENT error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstPart",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstPart ::= IDENT EQUAL Rhs 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstPart",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDecl ::= CONST error SEMI 
            {
              Object RESULT =null;
		 System.err.println("Uspesan oporavak od greske pri definiciji globalne promenljive konst1."); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConstDecl ::= CONST Type ConstPart SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclarationPart ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationPart",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclarationPart ::= GlobalVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationPart",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclarationPart ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationPart",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclarationList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclarationList ::= DeclarationList DeclarationPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= PROGRAM IDENT DeclarationList LBRACE NT$0 MethodDeclList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;

						global = false;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

