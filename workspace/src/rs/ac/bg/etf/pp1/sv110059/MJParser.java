
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 02 21:42:52 CET 2015
//----------------------------------------------------

package rs.ac.bg.etf.pp1.sv110059;

import java_cup.runtime.*;
import java.io.*;
import rs.etf.pp1.symboltable.*;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.visitors.*;
import java.util.Collection;
import rs.ac.bg.etf.pp1.sv110059.util.*;
import rs.etf.pp1.mj.runtime.*;
import java.util.Stack;
import java.util.ArrayList;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 02 21:42:52 CET 2015
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\062\002\000\002\002\011\000\002\002" +
    "\004\000\002\046\003\000\002\021\004\000\002\021\002" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\023\006\000\002\023\005\000\002\025\005\000\002" +
    "\025\004\000\002\025\007\000\002\050\003\000\002\060" +
    "\003\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\007\005\000\002\007\005\000\002\005\005\000" +
    "\002\005\005\000\002\026\003\000\002\026\002\000\002" +
    "\010\005\000\002\010\003\000\002\010\005\000\002\024" +
    "\005\000\002\024\003\000\002\012\003\000\002\012\005" +
    "\000\002\053\003\000\002\063\002\000\002\027\012\000" +
    "\002\061\004\000\002\061\003\000\002\061\002\000\002" +
    "\003\004\000\002\003\002\000\002\030\005\000\002\030" +
    "\002\000\002\004\004\000\002\004\002\000\002\064\002" +
    "\000\002\065\002\000\002\006\015\000\002\054\003\000" +
    "\002\054\003\000\002\032\003\000\002\032\002\000\002" +
    "\011\005\000\002\011\003\000\002\031\004\000\002\031" +
    "\006\000\002\031\003\000\002\013\004\000\002\013\002" +
    "\000\002\014\003\000\002\014\003\000\002\017\006\000" +
    "\002\017\005\000\002\017\007\000\002\017\007\000\002" +
    "\017\006\000\002\017\006\000\002\017\005\000\002\017" +
    "\004\000\002\017\011\000\002\017\011\000\002\017\007" +
    "\000\002\017\007\000\002\017\004\000\002\017\007\000" +
    "\002\017\010\000\002\017\005\000\002\020\003\000\002" +
    "\035\004\000\002\035\002\000\002\042\003\000\002\042" +
    "\002\000\002\036\005\000\002\036\003\000\002\015\003" +
    "\000\002\034\005\000\002\034\003\000\002\037\005\000" +
    "\002\037\003\000\002\040\005\000\002\040\003\000\002" +
    "\056\004\000\002\056\005\000\002\045\003\000\002\045" +
    "\002\000\002\055\003\000\002\055\005\000\002\057\006" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\004\000\002" +
    "\057\007\000\002\057\005\000\002\033\003\000\002\033" +
    "\003\000\002\016\007\000\002\016\007\000\002\016\011" +
    "\000\002\016\011\000\002\016\007\000\002\016\007\000" +
    "\002\066\002\000\002\047\005\000\002\051\004\000\002" +
    "\051\002\000\002\052\004\000\002\052\005\000\002\052" +
    "\005\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\044\003\000\002\044\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\004\004\005\001\002\000\004\002\343\001" +
    "\002\000\004\054\006\001\002\000\012\005\ufffe\032\ufffe" +
    "\044\ufffe\054\ufffe\001\002\000\012\005\ufffc\032\ufffc\044" +
    "\ufffc\054\ufffc\001\002\000\012\005\013\032\021\044\020" +
    "\054\014\001\002\000\012\005\ufffd\032\ufffd\044\ufffd\054" +
    "\ufffd\001\002\000\006\003\332\054\062\001\002\000\010" +
    "\006\001\017\001\054\001\001\002\000\054\003\uffe1\005" +
    "\uffe1\007\uffe1\011\uffe1\012\uffe1\015\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\054\uffe1" +
    "\001\002\000\012\005\ufffa\032\ufffa\044\ufffa\054\ufffa\001" +
    "\002\000\012\005\ufff9\032\ufff9\044\ufff9\054\ufff9\001\002" +
    "\000\012\005\ufffb\032\ufffb\044\ufffb\054\ufffb\001\002\000" +
    "\004\054\044\001\002\000\006\003\023\054\014\001\002" +
    "\000\004\054\027\001\002\000\004\007\024\001\002\000" +
    "\012\005\ufff7\032\ufff7\044\ufff7\054\ufff7\001\002\000\006" +
    "\007\040\012\037\001\002\000\006\003\030\016\031\001" +
    "\002\000\006\003\ufff3\016\ufff3\001\002\000\006\007\ufff5" +
    "\012\ufff5\001\002\000\012\045\035\046\033\053\032\055" +
    "\036\001\002\000\006\007\ufff2\012\ufff2\001\002\000\006" +
    "\007\uffef\012\uffef\001\002\000\006\007\ufff6\012\ufff6\001" +
    "\002\000\006\007\ufff0\012\ufff0\001\002\000\006\007\ufff1" +
    "\012\ufff1\001\002\000\004\054\027\001\002\000\012\005" +
    "\ufff8\032\ufff8\044\ufff8\054\ufff8\001\002\000\004\016\042" +
    "\001\002\000\012\045\035\046\033\053\032\055\036\001" +
    "\002\000\006\007\ufff4\012\ufff4\001\002\000\010\003\047" +
    "\005\uffdc\056\046\001\002\000\004\005\051\001\002\000" +
    "\004\054\014\001\002\000\004\005\uffdd\001\002\000\004" +
    "\005\uffde\001\002\000\010\005\uffe0\006\uffe0\054\uffe0\001" +
    "\002\000\010\005\uffda\006\uffda\054\uffda\001\002\000\010" +
    "\005\054\006\uffd8\054\014\001\002\000\010\006\uffd6\017" +
    "\uffd6\054\uffd6\001\002\000\006\003\061\054\062\001\002" +
    "\000\010\005\uffdb\006\uffdb\054\uffdb\001\002\000\004\006" +
    "\060\001\002\000\012\005\uffdf\032\uffdf\044\uffdf\054\uffdf" +
    "\001\002\000\012\005\uffe9\006\uffe9\007\072\054\uffe9\001" +
    "\002\000\010\007\uffe3\012\uffe3\034\070\001\002\000\006" +
    "\007\uffe4\012\uffe4\001\002\000\006\007\066\012\065\001" +
    "\002\000\004\054\062\001\002\000\010\005\uffec\006\uffec" +
    "\054\uffec\001\002\000\006\007\uffe5\012\uffe5\001\002\000" +
    "\004\035\071\001\002\000\006\007\uffe2\012\uffe2\001\002" +
    "\000\010\005\uffea\006\uffea\054\uffea\001\002\000\010\005" +
    "\uffeb\006\uffeb\054\uffeb\001\002\000\010\006\076\017\100" +
    "\054\014\001\002\000\004\054\uffd2\001\002\000\004\006" +
    "\uffd9\001\002\000\010\006\uffd7\017\uffd7\054\uffd7\001\002" +
    "\000\004\054\uffd1\001\002\000\004\054\102\001\002\000" +
    "\004\010\uffd5\001\002\000\004\010\104\001\002\000\010" +
    "\003\106\011\uffcf\054\014\001\002\000\004\054\324\001" +
    "\002\000\006\011\uffca\012\uffca\001\002\000\004\011\114" +
    "\001\002\000\006\011\uffd0\012\112\001\002\000\006\011" +
    "\uffcd\012\uffcd\001\002\000\006\003\106\054\014\001\002" +
    "\000\006\011\uffce\012\uffce\001\002\000\006\005\uffda\054" +
    "\uffda\001\002\000\006\005\116\054\014\001\002\000\024" +
    "\005\uffd4\006\uffd4\013\uffd4\014\uffd4\040\uffd4\043\uffd4\050" +
    "\uffd4\051\uffd4\054\uffd4\001\002\000\024\005\uffc8\006\uffc8" +
    "\013\uffc8\014\uffc8\040\uffc8\043\uffc8\050\uffc8\051\uffc8\054" +
    "\uffc8\001\002\000\024\005\123\006\135\013\132\014\134" +
    "\040\136\043\122\050\130\051\121\054\124\001\002\000" +
    "\004\010\320\001\002\000\004\010\uffb5\001\002\000\024" +
    "\005\uffc8\006\uffc8\013\uffc8\014\uffc8\040\uffc8\043\uffc8\050" +
    "\uffc8\051\uffc8\054\uffc8\001\002\000\060\007\uff90\010\uff90" +
    "\011\uff90\012\uff90\015\uff90\016\uff90\020\uff90\021\uff90\022" +
    "\uff90\023\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031\uff90" +
    "\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90\041\uff90\042" +
    "\uff90\052\uff90\001\002\000\024\005\uffc6\006\uffc6\013\uffc6" +
    "\014\uffc6\040\uffc6\043\uffc6\050\uffc6\051\uffc6\054\uffc6\001" +
    "\002\000\012\010\267\016\265\041\264\042\266\001\002" +
    "\000\004\010\252\001\002\000\004\010\214\001\002\000" +
    "\024\005\uffc9\006\uffc9\013\uffc9\014\uffc9\040\uffc9\043\uffc9" +
    "\050\uffc9\051\uffc9\054\uffc9\001\002\000\004\010\205\001" +
    "\002\000\024\005\uffc7\006\uffc7\013\uffc7\014\uffc7\040\uffc7" +
    "\043\uffc7\050\uffc7\051\uffc7\054\uffc7\001\002\000\024\007" +
    "\141\010\uffa4\024\uffa4\027\142\045\uffa4\046\uffa4\053\uffa4" +
    "\054\uffa4\055\uffa4\001\002\000\010\006\uffd3\017\uffd3\054" +
    "\uffd3\001\002\000\004\007\137\001\002\000\026\005\uffb9" +
    "\006\uffb9\013\uffb9\014\uffb9\040\uffb9\043\uffb9\047\uffb9\050" +
    "\uffb9\051\uffb9\054\uffb9\001\002\000\010\007\204\015\157" +
    "\027\160\001\002\000\026\005\uffbe\006\uffbe\013\uffbe\014" +
    "\uffbe\040\uffbe\043\uffbe\047\uffbe\050\uffbe\051\uffbe\054\uffbe" +
    "\001\002\000\020\010\uffa5\024\uffa5\045\uffa5\046\uffa5\053" +
    "\uffa5\054\uffa5\055\uffa5\001\002\000\020\010\154\024\144" +
    "\045\150\046\153\053\146\054\124\055\147\001\002\000" +
    "\004\054\014\001\002\000\046\007\uffa0\010\170\011\uffa0" +
    "\012\uffa0\015\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\025" +
    "\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\033\uffa0\035\uffa0" +
    "\036\uffa0\037\uffa0\001\002\000\044\007\uff9f\011\uff9f\012" +
    "\uff9f\015\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\025\uff9f" +
    "\026\uff9f\027\uff9f\030\uff9f\031\uff9f\033\uff9f\035\uff9f\036" +
    "\uff9f\037\uff9f\001\002\000\044\007\uff9e\011\uff9e\012\uff9e" +
    "\015\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\025\uff9e\026" +
    "\uff9e\027\uff9e\030\uff9e\031\uff9e\033\uff9e\035\uff9e\036\uff9e" +
    "\037\uff9e\001\002\000\044\007\uff9d\011\uff9d\012\uff9d\015" +
    "\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\025\uff9d\026\uff9d" +
    "\027\uff9d\030\uff9d\031\uff9d\033\uff9d\035\uff9d\036\uff9d\037" +
    "\uff9d\001\002\000\044\007\uffa7\011\uffa7\012\uffa7\015\uffa7" +
    "\020\uffa7\021\uffa7\022\uffa7\023\uffa7\025\164\026\163\027" +
    "\uffa7\030\uffa7\031\uffa7\033\uffa7\035\uffa7\036\uffa7\037\166" +
    "\001\002\000\044\007\uffa3\011\uffa3\012\uffa3\015\uffa3\020" +
    "\uffa3\021\uffa3\022\uffa3\023\uffa3\025\uffa3\026\uffa3\027\uffa3" +
    "\030\uffa3\031\uffa3\033\uffa3\035\uffa3\036\uffa3\037\uffa3\001" +
    "\002\000\044\007\uff9c\011\uff9c\012\uff9c\015\uff9c\020\uff9c" +
    "\021\uff9c\022\uff9c\023\uff9c\025\uff9c\026\uff9c\027\uff9c\030" +
    "\uff9c\031\uff9c\033\uff9c\035\uff9c\036\uff9c\037\uff9c\001\002" +
    "\000\022\010\uffa4\024\uffa4\027\142\045\uffa4\046\uffa4\053" +
    "\uffa4\054\uffa4\055\uffa4\001\002\000\010\011\156\015\157" +
    "\027\160\001\002\000\044\007\uff99\011\uff99\012\uff99\015" +
    "\uff99\020\uff99\021\uff99\022\uff99\023\uff99\025\uff99\026\uff99" +
    "\027\uff99\030\uff99\031\uff99\033\uff99\035\uff99\036\uff99\037" +
    "\uff99\001\002\000\020\010\uff83\024\uff83\045\uff83\046\uff83" +
    "\053\uff83\054\uff83\055\uff83\001\002\000\020\010\uff82\024" +
    "\uff82\045\uff82\046\uff82\053\uff82\054\uff82\055\uff82\001\002" +
    "\000\020\010\154\024\144\045\150\046\153\053\146\054" +
    "\124\055\147\001\002\000\044\007\uffa6\011\uffa6\012\uffa6" +
    "\015\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\025\164\026" +
    "\163\027\uffa6\030\uffa6\031\uffa6\033\uffa6\035\uffa6\036\uffa6" +
    "\037\166\001\002\000\020\010\uff7f\024\uff7f\045\uff7f\046" +
    "\uff7f\053\uff7f\054\uff7f\055\uff7f\001\002\000\020\010\uff80" +
    "\024\uff80\045\uff80\046\uff80\053\uff80\054\uff80\055\uff80\001" +
    "\002\000\020\010\154\024\144\045\150\046\153\053\146" +
    "\054\124\055\147\001\002\000\020\010\uff81\024\uff81\045" +
    "\uff81\046\uff81\053\uff81\054\uff81\055\uff81\001\002\000\044" +
    "\007\uffa2\011\uffa2\012\uffa2\015\uffa2\020\uffa2\021\uffa2\022" +
    "\uffa2\023\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2" +
    "\033\uffa2\035\uffa2\036\uffa2\037\uffa2\001\002\000\024\010" +
    "\uffa4\011\uffb1\024\uffa4\027\142\045\uffa4\046\uffa4\053\uffa4" +
    "\054\uffa4\055\uffa4\001\002\000\004\011\177\001\002\000" +
    "\006\011\uffb2\012\175\001\002\000\012\011\uffae\012\uffae" +
    "\015\157\027\160\001\002\000\006\011\uffaf\012\uffaf\001" +
    "\002\000\022\010\uffa4\024\uffa4\027\142\045\uffa4\046\uffa4" +
    "\053\uffa4\054\uffa4\055\uffa4\001\002\000\006\011\uffb0\012" +
    "\uffb0\001\002\000\044\007\uffa1\011\uffa1\012\uffa1\015\uffa1" +
    "\020\uffa1\021\uffa1\022\uffa1\023\uffa1\025\uffa1\026\uffa1\027" +
    "\uffa1\030\uffa1\031\uffa1\033\uffa1\035\uffa1\036\uffa1\037\uffa1" +
    "\001\002\000\046\007\uff9b\011\uff9b\012\uff9b\015\uff9b\020" +
    "\uff9b\021\uff9b\022\uff9b\023\uff9b\025\uff9b\026\uff9b\027\uff9b" +
    "\030\uff9b\031\uff9b\033\uff9b\034\201\035\uff9b\036\uff9b\037" +
    "\uff9b\001\002\000\022\010\uffa4\024\uffa4\027\142\045\uffa4" +
    "\046\uffa4\053\uffa4\054\uffa4\055\uffa4\001\002\000\010\015" +
    "\157\027\160\035\203\001\002\000\044\007\uff9a\011\uff9a" +
    "\012\uff9a\015\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\025" +
    "\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\033\uff9a\035\uff9a" +
    "\036\uff9a\037\uff9a\001\002\000\026\005\uffbf\006\uffbf\013" +
    "\uffbf\014\uffbf\040\uffbf\043\uffbf\047\uffbf\050\uffbf\051\uffbf" +
    "\054\uffbf\001\002\000\022\010\uffa4\024\uffa4\027\142\045" +
    "\uffa4\046\uffa4\053\uffa4\054\uffa4\055\uffa4\001\002\000\012" +
    "\011\uffb3\012\207\015\157\027\160\001\002\000\004\053" +
    "\213\001\002\000\004\011\211\001\002\000\004\007\212" +
    "\001\002\000\026\005\uffb7\006\uffb7\013\uffb7\014\uffb7\040" +
    "\uffb7\043\uffb7\047\uffb7\050\uffb7\051\uffb7\054\uffb7\001\002" +
    "\000\004\011\uffb4\001\002\000\024\003\216\010\uffa4\024" +
    "\uffa4\027\142\045\uffa4\046\uffa4\053\uffa4\054\uffa4\055\uffa4" +
    "\001\002\000\010\011\uffac\033\225\036\uffac\001\002\000" +
    "\004\011\244\001\002\000\030\011\uffa8\015\157\020\240" +
    "\021\234\022\242\023\235\027\160\030\241\031\236\033" +
    "\uffa8\036\uffa8\001\002\000\010\011\uffaa\033\uffaa\036\uffaa" +
    "\001\002\000\006\011\222\036\223\001\002\000\022\005" +
    "\123\013\132\014\134\040\136\043\122\050\130\051\121" +
    "\054\124\001\002\000\022\010\uffa4\024\uffa4\027\142\045" +
    "\uffa4\046\uffa4\053\uffa4\054\uffa4\055\uffa4\001\002\000\010" +
    "\011\uffad\033\225\036\uffad\001\002\000\022\010\uffa4\024" +
    "\uffa4\027\142\045\uffa4\046\uffa4\053\uffa4\054\uffa4\055\uffa4" +
    "\001\002\000\010\011\uffab\033\uffab\036\uffab\001\002\000" +
    "\024\005\uff96\006\uff96\013\uff96\014\uff96\040\uff96\043\uff96" +
    "\050\uff96\051\uff96\054\uff96\001\002\000\026\005\uffc7\006" +
    "\uffc7\013\uffc7\014\uffc7\040\uffc7\043\uffc7\047\231\050\uffc7" +
    "\051\uffc7\054\uffc7\001\002\000\022\005\123\013\132\014" +
    "\134\040\136\043\122\050\130\051\121\054\124\001\002" +
    "\000\024\005\uff94\006\uff94\013\uff94\014\uff94\040\uff94\043" +
    "\uff94\050\uff94\051\uff94\054\uff94\001\002\000\026\005\uffbd" +
    "\006\uffbd\013\uffbd\014\uffbd\040\uffbd\043\uffbd\047\uffbd\050" +
    "\uffbd\051\uffbd\054\uffbd\001\002\000\022\010\uff86\024\uff86" +
    "\027\uff86\045\uff86\046\uff86\053\uff86\054\uff86\055\uff86\001" +
    "\002\000\022\010\uff84\024\uff84\027\uff84\045\uff84\046\uff84" +
    "\053\uff84\054\uff84\055\uff84\001\002\000\022\010\uff89\024" +
    "\uff89\027\uff89\045\uff89\046\uff89\053\uff89\054\uff89\055\uff89" +
    "\001\002\000\022\010\uffa4\024\uffa4\027\142\045\uffa4\046" +
    "\uffa4\053\uffa4\054\uffa4\055\uffa4\001\002\000\022\010\uff87" +
    "\024\uff87\027\uff87\045\uff87\046\uff87\053\uff87\054\uff87\055" +
    "\uff87\001\002\000\022\010\uff88\024\uff88\027\uff88\045\uff88" +
    "\046\uff88\053\uff88\054\uff88\055\uff88\001\002\000\022\010" +
    "\uff85\024\uff85\027\uff85\045\uff85\046\uff85\053\uff85\054\uff85" +
    "\055\uff85\001\002\000\014\011\uffa9\015\157\027\160\033" +
    "\uffa9\036\uffa9\001\002\000\022\005\123\013\132\014\134" +
    "\040\136\043\122\050\130\051\121\054\124\001\002\000" +
    "\024\005\uff95\006\uff95\013\uff95\014\uff95\040\uff95\043\uff95" +
    "\050\uff95\051\uff95\054\uff95\001\002\000\026\005\uffc7\006" +
    "\uffc7\013\uffc7\014\uffc7\040\uffc7\043\uffc7\047\247\050\uffc7" +
    "\051\uffc7\054\uffc7\001\002\000\022\005\123\013\132\014" +
    "\134\040\136\043\122\050\130\051\121\054\124\001\002" +
    "\000\024\005\uff93\006\uff93\013\uff93\014\uff93\040\uff93\043" +
    "\uff93\050\uff93\051\uff93\054\uff93\001\002\000\026\005\uffbc" +
    "\006\uffbc\013\uffbc\014\uffbc\040\uffbc\043\uffbc\047\uffbc\050" +
    "\uffbc\051\uffbc\054\uffbc\001\002\000\024\003\253\010\uffa4" +
    "\024\uffa4\027\142\045\uffa4\046\uffa4\053\uffa4\054\uffa4\055" +
    "\uffa4\001\002\000\004\011\260\001\002\000\006\011\255" +
    "\036\223\001\002\000\022\005\123\013\132\014\134\040" +
    "\136\043\122\050\130\051\121\054\124\001\002\000\024" +
    "\005\uff92\006\uff92\013\uff92\014\uff92\040\uff92\043\uff92\050" +
    "\uff92\051\uff92\054\uff92\001\002\000\026\005\uffbb\006\uffbb" +
    "\013\uffbb\014\uffbb\040\uffbb\043\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\054\uffbb\001\002\000\022\005\123\013\132\014\134" +
    "\040\136\043\122\050\130\051\121\054\124\001\002\000" +
    "\024\005\uff91\006\uff91\013\uff91\014\uff91\040\uff91\043\uff91" +
    "\050\uff91\051\uff91\054\uff91\001\002\000\026\005\uffba\006" +
    "\uffba\013\uffba\014\uffba\040\uffba\043\uffba\047\uffba\050\uffba" +
    "\051\uffba\054\uffba\001\002\000\004\007\303\001\002\000" +
    "\004\007\uff98\001\002\000\024\003\277\010\uffa4\024\uffa4" +
    "\027\142\045\uffa4\046\uffa4\053\uffa4\054\uffa4\055\uffa4\001" +
    "\002\000\004\007\uff97\001\002\000\026\003\271\010\uffa4" +
    "\011\uffb1\024\uffa4\027\142\045\uffa4\046\uffa4\053\uffa4\054" +
    "\uffa4\055\uffa4\001\002\000\004\011\275\001\002\000\006" +
    "\007\273\011\272\001\002\000\004\007\274\001\002\000" +
    "\026\005\uffc1\006\uffc1\013\uffc1\014\uffc1\040\uffc1\043\uffc1" +
    "\047\uffc1\050\uffc1\051\uffc1\054\uffc1\001\002\000\026\005" +
    "\uffc2\006\uffc2\013\uffc2\014\uffc2\040\uffc2\043\uffc2\047\uffc2" +
    "\050\uffc2\051\uffc2\054\uffc2\001\002\000\004\007\276\001" +
    "\002\000\026\005\uffc3\006\uffc3\013\uffc3\014\uffc3\040\uffc3" +
    "\043\uffc3\047\uffc3\050\uffc3\051\uffc3\054\uffc3\001\002\000" +
    "\004\007\302\001\002\000\010\007\301\015\157\027\160" +
    "\001\002\000\026\005\uffc5\006\uffc5\013\uffc5\014\uffc5\040" +
    "\uffc5\043\uffc5\047\uffc5\050\uffc5\051\uffc5\054\uffc5\001\002" +
    "\000\026\005\uffc0\006\uffc0\013\uffc0\014\uffc0\040\uffc0\043" +
    "\uffc0\047\uffc0\050\uffc0\051\uffc0\054\uffc0\001\002\000\026" +
    "\005\uffc4\006\uffc4\013\uffc4\014\uffc4\040\uffc4\043\uffc4\047" +
    "\uffc4\050\uffc4\051\uffc4\054\uffc4\001\002\000\060\007\uff8d" +
    "\010\uff8d\011\uff8d\012\uff8d\015\uff8d\016\uff8d\020\uff8d\021" +
    "\uff8d\022\uff8d\023\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d" +
    "\031\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\041" +
    "\uff8d\042\uff8d\052\uff8d\001\002\000\060\007\uff8f\010\uff8f" +
    "\011\uff8f\012\uff8f\015\uff8f\016\uff8f\020\uff8f\021\uff8f\022" +
    "\uff8f\023\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f" +
    "\033\uff8f\034\306\035\uff8f\036\uff8f\037\uff8f\041\uff8f\042" +
    "\uff8f\052\310\001\002\000\024\003\312\010\uffa4\024\uffa4" +
    "\027\142\045\uffa4\046\uffa4\053\uffa4\054\uffa4\055\uffa4\001" +
    "\002\000\060\007\uff8e\010\uff8e\011\uff8e\012\uff8e\015\uff8e" +
    "\016\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\025\uff8e\026" +
    "\uff8e\027\uff8e\030\uff8e\031\uff8e\033\uff8e\034\uff8e\035\uff8e" +
    "\036\uff8e\037\uff8e\041\uff8e\042\uff8e\052\uff8e\001\002\000" +
    "\004\054\311\001\002\000\060\007\uff8c\010\uff8c\011\uff8c" +
    "\012\uff8c\015\uff8c\016\uff8c\020\uff8c\021\uff8c\022\uff8c\023" +
    "\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\033\uff8c" +
    "\034\uff8c\035\uff8c\036\uff8c\037\uff8c\041\uff8c\042\uff8c\052" +
    "\uff8c\001\002\000\004\035\315\001\002\000\010\015\157" +
    "\027\160\035\314\001\002\000\060\007\uff8b\010\uff8b\011" +
    "\uff8b\012\uff8b\015\uff8b\016\uff8b\020\uff8b\021\uff8b\022\uff8b" +
    "\023\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\033" +
    "\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\041\uff8b\042\uff8b" +
    "\052\uff8b\001\002\000\060\007\uff8a\010\uff8a\011\uff8a\012" +
    "\uff8a\015\uff8a\016\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a" +
    "\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\033\uff8a\034" +
    "\uff8a\035\uff8a\036\uff8a\037\uff8a\041\uff8a\042\uff8a\052\uff8a" +
    "\001\002\000\024\005\123\006\317\013\132\014\134\040" +
    "\136\043\122\050\130\051\121\054\124\001\002\000\026" +
    "\005\uffb6\006\uffb6\013\uffb6\014\uffb6\040\uffb6\043\uffb6\047" +
    "\uffb6\050\uffb6\051\uffb6\054\uffb6\001\002\000\004\054\124" +
    "\001\002\000\004\011\322\001\002\000\004\007\323\001" +
    "\002\000\026\005\uffb8\006\uffb8\013\uffb8\014\uffb8\040\uffb8" +
    "\043\uffb8\047\uffb8\050\uffb8\051\uffb8\054\uffb8\001\002\000" +
    "\010\011\uffcc\012\uffcc\034\325\001\002\000\004\035\326" +
    "\001\002\000\006\011\uffcb\012\uffcb\001\002\000\010\006" +
    "\uffd6\017\uffd6\054\uffd6\001\002\000\010\006\331\017\100" +
    "\054\014\001\002\000\004\002\000\001\002\000\006\007" +
    "\341\012\340\001\002\000\006\007\336\012\335\001\002" +
    "\000\006\007\uffe7\012\uffe7\001\002\000\004\054\062\001" +
    "\002\000\012\005\uffee\032\uffee\044\uffee\054\uffee\001\002" +
    "\000\006\007\uffe8\012\uffe8\001\002\000\004\054\062\001" +
    "\002\000\012\005\uffed\032\uffed\044\uffed\054\uffed\001\002" +
    "\000\006\007\uffe6\012\uffe6\001\002\000\004\002\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\046\006\001\001\000\002\001\001\000\004\021\007" +
    "\001\001\000\014\007\014\022\010\023\016\027\015\053" +
    "\011\001\001\000\002\001\001\000\006\010\332\012\333" +
    "\001\001\000\004\062\326\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\021\001\001\000\006\025\024\050" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\060\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\042\001\001\000\002\001\001\000" +
    "\004\061\044\001\001\000\002\001\001\000\004\053\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\051\001\001\000\004\003\052\001\001\000\010\005\055" +
    "\030\056\053\054\001\001\000\004\004\073\001\001\000" +
    "\006\012\062\024\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\076\053\074\054\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\064\102\001\001\000" +
    "\002\001\001\000\012\011\107\031\110\032\106\053\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\112" +
    "\053\104\001\001\000\002\001\001\000\004\003\114\001" +
    "\001\000\006\005\055\053\054\001\001\000\004\065\116" +
    "\001\001\000\004\013\117\001\001\000\014\014\130\016" +
    "\124\017\132\020\126\047\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\315\001\001\000\004\066" +
    "\303\001\001\000\002\001\001\000\004\033\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\045\142\056\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\047\144\055\150\057\151\001\001\000" +
    "\004\053\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\045\142" +
    "\056\154\001\001\000\004\044\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\047\144" +
    "\055\161\057\151\001\001\000\004\041\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\047\144\057\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\015" +
    "\173\036\171\042\170\045\142\056\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\160\001\001\000" +
    "\002\001\001\000\010\015\175\045\142\056\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\045\142\056\201\001\001\000\004\044\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\045\142\056" +
    "\205\001\001\000\006\035\207\044\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\034\220\037\214\040\217" +
    "\045\142\056\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\043\236\044\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\014\226\016\124\017\227\020" +
    "\126\047\125\001\001\000\012\037\223\040\217\045\142" +
    "\056\216\001\001\000\002\001\001\000\010\040\225\045" +
    "\142\056\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\016\231\017\232\020\126\047" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\045" +
    "\142\056\242\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\160\001\001\000\014\014" +
    "\244\016\124\017\245\020\126\047\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\247\017\250\020" +
    "\126\047\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\034\253\037\214\040\217\045\142\056\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\255" +
    "\017\256\020\126\047\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\260\017\261\020\126\047\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\045\142\056\277\001\001" +
    "\000\002\001\001\000\014\015\173\036\171\042\267\045" +
    "\142\056\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\304\001\001\000\004\052\306" +
    "\001\001\000\006\045\142\056\312\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\130\016\124\017\132\020\126\047\125" +
    "\001\001\000\002\001\001\000\004\047\320\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\327\001\001\000\010\006\076\053\074\054\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\336\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\341\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	Tab.init();
	System.out.println("==================SEMANTICKA OBRADA====================");
	Struct boolType = new Struct(Struct.Bool);
    Tab.insert(Obj.Type, "bool", boolType);
    Struct stringType = new Struct(Struct.Array, Tab.charType);
    Tab.insert(Obj.Type, "string", stringType);
	Obj o = Tab.find("len");
	o.setFpPos(1);
	o = Tab.find("chr");
	o.setFpPos(1);
	o = Tab.find("ord");
	o.setFpPos(1);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	return s;

    }


	//promenljive za brojanje pojavljivanja odredjenih elemenata
	
	int globalCharVarCount = 0; //R40
	int globalArrayCount = 0; //R41
	int funcCount = 0; //R42
	int classCount = 0; //R43
	int statementBlocks = 0; //R44
	int funcCallsInMain = 0; //R45
	int newStatementCount = 0; //R46
	int classMethodCount = 0; //R47
	int classFieldCount = 0; //R48
	int classDerivationCount = 0; //R49

    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
    boolean greska;
     
   public void report_fatal_error(String message, Object   info) throws java.lang.Exception {
   	  greska=true;
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info)
    {
      greska=true;
      //Code.greska = true;
      System.err.print(message);
      System.err.flush();
      if (info instanceof Symbol)
          System.err.println(" na liniji " + ((Symbol)info).left);
      else System.err.println("");
    }
    
    public void report_info(String message, Object info)
    {
      System.out.print(message);
      System.out.flush();
      if (info instanceof Symbol)
          System.out.println(" na liniji " + ((Symbol)info).left);
      else System.out.println("");
    }
   
   	MyVisitor dstv = new MyVisitor();
   	
   	public void report_error(String symName, int line, String msg) {
   	  greska=true;
   	  //Code.greska = true;
      System.err.print("Greska na "+line+"("+symName+"), "+msg);
      System.err.flush();
      System.err.println("");
   	}
   	
    public void report_info(String symName, int line, Obj obj) {
    	  dstv.visitObjNode(obj);
    	  System.out.print("Pretraga na "+line+"("+symName+"), nadjeno "+dstv.getOutput());
    	  dstv.flush();
	      System.out.flush();
	      System.out.println("");
    }
    
    
    public void printCounts() {
    	System.out.println("Broj elemenata: ");
    	System.out.println("Deklaracije globalnih promenljivih tipa char - " + globalCharVarCount);
    	System.out.println("Deklaracije globalnih nizova - " + globalArrayCount);
    	System.out.println("Definicije funkcija u glavnom programu - " + funcCount);
    	System.out.println("Definicije unutrasnjih klasa - " + classCount);
    	System.out.println("Blokovi naredbi - " + statementBlocks);
    	System.out.println("Pozivi funkcija u telu metode main - "+funcCallsInMain);
    	System.out.println("Naredbe stvaranja objekta - " + newStatementCount);
    	System.out.println("Definicije metoda unutrasnjih klasa - " + classMethodCount);
    	System.out.println("Definicije polja unutrasnjih klasa - " + classFieldCount);
    	System.out.println("Izvodjenja klasa - " + classDerivationCount);
    }
    
    public static void main(String args[]) throws Exception {
        FileReader r = new FileReader(args[0]);
        Yylex skener = new Yylex(r);
        MJParser p = new MJParser(skener);
        //Symbol s = p.debug_parse();  //pocetak parsiranja
        Symbol s = p.parse();
       
        if (p.greska || !Code.greska) {
        	 Tab.dump();
        	System.out.println("Ulazni program ima gresaka!");
        }
        else {
        	File objFile = new File("test/program.obj");
        	if (objFile.exists())
        		objFile.delete();
        	Code.write(new FileOutputStream(objFile));
        	System.out.println("==================SINTAKSNA ANALIZA====================");
        	p.printCounts();
        	Tab.dump();
        	System.out.println("Parsiranje uspesno zavrseno!");
        }
        
    }

    String getTypeName(Struct t) {
    	StringBuilder output = new StringBuilder();
    	switch (t.getKind()) {
		case Struct.None:
			output.append("notype");
			break;
		case Struct.Int:
			output.append("int");
			break;
		case Struct.Char:
			output.append("char");
			break;
		case Struct.Array:
			output.append("Arr of ");
			
			switch (t.getElemType().getKind()) {
			case Struct.None:
				output.append("notype");
				break;
			case Struct.Int:
				output.append("int");
				break;
			case Struct.Char:
				output.append("char");
				break;
			case Struct.Class:
				output.append("Class");
				break;
			}
			break;
		case Struct.Class:
			output.append("Class");
			break;
		}
		return output.toString();
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {



	boolean global = true;
	boolean classDef = false;
	boolean isMain = false;
	boolean methodDef = false;
	Struct var_type=Tab.noType;
	Obj currentMethod = null;
	boolean returnFound = false;
	int currentLevel = -1;
	boolean isVoid=false;
	Obj curr_ident = null;
	boolean designatorIsArrElem = false;
	boolean insideWhile = false;
	Obj currentDesignator = null;
	Obj functionDesignator = null;
	int numOfActPars = 0;
	int currentMethodParams = 0;
	boolean lockFunctionDesignator = false;
	Obj previosDesignator = null;
	Obj currentClass = null;
	boolean designatorInExpr = false;
	Stack<Obj> designatorStack = new Stack<Obj>();
	Stack<Boolean> designatorInExprStack = new Stack<Boolean>();
	void redefineMethod() {
		currentMethod.getLocalSymbols().clear();
	}

	List<Byte> MethodTable = new ArrayList<Byte>(); 
	void addWordToStaticData (int value, int address){ 
	  MethodTable.add(new Byte((byte)Code.const_)); 
	  MethodTable.add(new Byte( (byte)( (value>>16)>>8 ) ) ); 
	  MethodTable.add(new Byte((byte)(value>>16))); 
	  MethodTable.add(new Byte((byte)(value>>8))); 
	  MethodTable.add(new Byte((byte)value)); 
	  MethodTable.add(new Byte((byte)Code.putstatic)); 
	  MethodTable.add(new Byte((byte)(address>>8))); 
	  MethodTable.add(new Byte((byte)address)); 
	 } 
	 void addNameTerminator() { 
	  addWordToStaticData(-1, Code.dataSize++); 
	 } 
	 void addTableTerminator() { 
	  addWordToStaticData(-2, Code.dataSize++); 
	 } 
	 void addFunctionAddress(int functionAddress) { 
	  addWordToStaticData(functionAddress, Code.dataSize++); 
	 } 
 	void addFunctionEntry(String name, int functionAddressInCodeBuffer) { 
	  for (int j=0; j<name.length(); j++)  { 
	   addWordToStaticData((int)(name.charAt(j)), Code.dataSize++);  
	  } 
	  addNameTerminator();   addFunctionAddress(functionAddressInCodeBuffer); 
 	} 

 	void resetDesignatorInExprCond() {
 		if (!designatorInExprStack.empty()) {
 			designatorInExpr = designatorInExprStack.pop();
 		}
 		else
 			designatorInExpr = false;
 	}
 	void setDesignatorInExprCond() {
 		designatorInExprStack.push(designatorInExpr);
 	}


  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Mulop ::= MOD 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Mulop ::= DIV 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Mulop ::= TIMES 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Addop ::= MINUS 
            {
              Integer RESULT =null;
		
   			 RESULT = 1;
   		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Addop ::= PLUS 
            {
              Integer RESULT =null;
		
   			 RESULT = 0;
   		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Relop ::= LTE 
            {
              Integer RESULT =null;
		
   			 RESULT = 5;
   		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Relop ::= LT 
            {
              Integer RESULT =null;
		
   			 RESULT = 4;
   		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Relop ::= GTE 
            {
              Integer RESULT =null;
		
   			 RESULT = 3;
   		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Relop ::= GT 
            {
              Integer RESULT =null;
		
   			 RESULT = 2;
   		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Relop ::= NOT_EQUAL 
            {
              Integer RESULT =null;
		
   			 RESULT = 1;
   		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Relop ::= IS_EQUAL 
            {
              Integer RESULT =null;
		
   			 RESULT = 0;
   		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // IdentRef ::= LSQUARE error RSQUARE 
            {
              Obj RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
				designatorIsArrElem = true;
				parser.report_error("Izvrsen oporavak do ] u liniji "+lleft+" pri indeksiranju niza.",null);
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentRef",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // IdentRef ::= LSQUARE Expr RSQUARE 
            {
              Obj RESULT =null;
		int dummyleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dummyright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object dummy = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				 // generisanje koda 
				 if (e != Tab.intType) {
				 	parser.report_error("Greska u liniji "+eleft+": indeks niza mora biti tipa int", null);
				 }
                 Code.load(currentDesignator);

                Obj temp = null;
				if (designatorInExpr) {
					temp = designatorStack.pop();
					curr_ident = designatorStack.peek();
					designatorStack.push(temp);
				}
				else {
					curr_ident = designatorStack.peek();
				}
                 // dalje prenosimo element niza
                // curr_ident = designatorInExpr ? previosDesignator : currentDesignator;
                Struct s = curr_ident.getType().getElemType();
                if (s==null) {
                	s = Tab.noType;
                }
                 RESULT=new Obj(Obj.Elem, "", s);
				 designatorIsArrElem = true;
				if (designatorInExpr) {
					designatorStack.pop();
					//designatorInExpr = false;
					resetDesignatorInExprCond();
				}
				 if (curr_ident.getType().getKind()!=Struct.Array) 
                              parser.report_error("Semanticka greska u liniji "+dummyleft+": Ocekivan niz na mestu identifikatora "+curr_ident.getName(),null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentRef",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // IdentRef ::= DOT IDENT 
            {
              Obj RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if (curr_ident.getType().getKind() == Struct.Class) {
					Obj obj = Tab.noObj;
					Collection<Obj> polja = curr_ident.getType().getMembers();
   					boolean pronasao = false;
   					for(Obj polje: polja){
   						if(ident.equals(polje.getName())){
   							pronasao = true;
   							obj = polje;
   							break;
   						}
   					}
   					if (curr_ident.getName().equals("this") && classDef) {
						obj = Tab.find(ident);
						pronasao = obj != Tab.noObj;
					}
   					if(!pronasao){
   						parser.report_error(curr_ident.getName(), identleft, "pogresni tipovi u izrazu IDENT[.IDENT]");
   					}
   					else {
						previosDesignator = currentDesignator;
						currentDesignator = obj;
						//if (designatorInExpr) {
							designatorStack.pop();
							//resetDesignatorInExprCond();
						//}
						designatorStack.push(obj);
						if (obj == Tab.noObj) {
							parser.report_error("Semanticka greska na liniji "+identleft+": ime "+ident+" nije deklarisano.", null);
						}
						RESULT = obj;
						curr_ident = obj;
						designatorIsArrElem = false;
					}
				}
				else {
					parser.report_error("Semanticka greska u liniji "+identleft+": "+curr_ident.getName()+" mora biti promenljiva klasnog tipa.",null);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentRef",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // IdentList ::= 
            {
              Obj RESULT =null;
		 RESULT = Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // IdentList ::= IdentList IdentRef 
            {
              Obj RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj il = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int irleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int irright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj ir = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
	if (ir != null)
		RESULT = ir;
	else
		RESULT = il;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Designator ::= IDENT NT$4 IdentList 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj il = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (il != Tab.noObj) {
		RESULT = il;
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$4 ::= 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
	
	previosDesignator = currentDesignator;

	Obj obj = currentDesignator = Tab.find(name);
	
	if (obj == Tab.noObj) {
		parser.report_error(name, nameleft, "nije deklarisano");
	}
	else
		parser.report_info(name, nameleft, obj);
	designatorStack.push(obj);
	RESULT = obj;
	curr_ident = obj;
	designatorIsArrElem = false;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Unmatched ::= WhileLoop LPAREN error RPAREN Unmatched 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 insideWhile = false; parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" unutar izraza u while konstrukciji.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Unmatched ::= WhileLoop LPAREN Condition RPAREN Unmatched 
            {
              Object RESULT =null;
		 insideWhile = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Unmatched ::= IF LPAREN error RPAREN Matched ELSE Unmatched 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 parser.report_error("Izvrsen oporavak do ) u liniji "+lleft+" unutar izraza u if konstrukciji.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Unmatched ::= IF LPAREN Condition RPAREN Matched ELSE Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Unmatched ::= IF LPAREN error RPAREN Statement 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.report_error("Izvrsen oporavak do ) u liniji "+lleft+" unutar izraza u if konstrukciji.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Unmatched ::= IF LPAREN Condition RPAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DesignatorsFollowUp ::= DEC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorsFollowUp",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DesignatorsFollowUp ::= INC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorsFollowUp",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Factor ::= LPAREN Expr RPAREN 
            {
              Struct RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
				RESULT = e;
				if (designatorInExpr) {
					designatorStack.pop();
					//designatorInExpr = false;
					resetDesignatorInExprCond();
				}
				setDesignatorInExprCond();
                designatorInExpr = false; 
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Factor ::= NEW Type LSQUARE Expr RSQUARE 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if (e.getKind() != Struct.Int) {
					parser.report_error(parser.getTypeName(e), eleft, "nevalidan tip expr u operatoru NEW[expr]");
				}
				Code.put(Code.newarray);
                if ( t == Tab.charType ) 
                	Code.put(0); 
                else 
                	Code.put(1);
                RESULT=new Struct(Struct.Array, t);
               if (designatorInExpr) {
					designatorStack.pop();
					//designatorInExpr = false;
					resetDesignatorInExprCond();
				}
				setDesignatorInExprCond();
                designatorInExpr = false; 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Factor ::= NEW Type 
            {
              Struct RESULT =null;
		int tip1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tip1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct tip1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				parser.newStatementCount++;
	   			 if (tip1.getKind() != Struct.Class){
	   				 parser.report_error(parser.getTypeName(tip1), tip1left, "nevalidan tip u operatoru NEW");
	   			 }
	   			 RESULT = tip1; setDesignatorInExprCond();
                designatorInExpr = false; 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Factor ::= STRCONST 
            {
              Struct RESULT =null;
		 RESULT = Tab.find("string").getType(); setDesignatorInExprCond();
                designatorInExpr = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Factor ::= BOOLCONST 
            {
              Struct RESULT =null;
		 RESULT = Tab.find("bool").getType(); setDesignatorInExprCond();
                designatorInExpr = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Factor ::= CHARCONST 
            {
              Struct RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				RESULT = Tab.charType;
				Obj o = new Obj(Obj.Con, "", Tab.charType);
                o.setAdr(c.charValue()); 
                Code.load(o);
                setDesignatorInExprCond();
                designatorInExpr = false; 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Factor ::= NUMBER 
            {
              Struct RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				
				/*Obj temp = Tab.find(""+i.intValue());
				if (temp == Tab.noObj) {
					Obj c = Tab.insert(Obj.Con, ""+i.intValue(), Tab.intType);
					c.setAdr(i.intValue());
					Code.load(c);
				}
				else {
					Code.load(temp);
				}*/
				Obj c = new Obj(Obj.Con, "", Tab.intType);
                c.setAdr(i.intValue()); 
                Code.load(c); 
				RESULT = Tab.intType;
				setDesignatorInExprCond();
                designatorInExpr = false; 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Factor ::= Designator 
            {
              Struct RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = d.getType(); Code.load(d); //designatorInExpr = true;
		   	setDesignatorInExprCond();
		   	designatorInExpr = true;
		   	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Factor ::= Designator LPAREN ActParams RPAREN 
            {
              Struct RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
	if (Obj.Meth == func.getKind()) {
		parser.report_info("Pronadjen poziv funkcije "+func.getName()+" na liniji "+funcleft, null);
		RESULT = func.getType();
	}
	else {
		parser.report_error("Semanticka greska na liniji "+funcleft+": ime "+func.getName()+" nije funkcija.", null);
		RESULT = Tab.noType;
	}
	lockFunctionDesignator = false;
	if (isMain) {
		parser.funcCallsInMain++;
	}
	if (func.getType() == Tab.noType) {
		parser.report_error(func.getName(), funcleft, "ne moze se koristiti u izrazima jer nema povratnu vrednost");
	}
	int destAdr = func.getAdr() - Code.pc;
	Code.put(Code.call);
	Code.put2(destAdr);
	setDesignatorInExprCond();
	designatorInExpr = true;
	//designatorInExpr = true;
	numOfActPars = 0;
	functionDesignator = null;


              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Term ::= Term Mulop Factor 
            {
              Struct RESULT =null;
		int tip1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tip1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct tip1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int tip2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tip2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct tip2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
   		 if( tip1.getKind() != Struct.Int || tip2.getKind() != Struct.Int ){
   			parser.report_error(parser.getTypeName(tip1), tip1left, "pogresni tipovi u operaciji, dozvoljeno je koristiti samo operande tipa int");
   		 }
   		 RESULT = tip1;
   	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Term ::= Factor 
            {
              Struct RESULT =null;
		int tip1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tip1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct tip1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
   		 RESULT = tip1;
 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Sign ::= 
            {
              Integer RESULT =null;
		
   			 RESULT = 1;
   		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Sign",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Sign ::= MINUS 
            {
              Integer RESULT =null;
		
   			 RESULT = 0;
   		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Sign",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr Addop Term 
            {
              Struct RESULT =null;
		int tip1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tip1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct tip1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int znakleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int znakright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer znak = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tip2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tip2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct tip2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		if (znak == 0){
   			 if( (tip1.getKind() == Struct.Int && tip2.getKind() == Struct.Int) || (tip1 == Tab.find("string").getType() && tip2 == Tab.find("string").getType() ) ){
   			 }
   			 else{
   				 parser.report_error(parser.getTypeName(tip1), tip1left, "pogresni tipovi u operaciji sabiranja");
   			 }
   		 }
   		 else{
   			 if( tip1.getKind() != Struct.Int || tip2.getKind() != Struct.Int ){
   				 parser.report_error(parser.getTypeName(tip1), tip1left, "pogresni tipovi u operaciji oduzimanja");
   			 }
   		 }
   		 RESULT = tip1;


              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Sign Term 
            {
              Struct RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer minus = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tip1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tip1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct tip1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		  
		 if (minus == 0){
   	     	 if (tip1.getKind() != Struct.Int){
   	     		 parser.report_error(parser.getTypeName(tip1), tip1left, "pogresan tip pri operaciji negacije");
   	     	 }
   	      }
   	      RESULT = tip1;


              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CondFact ::= Expr 
            {
              Object RESULT =null;
		 
					if (designatorInExpr) {
						designatorStack.pop();
						//designatorInExpr = false;
						resetDesignatorInExprCond();
					} 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;
		int tip1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tip1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct tip1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int uporedileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int uporediright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer uporedi = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tip2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tip2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct tip2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
   			 if (!tip1.assignableTo(tip2)){
   				 parser.report_error(parser.getTypeName(tip1), tip1left, "nekompatiblini tipovi");
   			 }
   			 else{
   				 if (tip1.getKind() == Struct.Array || tip2.getKind() == Struct.Class){
   					 if (uporedi > 1){
   						 parser.report_error(parser.getTypeName(tip1), tip1left, "uz promenljiva tipa klase ili niza se mogu koristiti samo != i ==");
   					 }
   				 }
   			 }
   			if (designatorInExpr) {
				designatorStack.pop();
				//designatorInExpr = false;
				resetDesignatorInExprCond();
			}
   		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CondTerm ::= CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CondTerm ::= CondTerm AND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Condition ::= CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Condition ::= Condition OR CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ActPar ::= Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		

	//if (!lockFunctionDesignator) {
		//lockFunctionDesignator = true;
		Obj temp = null;
		if (designatorInExpr) {
			temp = designatorStack.pop();
			functionDesignator = designatorStack.peek();
			designatorStack.push(temp);
		}
		else {
			functionDesignator = designatorStack.peek();
		}
	//}

	Obj obj = null;
	
	int numOfFormPars = functionDesignator.getFpPos();
	int i=0;
	Collection<Obj> col = functionDesignator.getLocalSymbols();
	for (Obj o: col) {
		if (i<numOfActPars) {
			i++;
			continue;
		}
		if (o.getName().equals("this")) {
				numOfActPars++;
		}
		if (i==numOfActPars) {
			obj = o;
			break;
		}
		i++;
	}
	if (numOfActPars >= numOfFormPars) {
		parser.report_error("Greska na liniji "+eleft+" vise stvarnih od formalnih parametara", null);
	}
	else if (!e.assignableTo(obj.getType())) {
	    parser.report_error(obj.getName(), eleft, "nekompatibilni tipovi stvarnih sa formalnim parametrima");
	}
	else {
    	parser.report_info(obj.getName(), eleft, obj);
	}
	numOfActPars++;
	if (designatorInExpr) {
		designatorStack.pop();
		//designatorInExpr = false;
		resetDesignatorInExprCond();
	}
	Code.put(Code.pop); //TODO: //stvarni parametri nisu implementirani, pa da ne ostanu na steku

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPar",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ActPars ::= ActPar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ActPars ::= ActPars COMMA ActPar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ActParams ::= 
            {
              Object RESULT =null;
		
		
		int numOfFormPars;
		boolean containsThis = false;
		Obj func = designatorStack.peek();
		if (functionDesignator==null) {
			numOfFormPars = func.getFpPos();
			Collection<Obj> col = func.getLocalSymbols();
			for (Obj o: col) {
				if (o.getName().equals("this")) {
					containsThis = true;;
				}
			}
		}
		else {
			numOfFormPars = functionDesignator.getFpPos();
			System.err.println("Greska? TODO");
		}
		if (0 != numOfFormPars && !(containsThis && numOfFormPars==1)) {
			parser.report_error("Greska : netacan broj stvarnih parametara u pozivu funkcije", null);
		}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParams",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ActParams ::= ActPars 
            {
              Object RESULT =null;
		int dummyleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int dummyright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object dummy = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		int numOfFormPars = functionDesignator.getFpPos();
		if (numOfFormPars != numOfActPars) {
			parser.report_error("Greska : netacan broj stvarnih parametara u pozivu funkcije u liniji "+dummyleft, null);
		}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParams",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OptNumbers ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptNumbers",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OptNumbers ::= COMMA NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptNumbers",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // WhileLoop ::= WHILE 
            {
              Object RESULT =null;
		
	insideWhile = true;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("WhileLoop",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Matched ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
		
						parser.statementBlocks++;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Matched ::= PRINT LPAREN Expr OptNumbers RPAREN SEMI 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct dest = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
	if (dest != Tab.intType && dest != Tab.charType && dest != Tab.find("bool").getType() && dest != Tab.find("string").getType()) {
		parser.report_error("Greska na liniji "+destleft+": u pozivu read(Expr, [, number]) expr mora biti tipa int, char, bool ili string", null);
	}
	if (dest == Tab.intType) {
		Code.loadConst(5);
		Code.put(Code.print);
	}
	if (dest == Tab.charType) {
		Code.loadConst(1);
		Code.put(Code.bprint);
	}
	if (designatorInExpr) {
		designatorStack.pop();
		//designatorInExpr = false;
		resetDesignatorInExprCond();
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Matched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
	if (dest.getType() != Tab.intType && dest.getType() != Tab.charType && dest.getType() != Tab.find("bool").getType() && dest.getType() != Tab.find("string").getType()) {
		parser.report_error(dest.getName(), destleft, "u pozivu read(Designator) designator mora biti tipa int, char, bool ili string");
	}
	if (dest.getKind() != Obj.Var && dest.getKind() != Obj.Fld && dest.getKind() != Obj.Elem) {
		parser.report_error(parser.getTypeName(dest.getType()), destleft, "designator mora biti promenljiva, element niza ili polje unutar objekta");
	}
	/*if (dest.getType().getKind()==Struct.Array && !designatorIsArrElem) {
		parser.report_error(parser.getTypeName(dest.getType()), destleft, "designator mora biti promenljiva, element niza ili polje unutar objekta");
	}*/

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Matched ::= BREAK SEMI 
            {
              Object RESULT =null;
		int dummyleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int dummyright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object dummy = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					if (!insideWhile) {
						parser.report_error("break", dummyleft, "moze se koristiti samo u while petlji");
					}
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Matched ::= WhileLoop LPAREN error RPAREN Matched 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 insideWhile = false; parser.report_error("Izvrsen oporavak do ) u liniji "+lleft+" unutar izraza u while konstrukciji.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Matched ::= WhileLoop LPAREN Condition RPAREN Matched 
            {
              Object RESULT =null;
		 insideWhile = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Matched ::= IF LPAREN error RPAREN Matched ELSE Matched 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 parser.report_error("Izvrsen oporavak do ) u liniji "+lleft+" unutar izraza u if konstrukciji.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Matched ::= IF LPAREN Condition RPAREN Matched ELSE Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Matched ::= RETURN SEMI 
            {
              Object RESULT =null;
		int dummyleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int dummyright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object dummy = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					returnFound = true;
					if (!isVoid) {
						parser.report_error("Semnaticka greska u liniji "+dummyleft+": nedostaje return iskaz.", null);
					}
					isVoid = false;
					// generisanje koda
	              	Code.put(Code.exit);
	                Code.put(Code.return_);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Matched ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					returnFound = true;
					Struct currMethType = currentMethod.getType();
					if (!currMethType.compatibleWith(t)) {
						parser.report_error("Semanticka greska na liniji "+tleft+": tip izraza u return naredbi se ne slaze sa tipom povratne vrednosti funkcije "+currentMethod.getName(),null);
					}
					if (isVoid) {
						parser.report_error("Semanticka greska na liniji "+tleft+": metod ne sme imati return sa izrazom jer je deklarisan sa void",null);
					}
					isVoid = false;
					// generisanje koda
	                Code.put(Code.exit);
	                Code.put(Code.return_);
	              if (designatorInExpr) {
					designatorStack.pop();
					//designatorInExpr = false;
					resetDesignatorInExprCond();
				}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Matched ::= Designator EQUAL error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri iskazu dodele vrednosti.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Matched ::= Designator LPAREN error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri pozivu funkcije.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Matched ::= Designator LPAREN error RPAREN SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri zadavanju liste parametara u pozivu funkcije",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Matched ::= Designator LPAREN ActParams RPAREN SEMI 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
	if (Obj.Meth == func.getKind()) {
		parser.report_info("Pronadjen poziv funkcije "+func.getName()+" na liniji "+funcleft, null);
		RESULT = func.getType();
	}
	else {
		parser.report_error("Semanticka greska na liniji "+funcleft+": ime "+func.getName()+" nije funkcija.", null);
		RESULT = Tab.noType;
	}
	lockFunctionDesignator = false;
	if (isMain) {
		parser.funcCallsInMain++;
	}
	int destAdr = func.getAdr() - Code.pc;
	Code.put(Code.call);
	Code.put2(destAdr);
	if (func.getType() != Tab.noType) {
		Code.put(Code.pop);
	}
	numOfActPars = 0;
	functionDesignator = null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Matched ::= Designator DesignatorsFollowUp SEMI 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		

	if (dest.getType() != Tab.intType) {
		parser.report_error(parser.getTypeName(dest.getType()), destleft, "designator mora biti tipa int u postfiksnom inkrementu i dekrementu");
	}
	if (dest.getKind() == Obj.Con) {
		parser.report_error(parser.getTypeName(dest.getType()), destleft, "ne moze se menjati vrednost konstantnom objektu");
	}
	if (dest.getKind() != Obj.Var && dest.getKind() != Obj.Fld && dest.getKind() != Obj.Elem) {
		parser.report_error(parser.getTypeName(dest.getType()), destleft, "designator mora biti promenljiva, element niza ili polje unutar objekta");
	}
	/*if (dest.getType().getKind()==Struct.Array && !designatorIsArrElem) {
		parser.report_error(parser.getTypeName(dest.getType()), destleft, "designator mora biti promenljiva, element niza ili polje unutar objekta");
	}*/

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Matched ::= Designator EQUAL Expr SEMI 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
				
		boolean substitution = false;
		if (e.getKind()==Struct.Class) {
			if (e.getElemType() == dest.getType()) {
				substitution = true;
			}
		}
		if (!substitution && !e.assignableTo(dest.getType()) && dest.getType().getKind() != Struct.Array) {
			parser.report_error("Semanticka greska na liniji "+destleft+": izraz tipa "+parser.getTypeName(e)+" ne moze biti dodeljen tipu "+parser.getTypeName(dest.getType()),null);
		}
		else if (!substitution && (e.getElemType()!=dest.getType().getElemType() && !e.assignableTo(dest.getType().getElemType())) && dest.getType().getKind() == Struct.Array) {
			parser.report_error("Semanticka greska na liniji "+destleft+": izraz tipa "+parser.getTypeName(e)+" ne moze biti dodeljen tipu "+parser.getTypeName(dest.getType()),null);
		}
		if (dest.getKind() == Obj.Con) {
			parser.report_error(parser.getTypeName(dest.getType()), destleft, "ne moze se menjati vrednost konstantnom objektu");
		}
		if (dest.getKind() != Obj.Var && dest.getKind() != Obj.Fld && dest.getKind() != Obj.Elem) {
			parser.report_error(parser.getTypeName(dest.getType()), destleft, "designator mora biti promenljiva, element niza ili polje unutar objekta");
		}
		/*if (dest.getType().getKind()==Struct.Array && !designatorIsArrElem) {
			parser.report_error(parser.getTypeName(dest.getType()), destleft, "designator mora biti promenljiva, element niza ili polje unutar objekta");
		}*/
	
	Code.store(dest);
	if (designatorInExpr) {
		designatorStack.pop();
		//designatorInExpr = false;
		resetDesignatorInExprCond();
	}
	

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Parameter ::= error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.report_error("Izvrsen oporavak do , ili ) u liniji "+lleft+" pri deklaraciji formalnog parametra funkcije",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Parameter",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Parameter ::= Type IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
			Obj temp = Tab.find(varName);
			if (temp.getLevel() == currentLevel) {
				parser.report_error(varName, varNameleft, "duplikat imena u formalnim parametrima funkcije");
			}
			else {
				Tab.insert(Obj.Var, varName, new Struct(Struct.Array, var_type));
				parser.report_info("Deklarisan parametar "+varName+" na liniji "+varNameleft, null);
			}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Parameter",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Parameter ::= Type IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	Obj temp = Tab.find(varName);
	if (temp.getLevel() == currentLevel) {
		parser.report_error(varName, varNameleft, "duplikat imena u formalnim parametrima funkcije");
	}
	else {
		Tab.insert(Obj.Var, varName, var_type);
		parser.report_info("Deklarisan parametar "+varName+" na liniji "+varNameleft, null);
	}
	currentMethodParams++;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Parameter",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FormPars ::= Parameter 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FormPars ::= FormPars COMMA Parameter 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FormalParams ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParams",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FormalParams ::= FormPars 
            {
              Object RESULT =null;
		
	if (currentMethod.getName().equals("main")) {
		parser.report_error("Main funkcija ne sme sadrzati argumente",null);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParams",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ReturnType ::= VOID 
            {
              Struct RESULT =null;
		
	isVoid=true;
	RESULT = Tab.noType;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnType",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ReturnType ::= Type 
            {
              Struct RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = retType;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnType",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MethodDecl ::= ReturnType IDENT NT$2 LPAREN FormalParams RPAREN VarDeclList LBRACE NT$3 StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		
					methodDef = false;
					if (!classDef)
						parser.funcCount++;
					else
						parser.classMethodCount++;
					parser.statementBlocks++;
					
					if (!returnFound && retType != Tab.noType) {
						parser.report_error("Semanticka greska na liniji " +methNameleft+": funkcija "+methName+" nema return iskaz.", null);
					}
					returnFound = false;
					Tab.chainLocalSymbols(currentMethod);
					
					currentMethod.setFpPos(currentMethodParams);
					if (currentMethod.getType() == Tab.noType) {
						Code.put(Code.exit);
						Code.put(Code.return_);
					}
					else {
						 Code.put(Code.trap);
						 Code.put(1);
					}
					currentMethod = null;
					Tab.closeScope();
					currentLevel--;
					isMain = false;
					isVoid = false;


              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;

	currentMethod.setAdr(Code.pc);
	if (isMain) {
		Code.mainPc = Code.pc;
	}
	Code.put(Code.enter);
	Code.put(currentMethod.getLevel());
	Code.put(Tab.currentScope().getnVars()); 

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$2 ::= 
            {
              Object RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 
					methodDef = true;
					if (methName.equals("main")) {
						isMain = true;
					}
					boolean redefinition = false;
					if (classDef) {
						
						Struct superclass = currentClass.getType().getElemType();
						Collection<Obj> superclassMethods = superclass.getMembers();
						Obj superclassMeth = null;
						for (Obj meth:superclassMethods) {
							if (methName.equals(meth.getName())) {
								superclassMeth = meth;
								break;
							}
						}
						if (superclassMeth!=null) {
							redefinition = true;
							boolean substitution = false;
							Obj temp = currentMethod = new Obj(Obj.Meth, methName, retType);
							if (temp.getType().getKind()==Struct.Class) {
								if (temp.getType().getElemType() == superclassMeth.getType()) {
									substitution = true;
								}
							}
							if (superclassMeth.getType().compatibleWith(temp.getType()) || substitution) {
								Tab.openScope();
								currentLevel++;
								Collection<Obj> subclassLocals = currentClass.getType().getMembers();
								for (Obj subclassMember:subclassLocals) {
									if (subclassMember.getName().equals(superclassMeth.getName())) {
										currentMethod = subclassMember;
										redefineMethod();
										currentMethodParams++;
										Tab.insert(Obj.Var, "this", currentClass.getType());
										break;
									}
								}
							}
							else {
								parser.report_error("Greska : nekompatibilna povratna vrednost pri redefiniciji metoda u liniji "+retTypeleft, null);
							}
						}
					}
					if (!redefinition) {
						if (Tab.find(methName) != Tab.noObj) {
							parser.report_error(methName, methNameleft, "duplikat imena u tabeli simbola");
						}
						currentMethod = Tab.insert(Obj.Meth, methName, retType);
						
						currentMethodParams = 0;
						Tab.openScope();
						currentLevel++;
						if (classDef) {
							currentMethodParams++;
							Tab.insert(Obj.Var, "this", currentClass.getType());
						}
						parser.report_info("Obradjuje se funkcija na liniji "+methNameleft, null);
						if (currentMethod.getName().equals("main") && retType != Tab.noType) {
							parser.report_error("Main funkcija mora imati povratni tip void", null);
						}
					}
				 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ClassMethods ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethods",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ClassMethods ::= LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethods",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VarDeclList ::= VarDeclList VarDecl 
            {
              Object RESULT =null;
		
					if (classDef && !methodDef) {
						parser.classFieldCount++;
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Ext ::= 
            {
              Struct RESULT =null;
		 RESULT = Tab.noType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Ext",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Ext ::= error 
            {
              Struct RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.report_error("Izvrsen oporavak do { u liniji "+lleft+" pri deklaraciji prosirenja natklase.",null); RESULT = Tab.noType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Ext",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Ext ::= EXTENDS Type 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			parser.classDerivationCount++;
			if (t.getKind() != Struct.Class) {
				parser.report_error(parser.getTypeName(t), tleft, "nije klasnog tipa");
			}
			RESULT = t;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Ext",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassDecl ::= CLASS IDENT Ext LBRACE NT$1 VarDeclList ClassMethods RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int extleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Struct ext = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		
					// atributi klase koji se nalaze u unutrasnjem opsegu se  
					// pridruzuju polju fields struct cvora 
					 Tab.chainLocalSymbols(currentClass.getType());
					 int numOfFields = currentClass.getType().getNumberOfFields();
					 Collection<Obj> locals = Tab.currentScope().getLocals().symbols();
					 for (Obj obj: locals) {
						 if (obj.getKind()==Obj.Meth) {
							// Generate method entry.
							 addFunctionEntry (obj.getName(), obj.getAdr()); 
						 }
					 }
					 // Generate VFT terminator (-2). 
					 addTableTerminator(); 

					parser.classCount++;
					classDef = false;
					
					Tab.closeScope();
					currentLevel--;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$1 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int extleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct ext = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

					
					classDef = true;

					Struct s = new Struct(Struct.Class);

					Obj tmp = Tab.find(name);
					if (tmp != Tab.noObj) {
						parser.report_error(name, nameleft, "duplikat naziva klase");
						currentClass = Tab.noObj;
					}
					else {
						currentClass = Tab.insert(Obj.Type, name, s);
						currentClass.getType().setElementType(ext);
					}
					Tab.openScope();
					currentLevel++;
					if (ext != Tab.noType) {
						Collection<Obj> membersInSuperclass = ext.getMembers();
						int n = ext.getNumberOfFields();
						int i=0;
						for (Obj obj:membersInSuperclass) {
							if (obj.getKind()==Obj.Fld) {//polja
								Obj o = Tab.insert(obj.getKind(), obj.getName(), obj.getType());
								o.setAdr(Tab.currentScope().getnVars());
							}
							else if (obj.getKind() == Obj.Meth){//metode
								Obj o = Tab.insert(obj.getKind(), obj.getName(), obj.getType());
								o.setAdr(obj.getAdr());
								o.setLevel(obj.getLevel());
								Collection<Obj> locals = obj.getLocalSymbols();
								Tab.openScope();
								currentLevel++;
								for (Obj loc: locals) {
									if (loc.getName().equals("this")) {
										Tab.insert(Obj.Var, "this", currentClass.getType());
									}
									else {
										Tab.insert(loc.getKind(), loc.getName(), loc.getType());
									}
								}
								o.setFpPos(obj.getFpPos());
								Tab.chainLocalSymbols(o);
								Tab.closeScope();
								currentLevel--;
							}
							else {
								System.err.println("Do ovoga ne bi smelo da dodje");
							}
							i++;
						}
					}
					
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	
	Obj typeNode = Tab.find(typeName);
	if (typeNode == Tab.noObj) {
		parser.report_error("Semanticka greska na liniji "+typeNameleft+ ": Nije pronadjen tip " + typeName + " u tabeli simbola.", null);
		var_type = RESULT = Tab.noType;
	}
	else {
		if (Obj.Type == typeNode.getKind()) {
			var_type = RESULT = typeNode.getType();
		}
		else {
			parser.report_error("Semanticka greska na liniji "+typeNameleft+ ": Ime " + typeName + " ne predstavlja tip.", null);
			var_type = RESULT = Tab.noType;
		}
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Var ::= IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
			if (global && !classDef)
				parser.globalArrayCount++;

			Obj temp = Tab.find(varName);
			if (temp.getLevel() == currentLevel) {
				parser.report_error("Semanticka greska na liniji "+varNameleft+": redefinicija promenljive "+varName, null);
			}
			else {
				if (classDef) {
					Tab.insert(Obj.Fld, varName, new Struct(Struct.Array, var_type));
				}
				else
					Tab.insert(Obj.Var, varName, new Struct(Struct.Array, var_type));
				parser.report_info("Deklarisana promenljiva "+varName+" na liniji "+varNameleft, null);
			}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Var ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	Obj temp = Tab.find(varName);
	if (temp.getLevel() == currentLevel) {
		parser.report_error("Semanticka greska na liniji "+varNameleft+": redefinicija promenljive "+varName, null);
	}
	else {
		if (classDef) {
			Tab.insert(Obj.Fld, varName, var_type);
		}
		else
			Tab.insert(Obj.Var, varName, var_type);
		parser.report_info("Deklarisana promenljiva "+varName+" na liniji "+varNameleft, null);
		if (var_type.getKind()==Struct.Char && global == true) {
			parser.globalCharVarCount++;
		}
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VarList ::= Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VarList ::= VarList COMMA Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // GlobalVarList ::= error COMMA Var 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // GlobalVarList ::= Var 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object varName = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // GlobalVarList ::= GlobalVarList COMMA Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VarDeclError ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclError",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarDeclError ::= SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclError",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarDecl ::= Type error VarDeclError 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ; ili { u liniji "+lleft+" pri definiciji lokalne promenljive/polja unutrasnje klase",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarDecl ::= Type VarList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // GlobalVarDecl ::= Type error SEMI 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri definiciji globalne promenljive",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // GlobalVarDecl ::= Type GlobalVarList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Rhs ::= STRCONST 
            {
              Struct RESULT =null;
		 RESULT = Tab.find("string").getType(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Rhs",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Rhs ::= BOOLCONST 
            {
              Struct RESULT =null;
		 RESULT = Tab.find("bool").getType(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Rhs",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Rhs ::= CHARCONST 
            {
              Struct RESULT =null;
		 RESULT = Tab.charType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Rhs",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Rhs ::= NUMBER 
            {
              Struct RESULT =null;
		 RESULT = Tab.intType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Rhs",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstVar ::= IDENT 
            {
              Obj RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	Obj temp = Tab.find(varName);
	if (temp.getLevel() == currentLevel) {
		parser.report_error("Semanticka greska na liniji "+varNameleft+": redefinicija promenljive "+varName, null);
		RESULT = Tab.noObj;
	}
	else {
		Obj obj = Tab.insert(Obj.Con, varName, var_type);
		parser.report_info("Deklarisana promenljiva "+varName+" na liniji "+varNameleft, null);
		RESULT = obj;
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstVar",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstPart ::= ConstPart COMMA ConstVar EQUAL Rhs 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	boolean substitution = false;
	if (e.getKind()==Struct.Class) {
		if (e.getElemType() == dest.getType()) {
			substitution = true;
		}
	}
	if (!substitution && !e.assignableTo(dest.getType()) && dest.getType().getKind() != Struct.Array) {
		parser.report_error("Semanticka greska na liniji "+destleft+": izraz tipa "+parser.getTypeName(e)+" ne moze biti dodeljen tipu "+parser.getTypeName(dest.getType().getElemType()),null);
	}
	else if (!substitution && (e.getElemType()!=dest.getType().getElemType() && !e.assignableTo(dest.getType().getElemType())) && dest.getType().getKind() == Struct.Array) {
		parser.report_error("Semanticka greska na liniji "+destleft+": izraz tipa "+parser.getTypeName(e)+" ne moze biti dodeljen tipu "+parser.getTypeName(dest.getType().getElemType()),null);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstPart",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstPart ::= ConstVar error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	parser.report_error("Izvrsen oporavak do ; u linij "+lleft+" pri definiciji konstante.", null);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstPart",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstPart ::= ConstVar EQUAL Rhs 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		  boolean substitution = false;
	if (e.getKind()==Struct.Class) {
		if (e.getElemType() == dest.getType()) {
			substitution = true;
		}
	}
	if (!substitution && !e.assignableTo(dest.getType()) && dest.getType().getKind() != Struct.Array) {
		parser.report_error("Semanticka greska na liniji "+destleft+": izraz tipa "+parser.getTypeName(e)+" ne moze biti dodeljen tipu "+parser.getTypeName(dest.getType()),null);
	}
	else if (!substitution && (e.getElemType()!=dest.getType().getElemType() && !e.assignableTo(dest.getType().getElemType())) && dest.getType().getKind() == Struct.Array) {
		parser.report_error("Semanticka greska na liniji "+destleft+": izraz tipa "+parser.getTypeName(e)+" ne moze biti dodeljen tipu "+parser.getTypeName(dest.getType()),null);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstPart",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstDecl ::= CONST error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri definiciji globalne promenljive tipa konstante",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDecl ::= CONST Type ConstPart SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclarationPart ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationPart",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclarationPart ::= GlobalVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationPart",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclarationPart ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationPart",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclarationList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclarationList ::= DeclarationList DeclarationPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = Tab.insert(Obj.Prog, pName, Tab.noType);
	Tab.openScope();
	currentLevel++;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= PROGRAM ProgName DeclarationList LBRACE NT$0 MethodDeclList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		
	
	Code.dataSize = Tab.currentScope().getnVars();
	Obj myMain = Tab.find("main");
	if (myMain==Tab.noObj) {
		parser.report_error("Greska : ulazni fajl ne sadrzi main metodu", null);
	}
	Tab.chainLocalSymbols(p);
	Tab.closeScope();
	currentLevel--;
	

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

						global = false;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

