
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 04 23:59:25 CET 2015
//----------------------------------------------------

package rs.ac.bg.etf.pp1.sv110059;

import java_cup.runtime.*;
import java.io.*;
import rs.etf.pp1.symboltable.*;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.visitors.*;
import java.util.Collection;
import rs.ac.bg.etf.pp1.sv110059.util.*;
import rs.etf.pp1.mj.runtime.*;
import java.util.Stack;
import java.util.ArrayList;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 04 23:59:25 CET 2015
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\207\000\002\064\002\000\002\002\011\000\002\002" +
    "\004\000\002\050\003\000\002\021\004\000\002\021\002" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\023\006\000\002\023\005\000\002\025\005\000\002" +
    "\025\004\000\002\025\007\000\002\052\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\007\005\000\002\007\005\000\002\005\005\000" +
    "\002\005\005\000\002\026\003\000\002\026\002\000\002" +
    "\010\005\000\002\010\003\000\002\010\005\000\002\024" +
    "\005\000\002\024\003\000\002\012\003\000\002\012\005" +
    "\000\002\056\003\000\002\065\002\000\002\027\012\000" +
    "\002\063\004\000\002\063\003\000\002\063\002\000\002" +
    "\003\004\000\002\003\002\000\002\030\005\000\002\030" +
    "\002\000\002\004\004\000\002\004\002\000\002\066\002" +
    "\000\002\067\002\000\002\006\015\000\002\057\003\000" +
    "\002\057\003\000\002\032\003\000\002\032\002\000\002" +
    "\011\005\000\002\011\003\000\002\031\004\000\002\031" +
    "\006\000\002\031\003\000\002\013\004\000\002\013\002" +
    "\000\002\014\003\000\002\014\003\000\002\017\006\000" +
    "\002\017\005\000\002\017\007\000\002\017\007\000\002" +
    "\017\006\000\002\017\006\000\002\017\005\000\002\017" +
    "\004\000\002\017\011\000\002\017\011\000\002\017\007" +
    "\000\002\017\007\000\002\017\004\000\002\017\007\000" +
    "\002\017\010\000\002\017\005\000\002\020\003\000\002" +
    "\037\003\000\002\040\003\000\002\034\004\000\002\034" +
    "\002\000\002\036\003\000\002\036\002\000\002\035\005" +
    "\000\002\035\003\000\002\015\003\000\002\070\002\000" +
    "\002\047\006\000\002\047\003\000\002\071\002\000\002" +
    "\045\006\000\002\045\003\000\002\046\005\000\002\046" +
    "\003\000\002\061\004\000\002\061\005\000\002\043\003" +
    "\000\002\043\002\000\002\060\003\000\002\060\005\000" +
    "\002\062\006\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\062" +
    "\004\000\002\062\007\000\002\062\005\000\002\033\003" +
    "\000\002\033\003\000\002\016\007\000\002\016\007\000" +
    "\002\016\011\000\002\016\011\000\002\016\007\000\002" +
    "\016\007\000\002\072\002\000\002\051\005\000\002\053" +
    "\004\000\002\053\002\000\002\054\004\000\002\054\005" +
    "\000\002\054\005\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\042\003\000\002\042\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\004\004\005\001\002\000\004\002\347\001" +
    "\002\000\004\052\006\001\002\000\012\005\ufffe\032\ufffe" +
    "\044\ufffe\052\ufffe\001\002\000\012\005\ufffc\032\ufffc\044" +
    "\ufffc\052\ufffc\001\002\000\012\005\013\032\021\044\020" +
    "\052\014\001\002\000\012\005\ufffd\032\ufffd\044\ufffd\052" +
    "\ufffd\001\002\000\006\003\336\052\062\001\002\000\010" +
    "\006\001\017\001\052\001\001\002\000\054\003\uffe1\005" +
    "\uffe1\007\uffe1\011\uffe1\012\uffe1\015\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\052\uffe1" +
    "\001\002\000\012\005\ufffa\032\ufffa\044\ufffa\052\ufffa\001" +
    "\002\000\012\005\ufff9\032\ufff9\044\ufff9\052\ufff9\001\002" +
    "\000\012\005\ufffb\032\ufffb\044\ufffb\052\ufffb\001\002\000" +
    "\004\052\044\001\002\000\006\003\023\052\014\001\002" +
    "\000\004\052\027\001\002\000\004\007\024\001\002\000" +
    "\012\005\ufff7\032\ufff7\044\ufff7\052\ufff7\001\002\000\006" +
    "\007\040\012\037\001\002\000\006\003\030\016\031\001" +
    "\002\000\006\003\ufff3\016\ufff3\001\002\000\006\007\ufff5" +
    "\012\ufff5\001\002\000\012\051\032\053\036\055\035\056" +
    "\033\001\002\000\006\007\ufff2\012\ufff2\001\002\000\006" +
    "\007\uffef\012\uffef\001\002\000\006\007\ufff6\012\ufff6\001" +
    "\002\000\006\007\ufff0\012\ufff0\001\002\000\006\007\ufff1" +
    "\012\ufff1\001\002\000\004\052\027\001\002\000\012\005" +
    "\ufff8\032\ufff8\044\ufff8\052\ufff8\001\002\000\004\016\042" +
    "\001\002\000\012\051\032\053\036\055\035\056\033\001" +
    "\002\000\006\007\ufff4\012\ufff4\001\002\000\010\003\047" +
    "\005\uffdc\054\046\001\002\000\004\005\051\001\002\000" +
    "\004\052\014\001\002\000\004\005\uffdd\001\002\000\004" +
    "\005\uffde\001\002\000\010\005\uffe0\006\uffe0\052\uffe0\001" +
    "\002\000\010\005\uffda\006\uffda\052\uffda\001\002\000\010" +
    "\005\054\006\uffd8\052\014\001\002\000\010\006\uffd6\017" +
    "\uffd6\052\uffd6\001\002\000\006\003\061\052\062\001\002" +
    "\000\010\005\uffdb\006\uffdb\052\uffdb\001\002\000\004\006" +
    "\060\001\002\000\012\005\uffdf\032\uffdf\044\uffdf\052\uffdf" +
    "\001\002\000\012\005\uffe9\006\uffe9\007\072\052\uffe9\001" +
    "\002\000\010\007\uffe3\012\uffe3\034\070\001\002\000\006" +
    "\007\uffe4\012\uffe4\001\002\000\006\007\066\012\065\001" +
    "\002\000\004\052\062\001\002\000\010\005\uffec\006\uffec" +
    "\052\uffec\001\002\000\006\007\uffe5\012\uffe5\001\002\000" +
    "\004\035\071\001\002\000\006\007\uffe2\012\uffe2\001\002" +
    "\000\010\005\uffea\006\uffea\052\uffea\001\002\000\010\005" +
    "\uffeb\006\uffeb\052\uffeb\001\002\000\010\006\076\017\100" +
    "\052\014\001\002\000\004\052\uffd2\001\002\000\004\006" +
    "\uffd9\001\002\000\010\006\uffd7\017\uffd7\052\uffd7\001\002" +
    "\000\004\052\uffd1\001\002\000\004\052\102\001\002\000" +
    "\004\010\uffd5\001\002\000\004\010\104\001\002\000\010" +
    "\003\106\011\uffcf\052\014\001\002\000\004\052\330\001" +
    "\002\000\006\011\uffca\012\uffca\001\002\000\004\011\114" +
    "\001\002\000\006\011\uffd0\012\112\001\002\000\006\011" +
    "\uffcd\012\uffcd\001\002\000\006\003\106\052\014\001\002" +
    "\000\006\011\uffce\012\uffce\001\002\000\006\005\uffda\052" +
    "\uffda\001\002\000\006\005\116\052\014\001\002\000\024" +
    "\005\uffd4\006\uffd4\013\uffd4\014\uffd4\040\uffd4\043\uffd4\046" +
    "\uffd4\047\uffd4\052\uffd4\001\002\000\024\005\uffc8\006\uffc8" +
    "\013\uffc8\014\uffc8\040\uffc8\043\uffc8\046\uffc8\047\uffc8\052" +
    "\uffc8\001\002\000\024\005\123\006\136\013\133\014\135" +
    "\040\137\043\122\046\131\047\121\052\124\001\002\000" +
    "\004\010\324\001\002\000\004\010\uffb5\001\002\000\024" +
    "\005\uffc8\006\uffc8\013\uffc8\014\uffc8\040\uffc8\043\uffc8\046" +
    "\uffc8\047\uffc8\052\uffc8\001\002\000\060\007\uff8c\010\uff8c" +
    "\011\uff8c\012\uff8c\015\uff8c\016\uff8c\020\uff8c\021\uff8c\022" +
    "\uff8c\023\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c" +
    "\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\041\uff8c\042" +
    "\uff8c\050\uff8c\001\002\000\004\010\270\001\002\000\024" +
    "\005\uffc6\006\uffc6\013\uffc6\014\uffc6\040\uffc6\043\uffc6\046" +
    "\uffc6\047\uffc6\052\uffc6\001\002\000\012\010\253\016\251" +
    "\041\250\042\252\001\002\000\004\010\215\001\002\000" +
    "\004\010\uffb3\001\002\000\024\005\uffc9\006\uffc9\013\uffc9" +
    "\014\uffc9\040\uffc9\043\uffc9\046\uffc9\047\uffc9\052\uffc9\001" +
    "\002\000\004\010\206\001\002\000\024\005\uffc7\006\uffc7" +
    "\013\uffc7\014\uffc7\040\uffc7\043\uffc7\046\uffc7\047\uffc7\052" +
    "\uffc7\001\002\000\024\007\142\010\uffa0\024\uffa0\027\143" +
    "\051\uffa0\052\uffa0\053\uffa0\055\uffa0\056\uffa0\001\002\000" +
    "\010\006\uffd3\017\uffd3\052\uffd3\001\002\000\004\007\140" +
    "\001\002\000\026\005\uffb9\006\uffb9\013\uffb9\014\uffb9\040" +
    "\uffb9\043\uffb9\045\uffb9\046\uffb9\047\uffb9\052\uffb9\001\002" +
    "\000\010\007\205\015\160\027\161\001\002\000\026\005" +
    "\uffbe\006\uffbe\013\uffbe\014\uffbe\040\uffbe\043\uffbe\045\uffbe" +
    "\046\uffbe\047\uffbe\052\uffbe\001\002\000\020\010\uffa1\024" +
    "\uffa1\051\uffa1\052\uffa1\053\uffa1\055\uffa1\056\uffa1\001\002" +
    "\000\020\010\155\024\145\051\147\052\124\053\150\055" +
    "\151\056\154\001\002\000\004\052\014\001\002\000\046" +
    "\007\uff9c\010\171\011\uff9c\012\uff9c\015\uff9c\020\uff9c\021" +
    "\uff9c\022\uff9c\023\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c" +
    "\031\uff9c\033\uff9c\035\uff9c\036\uff9c\037\uff9c\001\002\000" +
    "\044\007\uff9b\011\uff9b\012\uff9b\015\uff9b\020\uff9b\021\uff9b" +
    "\022\uff9b\023\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031" +
    "\uff9b\033\uff9b\035\uff9b\036\uff9b\037\uff9b\001\002\000\044" +
    "\007\uff9a\011\uff9a\012\uff9a\015\uff9a\020\uff9a\021\uff9a\022" +
    "\uff9a\023\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a" +
    "\033\uff9a\035\uff9a\036\uff9a\037\uff9a\001\002\000\044\007" +
    "\uff99\011\uff99\012\uff99\015\uff99\020\uff99\021\uff99\022\uff99" +
    "\023\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99\033" +
    "\uff99\035\uff99\036\uff99\037\uff99\001\002\000\044\007\uffa3" +
    "\011\uffa3\012\uffa3\015\uffa3\020\uffa3\021\uffa3\022\uffa3\023" +
    "\uffa3\025\165\026\164\027\uffa3\030\uffa3\031\uffa3\033\uffa3" +
    "\035\uffa3\036\uffa3\037\167\001\002\000\044\007\uff9f\011" +
    "\uff9f\012\uff9f\015\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f" +
    "\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\033\uff9f\035" +
    "\uff9f\036\uff9f\037\uff9f\001\002\000\044\007\uff98\011\uff98" +
    "\012\uff98\015\uff98\020\uff98\021\uff98\022\uff98\023\uff98\025" +
    "\uff98\026\uff98\027\uff98\030\uff98\031\uff98\033\uff98\035\uff98" +
    "\036\uff98\037\uff98\001\002\000\022\010\uffa0\024\uffa0\027" +
    "\143\051\uffa0\052\uffa0\053\uffa0\055\uffa0\056\uffa0\001\002" +
    "\000\010\011\157\015\160\027\161\001\002\000\044\007" +
    "\uff95\011\uff95\012\uff95\015\uff95\020\uff95\021\uff95\022\uff95" +
    "\023\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95\033" +
    "\uff95\035\uff95\036\uff95\037\uff95\001\002\000\020\010\uff7f" +
    "\024\uff7f\051\uff7f\052\uff7f\053\uff7f\055\uff7f\056\uff7f\001" +
    "\002\000\020\010\uff7e\024\uff7e\051\uff7e\052\uff7e\053\uff7e" +
    "\055\uff7e\056\uff7e\001\002\000\020\010\155\024\145\051" +
    "\147\052\124\053\150\055\151\056\154\001\002\000\044" +
    "\007\uffa2\011\uffa2\012\uffa2\015\uffa2\020\uffa2\021\uffa2\022" +
    "\uffa2\023\uffa2\025\165\026\164\027\uffa2\030\uffa2\031\uffa2" +
    "\033\uffa2\035\uffa2\036\uffa2\037\167\001\002\000\020\010" +
    "\uff7b\024\uff7b\051\uff7b\052\uff7b\053\uff7b\055\uff7b\056\uff7b" +
    "\001\002\000\020\010\uff7c\024\uff7c\051\uff7c\052\uff7c\053" +
    "\uff7c\055\uff7c\056\uff7c\001\002\000\020\010\155\024\145" +
    "\051\147\052\124\053\150\055\151\056\154\001\002\000" +
    "\020\010\uff7d\024\uff7d\051\uff7d\052\uff7d\053\uff7d\055\uff7d" +
    "\056\uff7d\001\002\000\044\007\uff9e\011\uff9e\012\uff9e\015" +
    "\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\025\uff9e\026\uff9e" +
    "\027\uff9e\030\uff9e\031\uff9e\033\uff9e\035\uff9e\036\uff9e\037" +
    "\uff9e\001\002\000\024\010\uffa0\011\uffaf\024\uffa0\027\143" +
    "\051\uffa0\052\uffa0\053\uffa0\055\uffa0\056\uffa0\001\002\000" +
    "\004\011\200\001\002\000\006\011\uffb0\012\176\001\002" +
    "\000\012\011\uffac\012\uffac\015\160\027\161\001\002\000" +
    "\006\011\uffad\012\uffad\001\002\000\022\010\uffa0\024\uffa0" +
    "\027\143\051\uffa0\052\uffa0\053\uffa0\055\uffa0\056\uffa0\001" +
    "\002\000\006\011\uffae\012\uffae\001\002\000\044\007\uff9d" +
    "\011\uff9d\012\uff9d\015\uff9d\020\uff9d\021\uff9d\022\uff9d\023" +
    "\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\033\uff9d" +
    "\035\uff9d\036\uff9d\037\uff9d\001\002\000\046\007\uff97\011" +
    "\uff97\012\uff97\015\uff97\020\uff97\021\uff97\022\uff97\023\uff97" +
    "\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97\033\uff97\034" +
    "\202\035\uff97\036\uff97\037\uff97\001\002\000\022\010\uffa0" +
    "\024\uffa0\027\143\051\uffa0\052\uffa0\053\uffa0\055\uffa0\056" +
    "\uffa0\001\002\000\010\015\160\027\161\035\204\001\002" +
    "\000\044\007\uff96\011\uff96\012\uff96\015\uff96\020\uff96\021" +
    "\uff96\022\uff96\023\uff96\025\uff96\026\uff96\027\uff96\030\uff96" +
    "\031\uff96\033\uff96\035\uff96\036\uff96\037\uff96\001\002\000" +
    "\026\005\uffbf\006\uffbf\013\uffbf\014\uffbf\040\uffbf\043\uffbf" +
    "\045\uffbf\046\uffbf\047\uffbf\052\uffbf\001\002\000\022\010" +
    "\uffa0\024\uffa0\027\143\051\uffa0\052\uffa0\053\uffa0\055\uffa0" +
    "\056\uffa0\001\002\000\012\011\uffb1\012\210\015\160\027" +
    "\161\001\002\000\004\051\214\001\002\000\004\011\212" +
    "\001\002\000\004\007\213\001\002\000\026\005\uffb7\006" +
    "\uffb7\013\uffb7\014\uffb7\040\uffb7\043\uffb7\045\uffb7\046\uffb7" +
    "\047\uffb7\052\uffb7\001\002\000\004\011\uffb2\001\002\000" +
    "\024\003\217\010\uffa0\024\uffa0\027\143\051\uffa0\052\uffa0" +
    "\053\uffa0\055\uffa0\056\uffa0\001\002\000\010\011\uffa9\033" +
    "\uffa8\036\uffab\001\002\000\004\011\236\001\002\000\030" +
    "\011\uffa4\015\160\020\232\021\226\022\234\023\227\027" +
    "\161\030\233\031\230\033\uffa4\036\uffa4\001\002\000\004" +
    "\011\223\001\002\000\010\011\uffa6\033\uffa6\036\uffa6\001" +
    "\002\000\022\005\123\013\133\014\135\040\137\043\122" +
    "\046\131\047\121\052\124\001\002\000\024\005\uff8e\006" +
    "\uff8e\013\uff8e\014\uff8e\040\uff8e\043\uff8e\046\uff8e\047\uff8e" +
    "\052\uff8e\001\002\000\026\005\uffbb\006\uffbb\013\uffbb\014" +
    "\uffbb\040\uffbb\043\uffbb\045\uffbb\046\uffbb\047\uffbb\052\uffbb" +
    "\001\002\000\022\010\uff82\024\uff82\027\uff82\051\uff82\052" +
    "\uff82\053\uff82\055\uff82\056\uff82\001\002\000\022\010\uff80" +
    "\024\uff80\027\uff80\051\uff80\052\uff80\053\uff80\055\uff80\056" +
    "\uff80\001\002\000\022\010\uff85\024\uff85\027\uff85\051\uff85" +
    "\052\uff85\053\uff85\055\uff85\056\uff85\001\002\000\022\010" +
    "\uffa0\024\uffa0\027\143\051\uffa0\052\uffa0\053\uffa0\055\uffa0" +
    "\056\uffa0\001\002\000\022\010\uff83\024\uff83\027\uff83\051" +
    "\uff83\052\uff83\053\uff83\055\uff83\056\uff83\001\002\000\022" +
    "\010\uff84\024\uff84\027\uff84\051\uff84\052\uff84\053\uff84\055" +
    "\uff84\056\uff84\001\002\000\022\010\uff81\024\uff81\027\uff81" +
    "\051\uff81\052\uff81\053\uff81\055\uff81\056\uff81\001\002\000" +
    "\014\011\uffa5\015\160\027\161\033\uffa5\036\uffa5\001\002" +
    "\000\022\005\123\013\133\014\135\040\137\043\122\046" +
    "\131\047\121\052\124\001\002\000\024\005\uff8d\006\uff8d" +
    "\013\uff8d\014\uff8d\040\uff8d\043\uff8d\046\uff8d\047\uff8d\052" +
    "\uff8d\001\002\000\026\005\uffba\006\uffba\013\uffba\014\uffba" +
    "\040\uffba\043\uffba\045\uffba\046\uffba\047\uffba\052\uffba\001" +
    "\002\000\004\033\245\001\002\000\004\036\243\001\002" +
    "\000\022\010\uffa0\024\uffa0\027\143\051\uffa0\052\uffa0\053" +
    "\uffa0\055\uffa0\056\uffa0\001\002\000\004\011\uffaa\001\002" +
    "\000\022\010\uffa0\024\uffa0\027\143\051\uffa0\052\uffa0\053" +
    "\uffa0\055\uffa0\056\uffa0\001\002\000\010\011\uffa7\033\uffa7" +
    "\036\uffa7\001\002\000\004\007\267\001\002\000\004\007" +
    "\uff94\001\002\000\024\003\263\010\uffa0\024\uffa0\027\143" +
    "\051\uffa0\052\uffa0\053\uffa0\055\uffa0\056\uffa0\001\002\000" +
    "\004\007\uff93\001\002\000\026\003\255\010\uffa0\011\uffaf" +
    "\024\uffa0\027\143\051\uffa0\052\uffa0\053\uffa0\055\uffa0\056" +
    "\uffa0\001\002\000\004\011\261\001\002\000\006\007\257" +
    "\011\256\001\002\000\004\007\260\001\002\000\026\005" +
    "\uffc1\006\uffc1\013\uffc1\014\uffc1\040\uffc1\043\uffc1\045\uffc1" +
    "\046\uffc1\047\uffc1\052\uffc1\001\002\000\026\005\uffc2\006" +
    "\uffc2\013\uffc2\014\uffc2\040\uffc2\043\uffc2\045\uffc2\046\uffc2" +
    "\047\uffc2\052\uffc2\001\002\000\004\007\262\001\002\000" +
    "\026\005\uffc3\006\uffc3\013\uffc3\014\uffc3\040\uffc3\043\uffc3" +
    "\045\uffc3\046\uffc3\047\uffc3\052\uffc3\001\002\000\004\007" +
    "\266\001\002\000\010\007\265\015\160\027\161\001\002" +
    "\000\026\005\uffc5\006\uffc5\013\uffc5\014\uffc5\040\uffc5\043" +
    "\uffc5\045\uffc5\046\uffc5\047\uffc5\052\uffc5\001\002\000\026" +
    "\005\uffc0\006\uffc0\013\uffc0\014\uffc0\040\uffc0\043\uffc0\045" +
    "\uffc0\046\uffc0\047\uffc0\052\uffc0\001\002\000\026\005\uffc4" +
    "\006\uffc4\013\uffc4\014\uffc4\040\uffc4\043\uffc4\045\uffc4\046" +
    "\uffc4\047\uffc4\052\uffc4\001\002\000\024\003\271\010\uffa0" +
    "\024\uffa0\027\143\051\uffa0\052\uffa0\053\uffa0\055\uffa0\056" +
    "\uffa0\001\002\000\004\011\302\001\002\000\004\011\273" +
    "\001\002\000\022\005\123\013\133\014\135\040\137\043" +
    "\122\046\131\047\121\052\124\001\002\000\024\005\uff92" +
    "\006\uff92\013\uff92\014\uff92\040\uff92\043\uff92\046\uff92\047" +
    "\uff92\052\uff92\001\002\000\026\005\uffc7\006\uffc7\013\uffc7" +
    "\014\uffc7\040\uffc7\043\uffc7\045\277\046\uffc7\047\uffc7\052" +
    "\uffc7\001\002\000\022\005\123\013\133\014\135\040\137" +
    "\043\122\046\131\047\121\052\124\001\002\000\022\005" +
    "\uffb4\013\uffb4\014\uffb4\040\uffb4\043\uffb4\046\uffb4\047\uffb4" +
    "\052\uffb4\001\002\000\024\005\uff90\006\uff90\013\uff90\014" +
    "\uff90\040\uff90\043\uff90\046\uff90\047\uff90\052\uff90\001\002" +
    "\000\026\005\uffbd\006\uffbd\013\uffbd\014\uffbd\040\uffbd\043" +
    "\uffbd\045\uffbd\046\uffbd\047\uffbd\052\uffbd\001\002\000\022" +
    "\005\123\013\133\014\135\040\137\043\122\046\131\047" +
    "\121\052\124\001\002\000\024\005\uff91\006\uff91\013\uff91" +
    "\014\uff91\040\uff91\043\uff91\046\uff91\047\uff91\052\uff91\001" +
    "\002\000\026\005\uffc7\006\uffc7\013\uffc7\014\uffc7\040\uffc7" +
    "\043\uffc7\045\277\046\uffc7\047\uffc7\052\uffc7\001\002\000" +
    "\022\005\123\013\133\014\135\040\137\043\122\046\131" +
    "\047\121\052\124\001\002\000\024\005\uff8f\006\uff8f\013" +
    "\uff8f\014\uff8f\040\uff8f\043\uff8f\046\uff8f\047\uff8f\052\uff8f" +
    "\001\002\000\026\005\uffbc\006\uffbc\013\uffbc\014\uffbc\040" +
    "\uffbc\043\uffbc\045\uffbc\046\uffbc\047\uffbc\052\uffbc\001\002" +
    "\000\060\007\uff89\010\uff89\011\uff89\012\uff89\015\uff89\016" +
    "\uff89\020\uff89\021\uff89\022\uff89\023\uff89\025\uff89\026\uff89" +
    "\027\uff89\030\uff89\031\uff89\033\uff89\034\uff89\035\uff89\036" +
    "\uff89\037\uff89\041\uff89\042\uff89\050\uff89\001\002\000\060" +
    "\007\uff8b\010\uff8b\011\uff8b\012\uff8b\015\uff8b\016\uff8b\020" +
    "\uff8b\021\uff8b\022\uff8b\023\uff8b\025\uff8b\026\uff8b\027\uff8b" +
    "\030\uff8b\031\uff8b\033\uff8b\034\312\035\uff8b\036\uff8b\037" +
    "\uff8b\041\uff8b\042\uff8b\050\314\001\002\000\024\003\316" +
    "\010\uffa0\024\uffa0\027\143\051\uffa0\052\uffa0\053\uffa0\055" +
    "\uffa0\056\uffa0\001\002\000\060\007\uff8a\010\uff8a\011\uff8a" +
    "\012\uff8a\015\uff8a\016\uff8a\020\uff8a\021\uff8a\022\uff8a\023" +
    "\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\033\uff8a" +
    "\034\uff8a\035\uff8a\036\uff8a\037\uff8a\041\uff8a\042\uff8a\050" +
    "\uff8a\001\002\000\004\052\315\001\002\000\060\007\uff88" +
    "\010\uff88\011\uff88\012\uff88\015\uff88\016\uff88\020\uff88\021" +
    "\uff88\022\uff88\023\uff88\025\uff88\026\uff88\027\uff88\030\uff88" +
    "\031\uff88\033\uff88\034\uff88\035\uff88\036\uff88\037\uff88\041" +
    "\uff88\042\uff88\050\uff88\001\002\000\004\035\321\001\002" +
    "\000\010\015\160\027\161\035\320\001\002\000\060\007" +
    "\uff87\010\uff87\011\uff87\012\uff87\015\uff87\016\uff87\020\uff87" +
    "\021\uff87\022\uff87\023\uff87\025\uff87\026\uff87\027\uff87\030" +
    "\uff87\031\uff87\033\uff87\034\uff87\035\uff87\036\uff87\037\uff87" +
    "\041\uff87\042\uff87\050\uff87\001\002\000\060\007\uff86\010" +
    "\uff86\011\uff86\012\uff86\015\uff86\016\uff86\020\uff86\021\uff86" +
    "\022\uff86\023\uff86\025\uff86\026\uff86\027\uff86\030\uff86\031" +
    "\uff86\033\uff86\034\uff86\035\uff86\036\uff86\037\uff86\041\uff86" +
    "\042\uff86\050\uff86\001\002\000\024\005\123\006\323\013" +
    "\133\014\135\040\137\043\122\046\131\047\121\052\124" +
    "\001\002\000\026\005\uffb6\006\uffb6\013\uffb6\014\uffb6\040" +
    "\uffb6\043\uffb6\045\uffb6\046\uffb6\047\uffb6\052\uffb6\001\002" +
    "\000\004\052\124\001\002\000\004\011\326\001\002\000" +
    "\004\007\327\001\002\000\026\005\uffb8\006\uffb8\013\uffb8" +
    "\014\uffb8\040\uffb8\043\uffb8\045\uffb8\046\uffb8\047\uffb8\052" +
    "\uffb8\001\002\000\010\011\uffcc\012\uffcc\034\331\001\002" +
    "\000\004\035\332\001\002\000\006\011\uffcb\012\uffcb\001" +
    "\002\000\010\006\uffd6\017\uffd6\052\uffd6\001\002\000\010" +
    "\006\335\017\100\052\014\001\002\000\004\002\000\001" +
    "\002\000\006\007\345\012\344\001\002\000\006\007\342" +
    "\012\341\001\002\000\006\007\uffe7\012\uffe7\001\002\000" +
    "\004\052\062\001\002\000\012\005\uffee\032\uffee\044\uffee" +
    "\052\uffee\001\002\000\006\007\uffe8\012\uffe8\001\002\000" +
    "\004\052\062\001\002\000\012\005\uffed\032\uffed\044\uffed" +
    "\052\uffed\001\002\000\006\007\uffe6\012\uffe6\001\002\000" +
    "\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\050\006\001\001\000\002\001\001\000\004\021\007" +
    "\001\001\000\014\007\014\022\010\023\016\027\015\056" +
    "\011\001\001\000\002\001\001\000\006\010\336\012\337" +
    "\001\001\000\004\064\332\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\056\021\001\001\000\006\025\024\052" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\055\042\001\001\000\002\001\001\000" +
    "\004\063\044\001\001\000\002\001\001\000\004\056\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\065" +
    "\051\001\001\000\004\003\052\001\001\000\010\005\055" +
    "\030\056\056\054\001\001\000\004\004\073\001\001\000" +
    "\006\012\062\024\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\076\056\074\057\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\066\102\001\001\000" +
    "\002\001\001\000\012\011\107\031\110\032\106\056\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\112" +
    "\056\104\001\001\000\002\001\001\000\004\003\114\001" +
    "\001\000\006\005\055\056\054\001\001\000\004\067\116" +
    "\001\001\000\004\013\117\001\001\000\016\014\131\016" +
    "\125\017\133\020\127\040\124\051\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\321\001\001\000" +
    "\004\072\307\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\246\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\043\143\061\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\051\145\060" +
    "\151\062\152\001\001\000\004\056\200\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\043\143\061\155\001\001\000\004\042" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\051\145\060\162\062\152\001\001\000" +
    "\004\044\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\051\145\062\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\015\174\035\172\036\171\043\143" +
    "\061\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\161\001\001\000\002\001\001\000\010\015\176" +
    "\043\143\061\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\043\143\061\202\001\001" +
    "\000\004\042\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\043\143\061\206\001\001\000\006\034\210" +
    "\042\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\043\143\045\215\046\221\047\220\061\217\001\001\000" +
    "\006\070\241\071\240\001\001\000\002\001\001\000\006" +
    "\041\230\042\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\016\223\017\224\020\127\040\124\051\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\043\143" +
    "\061\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\161\001\001\000\014\016\236" +
    "\017\237\020\127\040\124\051\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\043\143\045\215\046\221\047\243\061\217\001" +
    "\001\000\002\001\001\000\010\043\143\046\245\061\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\043\143\061\263\001\001\000\002\001\001" +
    "\000\014\015\174\035\172\036\253\043\143\061\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\043\143\045\215\046\221\047\271\061\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\014\273\016" +
    "\125\017\274\020\127\040\124\051\126\001\001\000\002" +
    "\001\001\000\004\037\275\001\001\000\014\016\277\017" +
    "\300\020\127\040\124\051\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\014\302\016" +
    "\125\017\303\020\127\040\124\051\126\001\001\000\002" +
    "\001\001\000\004\037\304\001\001\000\014\016\305\017" +
    "\306\020\127\040\124\051\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\310\001\001\000\004\054" +
    "\312\001\001\000\006\043\143\061\316\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\014\131\016\125\017\133\020\127\040" +
    "\124\051\126\001\001\000\002\001\001\000\004\051\324" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\333\001\001\000\010\006\076\056\074\057" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\342\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\345\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	Tab.init();
	Code.dataSize = 0;
	System.out.println("==================SEMANTICKA OBRADA====================");
	Struct boolType = new Struct(Struct.Bool);
    Tab.insert(Obj.Type, "bool", boolType);
    Struct stringType = new Struct(Struct.Array, Tab.charType);
    Tab.insert(Obj.Type, "string", stringType);
	Obj o = Tab.find("len");
	o.setFpPos(1);
	o = Tab.find("chr");
	o.setFpPos(1);
	o = Tab.find("ord");
	o.setFpPos(1);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	return s;

    }


	//promenljive za brojanje pojavljivanja odredjenih elemenata
	
	int globalCharVarCount = 0; //R40
	int globalArrayCount = 0; //R41
	int funcCount = 0; //R42
	int classCount = 0; //R43
	int statementBlocks = 0; //R44
	int funcCallsInMain = 0; //R45
	int newStatementCount = 0; //R46
	int classMethodCount = 0; //R47
	int classFieldCount = 0; //R48
	int classDerivationCount = 0; //R49

    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
    boolean greska;
     
   public void report_fatal_error(String message, Object   info) throws java.lang.Exception {
   	  greska=true;
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info)
    {
      greska=true;
      //Code.greska = true;
      System.err.print(message);
      System.err.flush();
      if (info instanceof Symbol)
          System.err.println(" na liniji " + ((Symbol)info).left);
      else System.err.println("");
    }
    
    public void report_info(String message, Object info)
    {
      System.out.print(message);
      System.out.flush();
      if (info instanceof Symbol)
          System.out.println(" na liniji " + ((Symbol)info).left);
      else System.out.println("");
    }
   
   	MyVisitor dstv = new MyVisitor();
   	
   	public void report_error(String symName, int line, String msg) {
   	  greska=true;
   	  //Code.greska = true;
      System.err.print("Greska na "+line+"("+symName+"), "+msg);
      System.err.flush();
      System.err.println("");
   	}
   	
    public void report_info(String symName, int line, Obj obj) {
    	  dstv.visitObjNode(obj);
    	  System.out.print("Pretraga na "+line+"("+symName+"), nadjeno "+dstv.getOutput());
    	  dstv.flush();
	      System.out.flush();
	      System.out.println("");
    }
    
    
    public void printCounts() {
    	System.out.println("Broj elemenata: ");
    	System.out.println("Deklaracije globalnih promenljivih tipa char - " + globalCharVarCount);
    	System.out.println("Deklaracije globalnih nizova - " + globalArrayCount);
    	System.out.println("Definicije funkcija u glavnom programu - " + funcCount);
    	System.out.println("Definicije unutrasnjih klasa - " + classCount);
    	System.out.println("Blokovi naredbi - " + statementBlocks);
    	System.out.println("Pozivi funkcija u telu metode main - "+funcCallsInMain);
    	System.out.println("Naredbe stvaranja objekta - " + newStatementCount);
    	System.out.println("Definicije metoda unutrasnjih klasa - " + classMethodCount);
    	System.out.println("Definicije polja unutrasnjih klasa - " + classFieldCount);
    	System.out.println("Izvodjenja klasa - " + classDerivationCount);
    }
    
    public static void main(String args[]) throws Exception {
        FileReader r = new FileReader(args[0]);
        Yylex skener = new Yylex(r);
        MJParser p = new MJParser(skener);
        //Symbol s = p.debug_parse();  //pocetak parsiranja
        Symbol s = p.parse();
       
        if (p.greska || Code.greska) {
        	 Tab.dump();
        	System.out.println("Ulazni program ima gresaka!");
        }
        else {
        	File objFile = new File("test/program.obj");
        	if (objFile.exists())
        		objFile.delete();
        	Code.write(new FileOutputStream(objFile));
        	System.out.println("==================SINTAKSNA ANALIZA====================");
        	p.printCounts();
        	Tab.dump();
        	System.out.println("Parsiranje uspesno zavrseno!");
        }
        
    }

    String getTypeName(Struct t) {
    	StringBuilder output = new StringBuilder();
    	switch (t.getKind()) {
		case Struct.None:
			output.append("notype");
			break;
		case Struct.Int:
			output.append("int");
			break;
		case Struct.Char:
			output.append("char");
			break;
		case Struct.Array:
			output.append("Arr of ");
			
			switch (t.getElemType().getKind()) {
			case Struct.None:
				output.append("notype");
				break;
			case Struct.Int:
				output.append("int");
				break;
			case Struct.Char:
				output.append("char");
				break;
			case Struct.Class:
				output.append("Class");
				break;
			}
			break;
		case Struct.Class:
			output.append("Class");
			break;
		}
		return output.toString();
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {



	boolean global = true;
	boolean classDef = false;
	boolean isMain = false;
	boolean methodDef = false;
	Struct var_type=Tab.noType;
	Obj currentMethod = null;
	boolean returnFound = false;
	int currentLevel = -1;
	boolean isVoid=false;
	Obj curr_ident = null;
	boolean designatorIsArrElem = false;
	boolean insideWhile = false;
	Obj currentDesignator = null;
	Obj functionDesignator = null;
	int numOfActPars = 0;
	int currentMethodParams = 0;
	boolean lockFunctionDesignator = false;
	Obj previosDesignator = null;
	Obj currentClass = null;
	boolean designatorInExpr = false;
	Stack<Obj> designatorStack = new Stack<Obj>();
	Stack<Boolean> designatorInExprStack = new Stack<Boolean>();
	Stack<Integer> tops = new Stack<Integer>();
	Stack<Integer> tJumpAdrs = new Stack<Integer>();
	Stack<Integer> fJumpAdrs = new Stack<Integer>();
	Stack<Stack<Integer>> controlStacksT = new Stack<Stack<Integer>>();
	Stack<Stack<Integer>> controlStacksF = new Stack<Stack<Integer>>();
	Stack<Stack<Integer>> controlStacksB = new Stack<Stack<Integer>>();
	Stack<Integer> breakJumps = new Stack<Integer>();
	class CodeBuff {
		 private  ArrayList<Byte> buff = new ArrayList<Byte>();
		 public void put (int x)  {
				buff.add((byte)x);
		 }
	    public void put2 (int x) { put(x>>8); put(x);  }
	    public  void put4 (int x) { put2(x>>16); put2(x); }

	    public  void loadConst (int n) {
		    if (0<=n&&n<=5) put (Code.const_n+n);
		    else if (n==-1) put (Code.const_m1);
		    else  { put (Code.const_); put4 (n); }
  		}
  		public ArrayList<Byte> getBuff() {
  			return buff;
  		}
  		public void store(Obj o) {
		  	switch (o.getKind()) {

		  	  case Obj.Con:
		  	  	if (o.getLevel()==0) { // global variable 
		            put(Code.putstatic); put2(o.getAdr()); 
		            break;
		        }
		        // local variable 
		        if (0 <= o.getAdr() && o.getAdr() <= 3) 
		            put(Code.store_n + o.getAdr());
		        else { 
		        	  put(Code.store); put(o.getAdr()); 
		        } 
		        break;
		      case Obj.Var:
		        if (o.getLevel()==0) { // global variable 
		            put(Code.putstatic); put2(o.getAdr()); 
		            break;
		        }
		        // local variable 
		        if (0 <= o.getAdr() && o.getAdr() <= 3) 
		            put(Code.store_n + o.getAdr());
		        else { 
		        	  put(Code.store); put(o.getAdr()); 
		        } 
		        break;

		      case Obj.Fld:
		        put(Code.putfield); put2(o.getAdr()); 
		        break;
		        
		      case Obj.Elem:
		        if (o.getType().getKind() == Struct.Char) put(Code.bastore);
		        else put(Code.astore); 
		        break;
		  	}
  		}
	}

	CodeBuff codeBuff = new CodeBuff();

	void redefineMethod() {
		currentMethod.getLocalSymbols().clear();
	}

	List<Byte> MethodTable = new ArrayList<Byte>(); 
	void addWordToStaticData (int value, int address){ 
	  MethodTable.add(new Byte((byte)Code.const_)); 
	  MethodTable.add(new Byte( (byte)( (value>>16)>>8 ) ) ); 
	  MethodTable.add(new Byte((byte)(value>>16))); 
	  MethodTable.add(new Byte((byte)(value>>8))); 
	  MethodTable.add(new Byte((byte)value)); 
	  MethodTable.add(new Byte((byte)Code.putstatic)); 
	  MethodTable.add(new Byte((byte)(address>>8))); 
	  MethodTable.add(new Byte((byte)address)); 
	 } 
	 void addNameTerminator() { 
	  addWordToStaticData(-1, Code.dataSize++); 
	 } 
	 void addTableTerminator() { 
	  addWordToStaticData(-2, Code.dataSize++); 
	 } 
	 void addFunctionAddress(int functionAddress) { 
	  addWordToStaticData(functionAddress, Code.dataSize++); 
	 } 
 	void addFunctionEntry(String name, int functionAddressInCodeBuffer) { 
	  for (int j=0; j<name.length(); j++)  { 
	   addWordToStaticData((int)(name.charAt(j)), Code.dataSize++);  
	  } 
	  addNameTerminator();   addFunctionAddress(functionAddressInCodeBuffer); 
 	} 

 	void resetDesignatorInExprCond() {
 		if (!designatorInExprStack.empty()) {
 			designatorInExpr = designatorInExprStack.pop();
 		}
 		else
 			designatorInExpr = false;
 	}
 	void setDesignatorInExprCond() {
 		designatorInExprStack.push(designatorInExpr);
 	}


  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Mulop ::= MOD 
            {
              Integer RESULT =null;
		
	RESULT = 2;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Mulop ::= DIV 
            {
              Integer RESULT =null;
		
	RESULT = 1;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Mulop ::= TIMES 
            {
              Integer RESULT =null;
		
	RESULT = 0;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Addop ::= MINUS 
            {
              Integer RESULT =null;
		
   			 RESULT = 1;
   		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Addop ::= PLUS 
            {
              Integer RESULT =null;
		
   			 RESULT = 0;
   		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Relop ::= LTE 
            {
              Integer RESULT =null;
		
   			 RESULT = 3;
   		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Relop ::= LT 
            {
              Integer RESULT =null;
		
   			 RESULT = 2;
   		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Relop ::= GTE 
            {
              Integer RESULT =null;
		
   			 RESULT = 5;
   		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Relop ::= GT 
            {
              Integer RESULT =null;
		
   			 RESULT = 4;
   		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Relop ::= NOT_EQUAL 
            {
              Integer RESULT =null;
		
   			 RESULT = 1;
   		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Relop ::= IS_EQUAL 
            {
              Integer RESULT =null;
		
   			 RESULT = 0;
   		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // IdentRef ::= LSQUARE error RSQUARE 
            {
              Obj RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
				designatorIsArrElem = true;
				parser.report_error("Izvrsen oporavak do ] u liniji "+lleft+" pri indeksiranju niza.",null);
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentRef",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // IdentRef ::= LSQUARE Expr RSQUARE 
            {
              Obj RESULT =null;
		int dummyleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dummyright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object dummy = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				 // generisanje koda 
				 if (e != Tab.intType) {
				 	parser.report_error("Greska u liniji "+eleft+": indeks niza mora biti tipa int", null);
				 }
                 
                Obj temp = null;
				if (designatorInExpr) {
					temp = designatorStack.pop();
					curr_ident = designatorStack.peek();
					designatorStack.push(temp);
				}
				else {
					curr_ident = designatorStack.peek();
				}
                 // dalje prenosimo element niza
                // curr_ident = designatorInExpr ? previosDesignator : currentDesignator;
                Struct s = curr_ident.getType().getElemType();
                if (s==null) {
                	s = Tab.noType;
                }
                 RESULT=new Obj(Obj.Elem, "", s);
				 designatorIsArrElem = true;
				if (designatorInExpr) {
					designatorStack.pop();
					//designatorInExpr = false;
					resetDesignatorInExprCond();
				}
				 if (curr_ident.getType().getKind()!=Struct.Array) 
                              parser.report_error("Semanticka greska u liniji "+dummyleft+": Ocekivan niz na mestu identifikatora "+curr_ident.getName(),null);
				
				
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentRef",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // IdentRef ::= DOT IDENT 
            {
              Obj RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if (curr_ident.getType().getKind() == Struct.Class) {
					Obj obj = Tab.noObj;
					Collection<Obj> polja = curr_ident.getType().getMembers();
   					boolean pronasao = false;
   					for(Obj polje: polja){
   						if(ident.equals(polje.getName())){
   							pronasao = true;
   							obj = polje;
   							/*if (obj.getType()==Tab.find("string").getType() && obj.getKind()==Obj.Con) {
								obj = Tab.find(name+"__$#_");
							}*/
   							break;
   						}
   					}
   					if (curr_ident.getName().equals("this") && classDef) {
   						//TODO, napravi funckiju za proveravanje da li je trazeni simbol u local scopu
   						/*obj = Tab.noObj;
   						Collection<Obj> col = Tab.currentScope().getLocals().symbols();
   						for (Obj c: col) {
   							if (c.getName().equals(ident)) {
   								pronasao = true;
   								obj = c;
   								break;
   							}
   						}*/
						obj = Tab.find(ident);
						/*if (obj.getType()==Tab.find("string").getType() && obj.getKind()==Obj.Con) {
								obj = Tab.find(name+"__$#_");
						}*/

						/*boolean uslov;
						if (obj.getKind()==Obj.Meth) {
							//proveri tip this parametra
						}
						else {
							uslov = obj.getLevel()==currentLevel-1;
						}*/
						pronasao = obj != Tab.noObj;// && uslov;
					}
   					if(!pronasao){
   						parser.report_error(curr_ident.getName(), identleft, "pogresni tipovi u izrazu IDENT[.IDENT]");
   					}
   					else {
						previosDesignator = currentDesignator;
						currentDesignator = obj;
						//if (designatorInExpr) {
							Obj t = designatorStack.pop();
							if (t.getType()==Tab.find("string").getType() && t.getKind()==Obj.Con) {
								t = Tab.find(ident+"__$#_");
							}
							Code.load(t);
							//resetDesignatorInExprCond();
						//}
						designatorStack.push(obj);
						if (obj == Tab.noObj) {
							parser.report_error("Semanticka greska na liniji "+identleft+": ime "+ident+" nije deklarisano.", null);
						}
						RESULT = obj;
						curr_ident = obj;
						designatorIsArrElem = false;

					}
				}
				else {
					parser.report_error("Semanticka greska u liniji "+identleft+": "+curr_ident.getName()+" mora biti promenljiva klasnog tipa.",null);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentRef",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // IdentList ::= 
            {
              Obj RESULT =null;
		 RESULT = Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // IdentList ::= IdentList IdentRef 
            {
              Obj RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj il = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int irleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int irright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj ir = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
	if (ir != null)
		RESULT = ir;
	else
		RESULT = il;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Designator ::= IDENT NT$6 IdentList 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj il = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (il != Tab.noObj) {
		RESULT = il;
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$6 ::= 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
	
	previosDesignator = currentDesignator;

	Obj obj = currentDesignator = Tab.find(name);
	/*if (obj.getType()==Tab.find("string").getType() && obj.getKind()==Obj.Con) {
		obj = currentDesignator = Tab.find(name+"__$#_");
	}*/
	if (obj == Tab.noObj) {
		parser.report_error(name, nameleft, "nije deklarisano");
	}
	else
		parser.report_info(name, nameleft, obj);
	designatorStack.push(obj);
	RESULT = obj;
	curr_ident = obj;
	designatorIsArrElem = false;
	if (obj.getType().getKind()==Struct.Array && obj.getType() != Tab.find("string").getType()) {
		Code.load(curr_ident);
	}


              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Unmatched ::= WhileLoop LPAREN error RPAREN Unmatched 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 tJumpAdrs = controlStacksT.pop(); breakJumps = controlStacksB.pop();
					fJumpAdrs =controlStacksF.pop(); insideWhile = false; parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" unutar izraza u while konstrukciji.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Unmatched ::= WhileLoop LPAREN Condition RPAREN Unmatched 
            {
              Object RESULT =null;
		 

					Code.putJump(tops.pop());
					while (!breakJumps.empty()) {
						Code.fixup(breakJumps.pop());
					}
					breakJumps = controlStacksB.pop();
					Code.fixup(tJumpAdrs.pop());
					insideWhile = false; 
					tJumpAdrs = controlStacksT.pop();
					fJumpAdrs =controlStacksF.pop();
			 	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Unmatched ::= IfLexem LPAREN error RPAREN Matched ElseLexem Unmatched 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 tJumpAdrs = controlStacksT.pop();
					fJumpAdrs =controlStacksF.pop(); parser.report_error("Izvrsen oporavak do ) u liniji "+lleft+" unutar izraza u if konstrukciji.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Unmatched ::= IfLexem LPAREN Condition RPAREN Matched ElseLexem Unmatched 
            {
              Object RESULT =null;
		 
			 		Code.fixup(tJumpAdrs.pop());
			 		tJumpAdrs = controlStacksT.pop();
					fJumpAdrs =controlStacksF.pop();  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Unmatched ::= IfLexem LPAREN error RPAREN Statement 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 tJumpAdrs = controlStacksT.pop();
					fJumpAdrs =controlStacksF.pop(); parser.report_error("Izvrsen oporavak do ) u liniji "+lleft+" unutar izraza u if konstrukciji.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Unmatched ::= IfLexem LPAREN Condition RPAREN Statement 
            {
              Object RESULT =null;
		 
					Code.fixup(tJumpAdrs.pop());
					tJumpAdrs = controlStacksT.pop();
					fJumpAdrs =controlStacksF.pop(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DesignatorsFollowUp ::= DEC 
            {
              Object RESULT =null;
		
	Obj dsgn = designatorStack.peek();
	Code.load(dsgn);
	Code.put(Code.const_n+1);
	Code.put(Code.sub);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorsFollowUp",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DesignatorsFollowUp ::= INC 
            {
              Object RESULT =null;
		
	Obj dsgn = designatorStack.peek();
	Code.load(dsgn);
	Code.put(Code.const_n+1);
	Code.put(Code.add);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorsFollowUp",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Factor ::= LPAREN Expr RPAREN 
            {
              Struct RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
				RESULT = e;
				if (designatorInExpr) {
					designatorStack.pop();
					//designatorInExpr = false;
					resetDesignatorInExprCond();
				}
				setDesignatorInExprCond();
                designatorInExpr = false; 
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Factor ::= NEW Type LSQUARE Expr RSQUARE 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if (e.getKind() != Struct.Int) {
					parser.report_error(parser.getTypeName(e), eleft, "nevalidan tip expr u operatoru NEW[expr]");
				}
				Code.put(Code.newarray);
                if ( t == Tab.charType ) 
                	Code.put(0); 
                else 
                	Code.put(1);
                RESULT=new Struct(Struct.Array, t);
               if (designatorInExpr) {
					designatorStack.pop();
					//designatorInExpr = false;
					resetDesignatorInExprCond();
				}
				setDesignatorInExprCond();
                designatorInExpr = false; 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Factor ::= NEW Type 
            {
              Struct RESULT =null;
		int tip1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tip1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct tip1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				parser.newStatementCount++;
	   			 if (tip1.getKind() != Struct.Class){
	   				 parser.report_error(parser.getTypeName(tip1), tip1left, "nevalidan tip u operatoru NEW");
	   			 }
	   			 RESULT = tip1; setDesignatorInExprCond();
                designatorInExpr = false; 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Factor ::= STRCONST 
            {
              Struct RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
	Obj obj = Tab.find("string");
	RESULT = obj.getType(); 
	setDesignatorInExprCond();
    designatorInExpr = false;
    int sz = s.length()-2;
    char[] csTemp = new char[sz+2];
    csTemp = s.toCharArray();

    char[] cs = new char[sz+1];
    for (int i=0; i<cs.length; i++) {
    	cs[i] = csTemp[i+1];
    }
    cs[sz] = '\0';
    
    Code.put(Code.enter);
    Code.put(0);
    Code.put(1);
    Code.loadConst(sz+1);
    Code.put(Code.newarray);
    Code.put(0);
    Code.put(Code.store_n);//addr of array
    
    int i = 0;
    for (char c: cs) {

    	Code.put(Code.load_n);
	    Code.loadConst(i);
	    Code.loadConst(cs[i]);
	    Code.put(Code.bastore);
	    i++;
    }
    Code.put(Code.load_n);
    Code.put(Code.exit);
    //Obj o = new Obj(Obj.Con, "", obj.getType());
   // o.setAdr(adr);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Factor ::= BOOLCONST 
            {
              Struct RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				Struct boolType = RESULT = Tab.find("bool").getType(); 
				setDesignatorInExprCond();
                designatorInExpr = false; 
                Obj o = new Obj(Obj.Con, "", boolType);
                boolean bVal = b.booleanValue();
                if (bVal) {
                	o.setAdr(1);
                }
                else {
                	o.setAdr(0);
                }
                Code.load(o);
                
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Factor ::= CHARCONST 
            {
              Struct RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				RESULT = Tab.charType;
				Obj o = new Obj(Obj.Con, "", Tab.charType);
                o.setAdr(c.charValue()); 
                Code.load(o);
                setDesignatorInExprCond();
                designatorInExpr = false; 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Factor ::= NUMBER 
            {
              Struct RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				
				/*Obj temp = Tab.find(""+i.intValue());
				if (temp == Tab.noObj) {
					Obj c = Tab.insert(Obj.Con, ""+i.intValue(), Tab.intType);
					c.setAdr(i.intValue());
					Code.load(c);
				}
				else {
					Code.load(temp);
				}*/
				Obj c = new Obj(Obj.Con, "", Tab.intType);
                c.setAdr(i.intValue()); 
                Code.load(c); 
				RESULT = Tab.intType;
				setDesignatorInExprCond();
                designatorInExpr = false; 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Factor ::= Designator 
            {
              Struct RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = d.getType();
		     if (d.getType()==Tab.find("string").getType() && d.getKind()==Obj.Con) 
		     	Code.load(Tab.find(d.getName()+"__$#_"));
		     else 
		     	Code.load(d); //designatorInExpr = true;
		   	setDesignatorInExprCond();
		   	designatorInExpr = true;
		   	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Factor ::= Designator LPAREN ActParams RPAREN 
            {
              Struct RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
	if (Obj.Meth == func.getKind()) {
		parser.report_info("Pronadjen poziv funkcije "+func.getName()+" na liniji "+funcleft, null);
		RESULT = func.getType();
	}
	else {
		parser.report_error("Semanticka greska na liniji "+funcleft+": ime "+func.getName()+" nije funkcija.", null);
		RESULT = Tab.noType;
	}
	lockFunctionDesignator = false;
	if (isMain) {
		parser.funcCallsInMain++;
	}
	if (func.getType() == Tab.noType) {
		parser.report_error(func.getName(), funcleft, "ne moze se koristiti u izrazima jer nema povratnu vrednost");
	}
	int destAdr = func.getAdr() - Code.pc;
	Code.put(Code.call);
	Code.put2(destAdr);
	setDesignatorInExprCond();
	designatorInExpr = true;
	//designatorInExpr = true;
	numOfActPars = 0;
	functionDesignator = null;


              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Term ::= Term Mulop Factor 
            {
              Struct RESULT =null;
		int tip1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tip1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct tip1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tip2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tip2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct tip2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
   		 if( tip1.getKind() != Struct.Int || tip2.getKind() != Struct.Int ){
   			parser.report_error(parser.getTypeName(tip1), tip1left, "pogresni tipovi u operaciji, dozvoljeno je koristiti samo operande tipa int");
   		 }
   		 RESULT = tip1;

   		 if (!designatorInExprStack.empty()) {
   		 	boolean e1des = false;
   		 	boolean e2des = designatorInExprStack.pop();
   		 	if (!designatorInExprStack.empty())
   		    	e1des = designatorInExprStack.pop();
   		 	if (e2des || e1des) {
   		 		designatorInExpr = true;
   		 		setDesignatorInExprCond();  		 		
   		 	}
   		 }
   		switch(op) {
   			case 0: Code.put(Code.mul);
   					break;
   			case 1: Code.put(Code.div);
   					break;
   			case 2: Code.put(Code.rem);
   					break;
   		}
   	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Term ::= Factor 
            {
              Struct RESULT =null;
		int tip1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tip1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct tip1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
   		 RESULT = tip1;
 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Sign ::= 
            {
              Integer RESULT =null;
		
   			 RESULT = 1;
   		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Sign",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Sign ::= MINUS 
            {
              Integer RESULT =null;
		
   			 RESULT = 0;
   		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Sign",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= Expr Addop Term 
            {
              Struct RESULT =null;
		int tip1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tip1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct tip1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int znakleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int znakright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer znak = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tip2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tip2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct tip2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		if (znak == 0){
   			 if( (tip1.getKind() == Struct.Int && tip2.getKind() == Struct.Int) || (tip1 == Tab.find("string").getType() && tip2 == Tab.find("string").getType() ) ){
   			 }
   			 else{
   				 parser.report_error(parser.getTypeName(tip1), tip1left, "pogresni tipovi u operaciji sabiranja");
   			 }
   		 }
   		 else{
   			 if( tip1.getKind() != Struct.Int || tip2.getKind() != Struct.Int ){
   				 parser.report_error(parser.getTypeName(tip1), tip1left, "pogresni tipovi u operaciji oduzimanja");
   			 }
   		 }
   		 RESULT = tip1;
   		 if (!designatorInExprStack.empty()) {
   		 	boolean e1des = false;
   		 	boolean e2des = designatorInExprStack.pop();
   		 	if (!designatorInExprStack.empty())
   		    	e1des = designatorInExprStack.pop();
   		 	if (e2des || e1des) {
   		 		designatorInExpr = true;
   		 		setDesignatorInExprCond();  		 		
   		 	}
   		 }
   		 if (tip1 == Tab.find("string").getType() && tip2 == Tab.find("string").getType() && znak == 0) {
   		 	Code.put(Code.enter);
   		 	Code.put(0);
   		 	Code.put(6);

   		 	
   		 	Code.put(Code.store_n);//adr
   		 	Code.put(Code.store_3);//adr1
   		 	//Code.put(Code.load_3);
   		 	Code.put(Code.load_n);
   		 	Code.put(Code.store);//adr2
   		 	Code.put(4);
   		 	//Code.put(Code.load);
   		 	//Code.put(4);

   		 	for (int i=0; i<2; i++, Code.put(Code.load_3), Code.put(Code.store_n), Code.loadConst(0), Code.put(Code.store), Code.put(5)) {
   		 		Code.put(Code.load_n);
   		 		Code.put(Code.load);//count
   		 		Code.put(5);
   		 		Code.put(Code.baload);
   		 		Code.put(Code.store_1);//save value

   		 		Code.put(Code.load);
   		 		Code.put(5);
   		 		Code.loadConst(1);
   		 		Code.put(Code.add);
   		 		Code.put(Code.store);//save incremented count
   		 		Code.put(5);

   		 		Code.put(Code.load_2);//whole count
   		 		Code.loadConst(1);
   		 		Code.put(Code.add);
   		 		Code.put(Code.store_2);

   		 		Code.put(Code.load_1);
   		 		Code.loadConst('\0');
   		 		Code.put(Code.jcc+Code.ne);
   		 		Code.put2(-17);
   		 	}

   		 	Code.put(Code.load_2);//new count
   		 	Code.loadConst(-1);
   		 	Code.put(Code.add);
   		 	Code.put(Code.store_2);


   		 	Code.put(Code.load_2);
   		 	Code.put(Code.newarray);
   		 	Code.put(0);
   		 	Code.put(Code.store);//dst array
   		 	Code.put(5);
   		 	//copy chars into new array
   		 	Code.loadConst(0);//src index
   		 	Code.put(Code.store_1);//src index
   		 	Code.loadConst(0);//dst index
   		 	Code.put(Code.store_2);//dst index
   		 	Code.put(Code.load_3);//src array  YYY
   		 	Code.put(Code.load_1);
   		 	Code.put(Code.baload);
   		 	Code.put(Code.store_n);

   		 	Code.put(Code.load_n);
   		 	Code.loadConst('\0');
   		 	Code.put(Code.jcc+Code.eq);
   		 	Code.put2(19);//to XXX

   		 	Code.put(Code.load);
   		 	Code.put(5);
   		 	Code.put(Code.load_2);
   		 	Code.put(Code.load_n);
   		 	Code.put(Code.bastore);

   		 	Code.put(Code.load_2);
   		 	Code.loadConst(1);
   		 	Code.put(Code.add);
   		 	Code.put(Code.store_2);

   		 	Code.put(Code.load_1);
   		 	Code.loadConst(1);
   		 	Code.put(Code.add);
   		 	Code.put(Code.store_1);

   		 	Code.put(Code.jmp);
   		 	Code.put2(-22); //to YYY
   		 	///XXX, second string copy
   		 	Code.loadConst(0);//src index
   		 	Code.put(Code.store_1);//src index
   		 	Code.put(Code.load);//src array WWW
   		 	Code.put(4);
   		 	Code.put(Code.load_1);
   		 	Code.put(Code.baload);
   		 	Code.put(Code.store_n);

   		 	Code.put(Code.load);
   		 	Code.put(5);
   		 	Code.put(Code.load_2);
   		 	Code.put(Code.load_n);
   		 	Code.put(Code.bastore);

   		 	Code.put(Code.load_2);
   		 	Code.loadConst(1);
   		 	Code.put(Code.add);
   		 	Code.put(Code.store_2);

   		 	Code.put(Code.load_1);
   		 	Code.loadConst(1);
   		 	Code.put(Code.add);
   		 	Code.put(Code.store_1);

   		 	Code.put(Code.load_n);
   		 	Code.loadConst('\0');
   		 	Code.put(Code.jcc+Code.eq);
   		 	Code.put2(6);//to ZZZ

   		 	Code.put(Code.jmp);
   		 	Code.put2(-23);//to WWW
   		 	//ZZZ, end of copying
   		 	Code.put(Code.load);
   		 	Code.put(5);

   		 	Code.put(Code.exit);
   		 }
   		 else {
	   		 switch(znak) {
	   			case 0: Code.put(Code.add);
	   					break;
	   			case 1: Code.put(Code.sub);
	   					break;
	   		}
   		}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= Sign Term 
            {
              Struct RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer minus = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tip1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tip1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct tip1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		  
		 if (minus == 0){
   	     	 if (tip1.getKind() != Struct.Int){
   	     		 parser.report_error(parser.getTypeName(tip1), tip1left, "pogresan tip pri operaciji negacije");
   	     	 }
   	      }
   	      RESULT = tip1;
   	      if (minus==0) {
   	      	Code.put(Code.neg);
   	      }


              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CondFact ::= Expr 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					if (designatorInExpr) {
						designatorStack.pop();
						//designatorInExpr = false;
						resetDesignatorInExprCond();
					}
					if (e.getKind()!=Struct.Bool) {
						parser.report_error(parser.getTypeName(e), eleft, "Uslov mora biti tipa bool");
					}
					Code.put(Code.const_n);
					RESULT = 1; //Uporedi da li je ono sto je na steku (0 ili 1 za false ili true) jednako 1, ako jeste, uslov je tacan
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CondFact ::= Expr Relop Expr 
            {
              Integer RESULT =null;
		int tip1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tip1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct tip1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int uporedileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int uporediright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer uporedi = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tip2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tip2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct tip2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
   			 if (!tip1.compatibleWith(tip2)){
   				 parser.report_error(parser.getTypeName(tip1), tip1left, "nekompatiblini tipovi");
   			 }
   			 else{
   				 if (tip1.getKind() == Struct.Array || tip2.getKind() == Struct.Class){
   					 if (uporedi > 1){
   						 parser.report_error(parser.getTypeName(tip1), tip1left, "uz promenljive tipa klase ili niza se mogu koristiti samo != i ==");
   					 }
   				 }
   			 }
   			if (designatorInExpr) {
				designatorStack.pop();
				//designatorInExpr = false;
				resetDesignatorInExprCond();
			}
			RESULT = uporedi;
			//TODO
			/*if (!designatorInExprStack.empty()) {
   		 		boolean e2des = designatorInExprStack.pop();
   		 		boolean e1des = designatorInExprStack.pop();
   		 		if (e2des || e1des) {
   		 		designatorInExpr = true;
   		 		setDesignatorInExprCond();  		 		
   		 		}
   		 	}*/
   		 	if (tip1 == Tab.find("string").getType()) {
   		 		/*skini adrese sa steka, stavi 0 na stek, uporedi stringove, i ako su jednaki, stavi 0, u suprotnom, stavi jedan*/
   		 		Code.put(Code.enter);
   		 		Code.put(0);
   		 		Code.put(6);

   		 		Code.put(Code.store_n);//adr1
   		 		Code.put(Code.store_1);//adr2
   		 		Code.loadConst(0);
   		 		
   		 		Code.loadConst(0);
   		 		Code.put(Code.store_2);//count1
   		 		Code.loadConst(0);
   		 		Code.put(Code.store_3);//count2

   		 		Code.put(Code.load_n);//YYY
   		 		Code.put(Code.load_2);
   		 		Code.put(Code.baload);
   		 		Code.put(Code.store);
   		 		Code.put(4);
   		 		Code.put(Code.load);
   		 		Code.put(4);
   		 		Code.put(Code.load_1);
   		 		Code.put(Code.load_3);
   		 		Code.put(Code.baload);
   		 		Code.put(Code.store);
   		 		Code.put(5);
   		 		Code.put(Code.load);
   		 		Code.put(5);

   		 		Code.put(Code.load_2);
   		 		Code.loadConst(1);
   		 		Code.put(Code.add);
   		 		Code.put(Code.store_2);

   		 		Code.put(Code.load_3);
   		 		Code.loadConst(1);
   		 		Code.put(Code.add);
   		 		Code.put(Code.store_3);

   		 		Code.put(Code.jcc+Code.ne);
   		 		Code.put2(28);//to XXX

   		 		Code.loadConst('\0');
   		 		Code.put(Code.load);
   		 		Code.put(4);
   		 		Code.put(Code.sub);
   		 		Code.put(Code.load);
   		 		Code.put(5);
   		 		Code.put(Code.jcc+Code.eq);
   		 		Code.put2(23);//to ZZZ
   		 		Code.put(Code.load);

   		 		Code.loadConst('\0');
   		 		Code.put(Code.load);
   		 		Code.put(4);
   		 		Code.put(Code.jcc+Code.eq);
   		 		Code.put2(12); //to XXX
   		 		Code.loadConst('\0');
   		 		Code.put(Code.load);
   		 		Code.put(5);
   		 		Code.put(Code.jcc+Code.eq);
   		 		Code.put2(6); //to XXX

   		 		Code.put(Code.jmp);
   		 		Code.put2(-47); //to YYY

   		 		//XXX
   		 		Code.loadConst(1);
   		 		Code.put(Code.jmp);
   		 		Code.put2(4); //to WWW
   		 		//ZZZ
   		 		Code.loadConst(0);
   		 		//WWW
   		 		Code.put(Code.exit);
   		 	}
   		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CondTerm ::= CondFact 
            {
              Integer RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer cf = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = cf;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CondTerm ::= CondTerm NT$5 AND CondFact 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int ctleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Integer ct = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer cf = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
			
	RESULT = cf;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$5 ::= 
            {
              Integer RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer ct = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

	Code.putFalseJump(ct, 0);
	fJumpAdrs.push(Code.pc-2);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Condition ::= CondTerm 
            {
              Integer RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer ct = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					
					
					Code.putFalseJump(Code.inverse[ct], 0); //trueJump
					tJumpAdrs.push(Code.pc-2);

					while (!fJumpAdrs.empty()) {
						Code.fixup(fJumpAdrs.pop());
					}
					Code.putJump(0);
					while (!tJumpAdrs.empty()) {
						Code.fixup(tJumpAdrs.pop());
					}
					tJumpAdrs.push(Code.pc-2);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Condition ::= CondTerm NT$4 OR Condition 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int ctleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Integer ct = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$4 ::= 
            {
              Integer RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer ct = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

	//Code.putJump(0);
	Code.putFalseJump(Code.inverse[ct], 0); //trueJump
	tJumpAdrs.push(Code.pc-2);

	while (!fJumpAdrs.empty()) {
		Code.fixup(fJumpAdrs.pop());
	}
	
	//adrs.push(Code.pc-2);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ActPar ::= Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		

	//if (!lockFunctionDesignator) {
		//lockFunctionDesignator = true;
		Obj temp = null;
		if (designatorInExpr) {
			temp = designatorStack.pop();
			functionDesignator = designatorStack.peek();
			designatorStack.push(temp);
		}
		else {
			functionDesignator = designatorStack.peek();
		}
	//}

	Obj obj = null;
	
	int numOfFormPars = functionDesignator.getLevel();//functionDesignator.getFpPos();
	int i=0;
	boolean countedThis = false;
	Collection<Obj> col = functionDesignator.getLocalSymbols();
	for (Obj o: col) {
		if (i<numOfActPars) {
			i++;
			continue;
		}
		if (o.getName().equals("this")) {
				numOfActPars++;
				countedThis = true;
		}
		if (i==numOfActPars) {
			obj = o;
			break;
		}
		i++;
	}
	if (methodDef && obj == null) {
		if (Tab.currentScope().getLocals()!=null) {
			Collection<Obj> col2 = Tab.currentScope().getLocals().symbols();
			for (Obj o: col2) {
				if (i<numOfActPars) {
					i++;
					continue;
				}
				if (o.getName().equals("this") && !countedThis) {
						numOfActPars++;
				}
				if (i==numOfActPars) {
					obj = o;
					break;
				}
				i++;
			}
		}
	}
	if (numOfActPars >= numOfFormPars) {
		parser.report_error("Greska na liniji "+eleft+" vise stvarnih od formalnih parametara", null);
	}
	else if (!e.assignableTo(obj.getType())) {
	    parser.report_error(obj.getName(), eleft, "nekompatibilni tipovi stvarnih sa formalnim parametrima");
	}
	else {
    	parser.report_info(obj.getName(), eleft, obj);
	}
	numOfActPars++;
	if (designatorInExpr) {
		designatorStack.pop();
		//designatorInExpr = false;
		resetDesignatorInExprCond();
	}
	//Code.put(Code.pop); //TODO: //stvarni parametri nisu implementirani, pa da ne ostanu na steku

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPar",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ActPars ::= ActPar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ActPars ::= ActPars COMMA ActPar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ActParams ::= 
            {
              Object RESULT =null;
		
		
		int numOfFormPars;
		boolean containsThis = false;
		Obj func = designatorStack.peek();
		if (functionDesignator==null) {
			numOfFormPars = func.getLevel();//func.getFpPos();
			Collection<Obj> col = func.getLocalSymbols();
			for (Obj o: col) {
				if (o.getName().equals("this")) {
					containsThis = true;;
				}
			}
		}
		else {
			numOfFormPars = func.getLevel();//functionDesignator.getFpPos();
			System.err.println("Greska? TODO");
		}
		if (0 != numOfFormPars && !(containsThis && numOfFormPars==1)) {
			parser.report_error("Greska : netacan broj stvarnih parametara u pozivu funkcije", null);
		}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParams",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ActParams ::= ActPars 
            {
              Object RESULT =null;
		int dummyleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int dummyright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object dummy = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		//int numOfFormPars = functionDesignator.getFpPos();
		int numOfFormPars = functionDesignator.getLevel();
		if (numOfFormPars != numOfActPars) {
			parser.report_error("Greska : netacan broj stvarnih parametara u pozivu funkcije u liniji "+dummyleft, null);
		}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParams",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OptNumbers ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptNumbers",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OptNumbers ::= COMMA NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptNumbers",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IfLexem ::= IF 
            {
              Object RESULT =null;
		
	controlStacksT.push(tJumpAdrs);
	controlStacksF.push(tJumpAdrs);
	tJumpAdrs = new Stack<Integer>();
	fJumpAdrs = new Stack<Integer>();

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfLexem",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ElseLexem ::= ELSE 
            {
              Object RESULT =null;
		
	Code.putJump(0);
	Code.fixup(tJumpAdrs.pop());
	tJumpAdrs.push(Code.pc-2);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ElseLexem",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // WhileLoop ::= WHILE 
            {
              Object RESULT =null;
		
	insideWhile = true;
	tops.push(Code.pc);
	controlStacksT.push(tJumpAdrs);
	controlStacksF.push(tJumpAdrs);
	controlStacksB.push(breakJumps);
	breakJumps = new Stack<Integer>();
	tJumpAdrs = new Stack<Integer>();
	fJumpAdrs = new Stack<Integer>();

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("WhileLoop",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Matched ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
		
						parser.statementBlocks++;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Matched ::= PRINT LPAREN Expr OptNumbers RPAREN SEMI 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct dest = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
	if (dest != Tab.intType && dest != Tab.charType && dest != Tab.find("bool").getType() && dest != Tab.find("string").getType()) {
		parser.report_error("Greska na liniji "+destleft+": u pozivu read(Expr, [, number]) expr mora biti tipa int, char, bool ili string", null);
	}
	if (dest == Tab.intType) {
		Code.loadConst(5);
		Code.put(Code.print);
	}
	if (dest == Tab.charType) {
		Code.loadConst(1);
		Code.put(Code.bprint);
	}
	if (dest == Tab.find("bool").getType()) {
		Code.loadConst(5);
		Code.put(Code.print);
	}
	if (dest == Tab.find("string").getType()) {
		Code.put(Code.enter);
		Code.put(0);
		Code.put(3);

		Code.put(Code.store_2);//addr of array
		Code.put(Code.load_2); //YYY
		Code.put(Code.load_1);//count;
		Code.put(Code.baload);
		Code.put(Code.store_n);//char
		Code.put(Code.load_n);
		Code.loadConst('\0');
		Code.put(Code.jcc+Code.eq);
		Code.put2(13); //to XXX
		Code.put(Code.load_n);
		Code.loadConst(1);
		Code.put(Code.bprint);
		Code.put(Code.load_1);
		Code.loadConst(1);
		Code.put(Code.add);
		Code.put(Code.store_1);//inc count
		Code.put(Code.jmp);
		Code.put2(-16); //to YYY
		//XXX
		Code.put(Code.exit);
	}
	if (designatorInExpr) {
		designatorStack.pop();
		//designatorInExpr = false;
		resetDesignatorInExprCond();
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Matched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
	boolean g = false;
	if (dest.getType() != Tab.intType && dest.getType() != Tab.charType && dest.getType() != Tab.find("bool").getType() && dest.getType() != Tab.find("string").getType()) {
		g = true; parser.report_error(dest.getName(), destleft, "u pozivu read(Designator) designator mora biti tipa int, char, bool ili string");
	}
	if (dest.getKind() != Obj.Var && dest.getKind() != Obj.Fld && dest.getKind() != Obj.Elem) {
		g= true; parser.report_error(parser.getTypeName(dest.getType()), destleft, "designator mora biti promenljiva, element niza ili polje unutar objekta");
	}
	/*if (dest.getType().getKind()==Struct.Array && !designatorIsArrElem) {
		parser.report_error(parser.getTypeName(dest.getType()), destleft, "designator mora biti promenljiva, element niza ili polje unutar objekta");
	}*/
	if (!g) {
		if (dest.getType() == Tab.find("string").getType()) {
			Code.put(Code.enter);
			Code.put(0);
			Code.put(3);


			Code.put(Code.bread);//read one char  : XXX
			Code.put(Code.store_n);///read one char
			Code.put(Code.load_1);//inc count
			Code.loadConst(1);
			Code.put(Code.add);
			Code.put(Code.store_1);///inc count
			Code.put(Code.load_n);//store char on stack
			Code.put(Code.load_n);//compare with '\n'
			Code.loadConst(13);///
			Code.put(Code.jcc+Code.ne);//jump up if not equal
			Code.put2(-13); //to XXX
			
			Code.put(Code.pop);
			Code.put(Code.load_1);//allocate array
			Code.put(Code.newarray);
			Code.put(0);
			Code.put(Code.store_2); //address of array

			Code.put(Code.load_1);
			Code.loadConst(1);
			Code.put(Code.sub);
			Code.put(Code.store_1);
			//put '\0'
			Code.put(Code.load_2);
			Code.put(Code.load_1);
			Code.loadConst('\0');
			Code.put(Code.bastore);
			Code.put(Code.load_1);
			Code.loadConst(1);
			Code.put(Code.sub);
			Code.put(Code.store_1);
			Code.put(Code.load_1);
			Code.loadConst(0);
			Code.put(Code.jcc+Code.eq);//no elements, only '\0'
			Code.put2(17); //to ZZZ //TODO: odrediti koliko je do ZZZ

			Code.put(Code.store_n);//take char from top of the stack : YYY
			Code.put(Code.load_2);//put adr
			Code.put(Code.load_1);//put offset
			Code.put(Code.load_n);//put val = char
			Code.put(Code.bastore);
			Code.put(Code.load_1);//dec count
			Code.loadConst(1);
			Code.put(Code.sub);
			Code.put(Code.store_1);
			Code.put(Code.load_1);
			Code.loadConst(-1);
			Code.put(Code.jcc+Code.ne);//do it again if there are more elements
			Code.put2(-11); //to YYY	
			
			Code.put(Code.load_2);//return address of array  : ZZZ

			Code.put(Code.exit);

			Code.store(dest);
			
		}
		else if (dest.getType() == Tab.find("bool").getType()) {
			Code.put(Code.read);
			Code.store(dest);
		}
		else if (dest.getType() == Tab.charType) {
			Code.put(Code.bread);
			Code.store(dest);
		}
		else {
			Code.put(Code.read);
			Code.store(dest);
		}
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Matched ::= BREAK SEMI 
            {
              Object RESULT =null;
		int dummyleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int dummyright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object dummy = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
			

					Code.putJump(0);
					breakJumps.push(Code.pc-2);
					if (!insideWhile) {
						parser.report_error("break", dummyleft, "moze se koristiti samo u while petlji");
					}
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Matched ::= WhileLoop LPAREN error RPAREN Matched 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 tJumpAdrs = controlStacksT.pop(); breakJumps = controlStacksB.pop();
					fJumpAdrs =controlStacksF.pop(); insideWhile = false; parser.report_error("Izvrsen oporavak do ) u liniji "+lleft+" unutar izraza u while konstrukciji.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Matched ::= WhileLoop LPAREN Condition RPAREN Matched 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
					Code.putJump(tops.pop());
					Code.fixup(tJumpAdrs.pop());
					while (!breakJumps.empty()) {
						Code.fixup(breakJumps.pop());
					}
					breakJumps = controlStacksB.pop();
					insideWhile = false; 
					tJumpAdrs = controlStacksT.pop();
					fJumpAdrs =controlStacksF.pop();
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Matched ::= IfLexem LPAREN error RPAREN Matched ElseLexem Matched 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 tJumpAdrs = controlStacksT.pop();
					fJumpAdrs =controlStacksF.pop(); parser.report_error("Izvrsen oporavak do ) u liniji "+lleft+" unutar izraza u if konstrukciji.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Matched ::= IfLexem LPAREN Condition RPAREN Matched ElseLexem Matched 
            {
              Object RESULT =null;
		
						Code.fixup(tJumpAdrs.pop());
						tJumpAdrs = controlStacksT.pop();
						fJumpAdrs =controlStacksF.pop();
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Matched ::= RETURN SEMI 
            {
              Object RESULT =null;
		int dummyleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int dummyright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object dummy = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					returnFound = true;
					if (!isVoid) {
						parser.report_error("Semnaticka greska u liniji "+dummyleft+": nedostaje return iskaz.", null);
					}
					isVoid = false;
					// generisanje koda
	              	Code.put(Code.exit);
	                Code.put(Code.return_);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Matched ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					returnFound = true;
					Struct currMethType = currentMethod.getType();
					if (!currMethType.compatibleWith(t)) {
						parser.report_error("Semanticka greska na liniji "+tleft+": tip izraza u return naredbi se ne slaze sa tipom povratne vrednosti funkcije "+currentMethod.getName(),null);
					}
					if (isVoid) {
						parser.report_error("Semanticka greska na liniji "+tleft+": metod ne sme imati return sa izrazom jer je deklarisan sa void",null);
					}
					isVoid = false;
					// generisanje koda
	                Code.put(Code.exit);
	                Code.put(Code.return_);
	              if (designatorInExpr) {
					designatorStack.pop();
					//designatorInExpr = false;
					resetDesignatorInExprCond();
				}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Matched ::= Designator EQUAL error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri iskazu dodele vrednosti.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Matched ::= Designator LPAREN error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri pozivu funkcije.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Matched ::= Designator LPAREN error RPAREN SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri zadavanju liste parametara u pozivu funkcije",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Matched ::= Designator LPAREN ActParams RPAREN SEMI 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
	if (Obj.Meth == func.getKind()) {
		parser.report_info("Pronadjen poziv funkcije "+func.getName()+" na liniji "+funcleft, null);
		RESULT = func.getType();
	}
	else {
		parser.report_error("Semanticka greska na liniji "+funcleft+": ime "+func.getName()+" nije funkcija.", null);
		RESULT = Tab.noType;
	}
	lockFunctionDesignator = false;
	if (isMain) {
		parser.funcCallsInMain++;
	}
	int destAdr = func.getAdr() - Code.pc;
	Code.put(Code.call);
	Code.put2(destAdr);
	if (func.getType() != Tab.noType) {
		Code.put(Code.pop);
	}
	numOfActPars = 0;
	functionDesignator = null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Matched ::= Designator DesignatorsFollowUp SEMI 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
	boolean g = false;
	if (dest.getType() != Tab.intType) {
		g = true; parser.report_error(parser.getTypeName(dest.getType()), destleft, "designator mora biti tipa int u postfiksnom inkrementu i dekrementu");
	}
	if (dest.getKind() == Obj.Con) {
		g = true; parser.report_error(parser.getTypeName(dest.getType()), destleft, "ne moze se menjati vrednost konstantnom objektu");
	}
	if (dest.getKind() != Obj.Var && dest.getKind() != Obj.Fld && dest.getKind() != Obj.Elem) {
		g = true; parser.report_error(parser.getTypeName(dest.getType()), destleft, "designator mora biti promenljiva, element niza ili polje unutar objekta");
	}
	/*if (dest.getType().getKind()==Struct.Array && !designatorIsArrElem) {
		parser.report_error(parser.getTypeName(dest.getType()), destleft, "designator mora biti promenljiva, element niza ili polje unutar objekta");
	}*/
	if (!g) {
		Code.store(dest);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Matched ::= Designator EQUAL Expr SEMI 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
				
		boolean g = false;
		boolean substitution = false;

		Struct eTemp = e;
		while (eTemp.getKind()==Struct.Class) {
			if (eTemp.getElemType() == dest.getType()) {
				substitution = true;
				break;
			}
			eTemp = eTemp.getElemType();
		}
	
		if (!substitution && !e.assignableTo(dest.getType()) && dest.getType().getKind() != Struct.Array) {
			g = false; parser.report_error("Semanticka greska na liniji "+destleft+": izraz tipa "+parser.getTypeName(e)+" ne moze biti dodeljen tipu "+parser.getTypeName(dest.getType()),null);
		}
		else if (!substitution && (e.getElemType()!=dest.getType().getElemType() && !e.assignableTo(dest.getType().getElemType())) && dest.getType().getKind() == Struct.Array) {
			g = false; parser.report_error("Semanticka greska na liniji "+destleft+": izraz tipa "+parser.getTypeName(e)+" ne moze biti dodeljen tipu "+parser.getTypeName(dest.getType()),null);
		}
		if (dest.getKind() == Obj.Con) {
			g = false; parser.report_error(parser.getTypeName(dest.getType()), destleft, "ne moze se menjati vrednost konstantnom objektu");
		}
		if (dest.getKind() != Obj.Var && dest.getKind() != Obj.Fld && dest.getKind() != Obj.Elem) {
			g = false; parser.report_error(parser.getTypeName(dest.getType()), destleft, "designator mora biti promenljiva, element niza ili polje unutar objekta");
		}
		/*if (dest.getType().getKind()==Struct.Array && !designatorIsArrElem) {
			parser.report_error(parser.getTypeName(dest.getType()), destleft, "designator mora biti promenljiva, element niza ili polje unutar objekta");
		}*/
	if (!g) {
		Code.store(dest);
	}
	if (designatorInExpr) {
		designatorStack.pop();
		//designatorInExpr = false;
		resetDesignatorInExprCond();
	}
	//designatorStack.pop();
	

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Parameter ::= error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.report_error("Izvrsen oporavak do , ili ) u liniji "+lleft+" pri deklaraciji formalnog parametra funkcije",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Parameter",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Parameter ::= Type IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
			Obj temp = Tab.find(varName);
			if (temp.getLevel() == currentLevel) {
				parser.report_error(varName, varNameleft, "duplikat imena u formalnim parametrima funkcije");
			}
			else {
				Tab.insert(Obj.Var, varName, new Struct(Struct.Array, var_type));
				parser.report_info("Deklarisan parametar "+varName+" na liniji "+varNameleft, null);
			}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Parameter",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Parameter ::= Type IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	Obj temp = Tab.find(varName);
	if (temp.getLevel() == currentLevel) {
		parser.report_error(varName, varNameleft, "duplikat imena u formalnim parametrima funkcije");
	}
	else {
		Tab.insert(Obj.Var, varName, var_type);
		parser.report_info("Deklarisan parametar "+varName+" na liniji "+varNameleft, null);
	}
	currentMethod.setLevel(currentMethod.getLevel()+1);
	//currentMethodParams++;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Parameter",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FormPars ::= Parameter 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FormPars ::= FormPars COMMA Parameter 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FormalParams ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParams",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FormalParams ::= FormPars 
            {
              Object RESULT =null;
		
	if (currentMethod.getName().equals("main")) {
		parser.report_error("Main funkcija ne sme sadrzati argumente",null);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParams",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ReturnType ::= VOID 
            {
              Struct RESULT =null;
		
	isVoid=true;
	RESULT = Tab.noType;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnType",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ReturnType ::= Type 
            {
              Struct RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = retType;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnType",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MethodDecl ::= ReturnType IDENT NT$2 LPAREN FormalParams RPAREN VarDeclList LBRACE NT$3 StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		
					methodDef = false;
					if (!classDef)
						parser.funcCount++;
					else
						parser.classMethodCount++;
					parser.statementBlocks++;
					
					if (!returnFound && retType != Tab.noType) {
						parser.report_error("Semanticka greska na liniji " +methNameleft+": funkcija "+methName+" nema return iskaz.", null);
					}
					returnFound = false;
					Tab.chainLocalSymbols(currentMethod);
					
					
					if (currentMethod.getType() == Tab.noType) {
						Code.put(Code.exit);
						Code.put(Code.return_);
					}
					else {
						 Code.put(Code.trap);
						 Code.put(1);
					}
					currentMethod = null;
					Tab.closeScope();
					currentLevel--;
					isMain = false;
					isVoid = false;


              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;

	currentMethod.setAdr(Code.pc);
	//currentMethod.setLevel(currentMethodParams);
	//currentMethod.setFpPos(currentMethodParams);
	if (isMain) {
		Code.mainPc = Code.pc;
		for (Byte b : codeBuff.getBuff()) {
			Code.buf[Code.pc++] = b;
		}
	}
	Code.put(Code.enter);
	Code.put(currentMethod.getLevel());
	Code.put(Tab.currentScope().getnVars()); 

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$2 ::= 
            {
              Object RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 
					methodDef = true;
					if (methName.equals("main")) {
						isMain = true;
					}
					boolean redefinition = false;
					if (classDef) {
						
						Struct superclass = currentClass.getType().getElemType();
						Collection<Obj> superclassMethods = superclass.getMembers();
						Obj superclassMeth = null;
						for (Obj meth:superclassMethods) {
							if (methName.equals(meth.getName())) {
								superclassMeth = meth;
								break;
							}
						}
						if (superclassMeth!=null) {
							redefinition = true;
							boolean substitution = false;
							Obj temp = currentMethod = new Obj(Obj.Meth, methName, retType);
							Struct eTemp = temp.getType();
							while (eTemp.getKind()==Struct.Class) {
								if (eTemp.getElemType() == superclassMeth.getType()) {
									substitution = true;
									break;
								}
								eTemp = eTemp.getElemType();
							}
							if (superclassMeth.getType().compatibleWith(temp.getType()) || substitution) {
								
								Collection<Obj> subclassLocals = Tab.currentScope().getLocals().symbols();
								for (Obj subclassMember:subclassLocals) {
									if (subclassMember.getName().equals(superclassMeth.getName())) {
										currentMethod = subclassMember;
										redefineMethod();
										Tab.openScope();
										currentLevel++;
										currentMethod.setLevel(1);
										//currentMethodParams++;
										Tab.insert(Obj.Var, "this", currentClass.getType());
										break;
									}
								}
							}
							else {
								parser.report_error("Greska : nekompatibilna povratna vrednost pri redefiniciji metoda u liniji "+retTypeleft, null);
							}
						}
					}
					if (!redefinition) {
						if (Tab.find(methName) != Tab.noObj) {
							parser.report_error(methName, methNameleft, "duplikat imena u tabeli simbola");
						}
						currentMethod = Tab.insert(Obj.Meth, methName, retType);
						currentMethod.setLevel(0);
						//currentMethodParams = 0;
						Tab.openScope();
						currentLevel++;
						if (classDef) {
							currentMethod.setLevel(currentMethod.getLevel()+1);
							//currentMethodParams++;
							Tab.insert(Obj.Var, "this", currentClass.getType());
						}
						parser.report_info("Obradjuje se funkcija na liniji "+methNameleft, null);
						if (currentMethod.getName().equals("main") && retType != Tab.noType) {
							parser.report_error("Main funkcija mora imati povratni tip void", null);
						}
					}
				 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ClassMethods ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethods",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ClassMethods ::= LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethods",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VarDeclList ::= VarDeclList VarDecl 
            {
              Object RESULT =null;
		
					if (classDef && !methodDef) {
						parser.classFieldCount++;
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Ext ::= 
            {
              Struct RESULT =null;
		 RESULT = Tab.noType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Ext",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Ext ::= error 
            {
              Struct RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.report_error("Izvrsen oporavak do { u liniji "+lleft+" pri deklaraciji prosirenja natklase.",null); RESULT = Tab.noType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Ext",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Ext ::= EXTENDS Type 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			parser.classDerivationCount++;
			if (t.getKind() != Struct.Class) {
				parser.report_error(parser.getTypeName(t), tleft, "nije klasnog tipa");
			}
			RESULT = t;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Ext",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassDecl ::= CLASS IDENT Ext LBRACE NT$1 VarDeclList ClassMethods RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int extleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Struct ext = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		
					// atributi klase koji se nalaze u unutrasnjem opsegu se  
					// pridruzuju polju fields struct cvora 
					 Tab.chainLocalSymbols(currentClass.getType());
					 int numOfFields = currentClass.getType().getNumberOfFields();
					 Collection<Obj> locals = Tab.currentScope().getLocals().symbols();
					 for (Obj obj: locals) {
						 if (obj.getKind()==Obj.Meth) {
							// Generate method entry.
							 addFunctionEntry (obj.getName(), obj.getAdr()); 
						 }
					 }
					 // Generate VFT terminator (-2). 
					 addTableTerminator(); 

					parser.classCount++;
					classDef = false;
					
					Tab.closeScope();
					currentLevel--;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$1 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int extleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct ext = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

					
					classDef = true;

					Struct s = new Struct(Struct.Class);

					Obj tmp = Tab.find(name);
					if (tmp != Tab.noObj) {
						parser.report_error(name, nameleft, "duplikat naziva klase");
						currentClass = Tab.noObj;
					}
					else {
						currentClass = Tab.insert(Obj.Type, name, s);
						currentClass.getType().setElementType(ext);
					}
					Tab.openScope();
					currentLevel++;
					if (ext != Tab.noType) {
						Collection<Obj> membersInSuperclass = ext.getMembers();
						int n = ext.getNumberOfFields();
						int i=0;
						for (Obj obj:membersInSuperclass) {
							if (obj.getKind()==Obj.Fld) {//polja
								Obj o = Tab.insert(obj.getKind(), obj.getName(), obj.getType());
								o.setAdr(Tab.currentScope().getnVars());
							}
							else if (obj.getKind() == Obj.Meth){//metode
								Obj o = Tab.insert(obj.getKind(), obj.getName(), obj.getType());
								o.setAdr(obj.getAdr());
								o.setLevel(obj.getLevel());
								Collection<Obj> locals = obj.getLocalSymbols();
								Tab.openScope();
								currentLevel++;
								for (Obj loc: locals) {
									if (loc.getName().equals("this")) {
										Tab.insert(Obj.Var, "this", currentClass.getType());
									}
									else {
										Tab.insert(loc.getKind(), loc.getName(), loc.getType());
									}
								}
								o.setFpPos(obj.getFpPos());
								o.setLevel(obj.getLevel());
								Tab.chainLocalSymbols(o);
								Tab.closeScope();
								currentLevel--;
							}
							else {
								System.err.println("Do ovoga ne bi smelo da dodje");
							}
							i++;
						}
					}
					
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	
	Obj typeNode = Tab.find(typeName);
	if (typeNode == Tab.noObj) {
		parser.report_error("Semanticka greska na liniji "+typeNameleft+ ": Nije pronadjen tip " + typeName + " u tabeli simbola.", null);
		var_type = RESULT = Tab.noType;
	}
	else {
		if (Obj.Type == typeNode.getKind()) {
			var_type = RESULT = typeNode.getType();
		}
		else {
			parser.report_error("Semanticka greska na liniji "+typeNameleft+ ": Ime " + typeName + " ne predstavlja tip.", null);
			var_type = RESULT = Tab.noType;
		}
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Var ::= IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
			if (global && !classDef)
				parser.globalArrayCount++;

			Obj temp = Tab.find(varName);
			if (temp.getLevel() == currentLevel) {
				parser.report_error("Semanticka greska na liniji "+varNameleft+": redefinicija promenljive "+varName, null);
			}
			else {
				if (classDef) {
					Tab.insert(Obj.Fld, varName, new Struct(Struct.Array, var_type));
				}
				else
					Tab.insert(Obj.Var, varName, new Struct(Struct.Array, var_type));
				parser.report_info("Deklarisana promenljiva "+varName+" na liniji "+varNameleft, null);
			}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Var ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	Obj temp = Tab.find(varName);
	if (temp.getLevel() == currentLevel) {
		parser.report_error("Semanticka greska na liniji "+varNameleft+": redefinicija promenljive "+varName, null);
	}
	else {
		if (classDef) {
			Tab.insert(Obj.Fld, varName, var_type);
		}
		else
			Tab.insert(Obj.Var, varName, var_type);
		parser.report_info("Deklarisana promenljiva "+varName+" na liniji "+varNameleft, null);
		if (var_type.getKind()==Struct.Char && global == true) {
			parser.globalCharVarCount++;
		}
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VarList ::= Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VarList ::= VarList COMMA Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // GlobalVarList ::= error COMMA Var 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // GlobalVarList ::= Var 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object varName = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // GlobalVarList ::= GlobalVarList COMMA Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VarDeclError ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclError",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarDeclError ::= SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclError",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarDecl ::= Type error VarDeclError 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ; ili { u liniji "+lleft+" pri definiciji lokalne promenljive/polja unutrasnje klase",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarDecl ::= Type VarList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // GlobalVarDecl ::= Type error SEMI 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri definiciji globalne promenljive",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // GlobalVarDecl ::= Type GlobalVarList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Rhs ::= STRCONST 
            {
              Obj RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		

				Obj obj = Tab.find("string");
				Obj o = RESULT = new Obj(Obj.Var, "", obj.getType());
				setDesignatorInExprCond();
			    designatorInExpr = false;
			    int sz = s.length()-2;
			    char[] csTemp = new char[sz+2];
			    csTemp = s.toCharArray();

			    char[] cs = new char[sz+1];
			    for (int i=0; i<cs.length; i++) {
			    	cs[i] = csTemp[i+1];
			    }
			    cs[sz] = '\0';
			    

			    codeBuff.put(Code.enter);
			    codeBuff.put(0);
			    codeBuff.put(1);
			    codeBuff.loadConst(sz+1);
			    codeBuff.put(Code.newarray);
			    codeBuff.put(0);
			    codeBuff.put(Code.store_n);//addr of array
			    
			    int i = 0;
			    for (char c: cs) {

			    	codeBuff.put(Code.load_n);
				    codeBuff.loadConst(i);
				    codeBuff.loadConst(cs[i]);
				    codeBuff.put(Code.bastore);
				    i++;
			    }
			    codeBuff.put(Code.load_n);
			    codeBuff.put(Code.exit);
			    
			    
				/*Obj string = Tab.find("string");
				Obj o = new Obj(Obj.Var, "", string.getType());
				setDesignatorInExprCond();
			    designatorInExpr = false;
			    int sz = s.length()-2;
			    char[] csTemp = new char[sz+2];
			    csTemp = s.toCharArray();

			    char[] cs = new char[sz+1];
			    for (int i=0; i<cs.length; i++) {
			    	cs[i] = csTemp[i+1];
			    }
			    cs[sz] = '\0';
			    int adr = Code.dataSize;
			    o.setAdr(adr);
			    RESULT = o;
			    for (char c: cs) {
			    	Code.loadConst(c);
			    	Code.put(Code.putstatic);
			    	Code.put2(Code.dataSize);
			    	Code.dataSize++;
			    }*/
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Rhs",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Rhs ::= BOOLCONST 
            {
              Obj RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					Obj bool = Tab.find("bool");
					setDesignatorInExprCond();
	                designatorInExpr = false; 
	                Obj o = RESULT = new Obj(Obj.Con, "", bool.getType());
	                boolean bVal = b.booleanValue();
	                if (bVal) {
	                	o.setAdr(1);
	                }
	                else {
	                	o.setAdr(0);
	                }
                
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Rhs",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Rhs ::= CHARCONST 
            {
              Obj RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				
				Obj o = new Obj(Obj.Con, "", Tab.charType);
                o.setAdr(c.charValue()); 
                RESULT = o;
                setDesignatorInExprCond();
                designatorInExpr = false; 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Rhs",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Rhs ::= NUMBER 
            {
              Obj RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
			Obj c = new Obj(Obj.Con, "", Tab.intType);
            c.setAdr(i.intValue()); 
			RESULT = c;
			setDesignatorInExprCond();
            designatorInExpr = false; 
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Rhs",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstVar ::= IDENT 
            {
              Obj RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	
	Obj temp = Tab.find(varName);
	if (temp.getLevel() == currentLevel) {
		parser.report_error("Semanticka greska na liniji "+varNameleft+": redefinicija promenljive "+varName, null);
		RESULT = Tab.noObj;
	}
	else {
		if (var_type==Tab.find("string").getType()) {
			Tab.insert(Obj.Var, varName+"__$#_", var_type);
		}
		Obj obj = Tab.insert(Obj.Con, varName, var_type);
		parser.report_info("Deklarisana promenljiva "+varName+" na liniji "+varNameleft, null);
		RESULT = obj;
		//Code.load(obj);
	}
	

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstVar",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstPart ::= ConstPart COMMA ConstVar EQUAL Rhs 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	boolean g =false;
	boolean substitution = false;
	if (e.getType().getKind()==Struct.Class) {
		if (e.getType().getElemType() == dest.getType()) {
			substitution = true;
		}
	}
	if (!substitution && !e.getType().assignableTo(dest.getType()) && dest.getType().getKind() != Struct.Array) {
		g = false; parser.report_error("Semanticka greska na liniji "+destleft+": izraz tipa "+parser.getTypeName(e.getType())+" ne moze biti dodeljen tipu "+parser.getTypeName(dest.getType().getElemType()),null);
	}
	else if (!substitution && (e.getType().getElemType()!=dest.getType().getElemType() && !e.getType().assignableTo(dest.getType().getElemType())) && dest.getType().getKind() == Struct.Array) {
		g = false; parser.report_error("Semanticka greska na liniji "+destleft+": izraz tipa "+parser.getTypeName(e.getType())+" ne moze biti dodeljen tipu "+parser.getTypeName(dest.getType().getElemType()),null);
	}
	if (!g) {
		if (dest.getType() == Tab.find("string").getType()) {
			codeBuff.store(dest);
		}
		dest.setAdr(e.getAdr());
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstPart",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstPart ::= ConstVar error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	parser.report_error("Izvrsen oporavak do ; u linij "+lleft+" pri definiciji konstante.", null);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstPart",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstPart ::= ConstVar EQUAL Rhs 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
	boolean g =false;
	boolean substitution = false;
	Struct eTemp = e.getType();
	while (eTemp.getKind()==Struct.Class) {
		if (eTemp.getElemType() == dest.getType()) {
			substitution = true;
			break;
		}
		eTemp = eTemp.getElemType();
	}
	if (!substitution && !e.getType().assignableTo(dest.getType()) && dest.getType().getKind() != Struct.Array) {
		g = true; parser.report_error("Semanticka greska na liniji "+destleft+": izraz tipa "+parser.getTypeName(e.getType())+" ne moze biti dodeljen tipu "+parser.getTypeName(dest.getType()),null);
	}
	else if (!substitution && (e.getType().getElemType()!=dest.getType().getElemType() && !e.getType().assignableTo(dest.getType().getElemType())) && dest.getType().getKind() == Struct.Array) {
		g = true; parser.report_error("Semanticka greska na liniji "+destleft+": izraz tipa "+parser.getTypeName(e.getType())+" ne moze biti dodeljen tipu "+parser.getTypeName(dest.getType()),null);
	}
	if (!g) {
		if (dest.getType() == Tab.find("string").getType()) {
			codeBuff.store(dest);
		}
		dest.setAdr(e.getAdr());
	}
		

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstPart",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstDecl ::= CONST error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri definiciji globalne promenljive tipa konstante",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDecl ::= CONST Type ConstPart SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclarationPart ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationPart",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclarationPart ::= GlobalVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationPart",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclarationPart ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationPart",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclarationList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclarationList ::= DeclarationList DeclarationPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = Tab.insert(Obj.Prog, pName, Tab.noType);
	Tab.openScope();
	currentLevel++;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= PROGRAM ProgName DeclarationList LBRACE NT$0 MethodDeclList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		
	
	Code.dataSize += Tab.currentScope().getnVars();
	Obj myMain = Tab.find("main");
	if (myMain==Tab.noObj) {
		parser.report_error("Greska : ulazni fajl ne sadrzi main metodu", null);
	}
	Tab.chainLocalSymbols(p);
	Tab.closeScope();
	currentLevel--;
	

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

						global = false;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

