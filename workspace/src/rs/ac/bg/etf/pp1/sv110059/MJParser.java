
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jan 26 21:53:24 CET 2015
//----------------------------------------------------

package rs.ac.bg.etf.pp1.sv110059;

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jan 26 21:53:24 CET 2015
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\056\002\000\002\002\011\000\002\002" +
    "\004\000\002\024\004\000\002\024\002\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\026\007\000" +
    "\002\022\005\000\002\022\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\005" +
    "\005\000\002\027\005\000\002\027\003\000\002\030\003" +
    "\000\002\030\005\000\002\006\003\000\002\031\011\000" +
    "\002\032\004\000\002\032\002\000\002\003\004\000\002" +
    "\003\002\000\002\033\005\000\002\033\002\000\002\004" +
    "\004\000\002\004\002\000\002\007\013\000\002\036\003" +
    "\000\002\036\003\000\002\035\003\000\002\035\002\000" +
    "\002\010\005\000\002\010\003\000\002\034\004\000\002" +
    "\034\006\000\002\013\004\000\002\013\002\000\002\014" +
    "\003\000\002\014\003\000\002\021\005\000\002\021\006" +
    "\000\002\021\005\000\002\021\004\000\002\021\007\000" +
    "\002\021\007\000\002\021\004\000\002\021\007\000\002" +
    "\021\010\000\002\021\005\000\002\044\005\000\002\044" +
    "\002\000\002\055\003\000\002\055\002\000\002\045\005" +
    "\000\002\045\003\000\002\043\005\000\002\043\003\000" +
    "\002\046\005\000\002\046\003\000\002\047\005\000\002" +
    "\047\003\000\002\016\005\000\002\051\003\000\002\051" +
    "\002\000\002\052\005\000\002\052\002\000\002\017\004" +
    "\000\002\053\005\000\002\053\002\000\002\012\004\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\004\000\002\012\007\000\002\012" +
    "\005\000\002\037\005\000\002\037\002\000\002\042\004" +
    "\000\002\042\005\000\002\042\003\000\002\042\003\000" +
    "\002\020\005\000\002\020\007\000\002\020\007\000\002" +
    "\015\004\000\002\040\004\000\002\040\002\000\002\041" +
    "\004\000\002\041\005\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\011\003\000\002\011\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\004\004\005\001\002\000\004\002\264\001" +
    "\002\000\004\056\006\001\002\000\012\005\ufffd\033\ufffd" +
    "\045\ufffd\056\ufffd\001\002\000\012\005\012\033\020\045" +
    "\017\056\013\001\002\000\012\005\ufffe\033\ufffe\045\ufffe" +
    "\056\ufffe\001\002\000\004\056\254\001\002\000\010\006" +
    "\001\017\001\056\001\001\002\000\066\005\uffed\007\uffed" +
    "\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\026\uffed\027\uffed\030\uffed\031\uffed" +
    "\032\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041" +
    "\uffed\044\uffed\052\uffed\053\uffed\056\uffed\001\002\000\012" +
    "\005\ufffb\033\ufffb\045\ufffb\056\ufffb\001\002\000\012\005" +
    "\ufffa\033\ufffa\045\ufffa\056\ufffa\001\002\000\012\005\ufffc" +
    "\033\ufffc\045\ufffc\056\ufffc\001\002\000\004\056\034\001" +
    "\002\000\004\056\013\001\002\000\004\056\022\001\002" +
    "\000\004\016\023\001\002\000\012\046\030\047\027\050" +
    "\025\055\024\001\002\000\014\005\ufff6\012\ufff6\033\ufff6" +
    "\045\ufff6\056\ufff6\001\002\000\014\005\ufff3\012\ufff3\033" +
    "\ufff3\045\ufff3\056\ufff3\001\002\000\014\005\ufff9\012\032" +
    "\033\ufff9\045\ufff9\056\ufff9\001\002\000\014\005\ufff4\012" +
    "\ufff4\033\ufff4\045\ufff4\056\ufff4\001\002\000\014\005\ufff5" +
    "\012\ufff5\033\ufff5\045\ufff5\056\ufff5\001\002\000\014\005" +
    "\ufff7\012\ufff7\033\ufff7\045\ufff7\056\ufff7\001\002\000\012" +
    "\046\030\047\027\050\025\055\024\001\002\000\014\005" +
    "\ufff8\012\ufff8\033\ufff8\045\ufff8\056\ufff8\001\002\000\006" +
    "\005\uffea\020\036\001\002\000\004\005\040\001\002\000" +
    "\004\056\013\001\002\000\004\005\uffeb\001\002\000\010" +
    "\005\uffe8\006\uffe8\056\uffe8\001\002\000\010\005\042\006" +
    "\uffe6\056\013\001\002\000\010\006\uffe4\017\uffe4\056\uffe4" +
    "\001\002\000\010\005\uffe9\006\uffe9\056\uffe9\001\002\000" +
    "\004\006\045\001\002\000\012\005\uffec\033\uffec\045\uffec" +
    "\056\uffec\001\002\000\010\006\050\017\052\056\013\001" +
    "\002\000\004\056\uffe2\001\002\000\004\006\uffe7\001\002" +
    "\000\010\006\uffe5\017\uffe5\056\uffe5\001\002\000\004\056" +
    "\uffe1\001\002\000\004\056\054\001\002\000\004\010\055" +
    "\001\002\000\006\011\uffdf\056\013\001\002\000\004\056" +
    "\246\001\002\000\004\011\064\001\002\000\006\011\uffe0" +
    "\012\062\001\002\000\006\011\uffdd\012\uffdd\001\002\000" +
    "\004\056\013\001\002\000\006\011\uffde\012\uffde\001\002" +
    "\000\006\005\uffe8\056\uffe8\001\002\000\006\005\066\056" +
    "\013\001\002\000\024\005\uffd9\006\uffd9\013\uffd9\014\uffd9" +
    "\041\uffd9\044\uffd9\052\uffd9\053\uffd9\056\uffd9\001\002\000" +
    "\024\005\072\006\103\013\100\014\102\041\104\044\071" +
    "\052\076\053\070\056\073\001\002\000\004\010\242\001" +
    "\002\000\004\010\235\001\002\000\024\005\uffd9\006\uffd9" +
    "\013\uffd9\014\uffd9\041\uffd9\044\uffd9\052\uffd9\053\uffd9\056" +
    "\uffd9\001\002\000\100\005\uffa5\007\uffa5\010\uffa5\011\uffa5" +
    "\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\021\uffa5\022" +
    "\uffa5\023\uffa5\024\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5" +
    "\032\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041" +
    "\uffa5\042\uffa5\043\uffa5\044\uffa5\052\uffa5\053\uffa5\054\uffa5" +
    "\056\uffa5\001\002\000\024\005\uffd7\006\uffd7\013\uffd7\014" +
    "\uffd7\041\uffd7\044\uffd7\052\uffd7\053\uffd7\056\uffd7\001\002" +
    "\000\012\010\215\016\212\042\213\043\214\001\002\000" +
    "\022\010\uffbe\025\uffbe\030\107\046\uffbe\047\uffbe\050\uffbe" +
    "\055\uffbe\056\uffbe\001\002\000\024\005\uffda\006\uffda\013" +
    "\uffda\014\uffda\041\uffda\044\uffda\052\uffda\053\uffda\056\uffda" +
    "\001\002\000\004\010\155\001\002\000\024\005\uffd8\006" +
    "\uffd8\013\uffd8\014\uffd8\041\uffd8\044\uffd8\052\uffd8\053\uffd8" +
    "\056\uffd8\001\002\000\024\007\110\010\uffbe\025\uffbe\030" +
    "\107\046\uffbe\047\uffbe\050\uffbe\055\uffbe\056\uffbe\001\002" +
    "\000\010\006\uffe3\017\uffe3\056\uffe3\001\002\000\004\007" +
    "\105\001\002\000\026\005\uffd0\006\uffd0\013\uffd0\014\uffd0" +
    "\041\uffd0\044\uffd0\051\uffd0\052\uffd0\053\uffd0\056\uffd0\001" +
    "\002\000\004\007\154\001\002\000\020\010\uffbf\025\uffbf" +
    "\046\uffbf\047\uffbf\050\uffbf\055\uffbf\056\uffbf\001\002\000" +
    "\026\005\uffd3\006\uffd3\013\uffd3\014\uffd3\041\uffd3\044\uffd3" +
    "\051\uffd3\052\uffd3\053\uffd3\056\uffd3\001\002\000\020\010" +
    "\122\025\112\046\115\047\116\050\121\055\114\056\073" +
    "\001\002\000\004\056\013\001\002\000\066\005\uffaf\007" +
    "\uffaf\010\140\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf" +
    "\021\uffaf\022\uffaf\023\uffaf\024\uffaf\026\uffaf\027\uffaf\030" +
    "\uffaf\031\uffaf\032\uffaf\034\uffaf\036\uffaf\037\uffaf\040\uffaf" +
    "\041\uffaf\044\uffaf\052\uffaf\053\uffaf\056\uffaf\001\002\000" +
    "\064\005\uffb7\007\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7" +
    "\015\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\026\uffb7\027" +
    "\uffb7\030\uffb7\031\uffb7\032\uffb7\034\uffb7\036\uffb7\037\uffb7" +
    "\040\uffb7\041\uffb7\044\uffb7\052\uffb7\053\uffb7\056\uffb7\001" +
    "\002\000\064\005\uffb6\007\uffb6\011\uffb6\012\uffb6\013\uffb6" +
    "\014\uffb6\015\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\026" +
    "\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\034\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\044\uffb6\052\uffb6\053\uffb6\056" +
    "\uffb6\001\002\000\064\005\uffb5\007\uffb5\011\uffb5\012\uffb5" +
    "\013\uffb5\014\uffb5\015\uffb5\021\uffb5\022\uffb5\023\uffb5\024" +
    "\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\034\uffb5" +
    "\036\uffb5\037\uffb5\040\uffb5\041\uffb5\044\uffb5\052\uffb5\053" +
    "\uffb5\056\uffb5\001\002\000\056\005\uffbc\007\uffbc\011\uffbc" +
    "\012\uffbc\013\uffbc\014\uffbc\015\uffbc\021\uffbc\022\uffbc\023" +
    "\uffbc\024\uffbc\030\uffbc\031\uffbc\032\uffbc\034\uffbc\036\uffbc" +
    "\037\uffbc\041\uffbc\044\uffbc\052\uffbc\053\uffbc\056\uffbc\001" +
    "\002\000\064\005\uffb9\007\uffb9\011\uffb9\012\uffb9\013\uffb9" +
    "\014\uffb9\015\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\026" +
    "\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\034\uffb9\036\uffb9" +
    "\037\uffb9\040\uffb9\041\uffb9\044\uffb9\052\uffb9\053\uffb9\056" +
    "\uffb9\001\002\000\064\005\uffb4\007\uffb4\011\uffb4\012\uffb4" +
    "\013\uffb4\014\uffb4\015\uffb4\021\uffb4\022\uffb4\023\uffb4\024" +
    "\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\034\uffb4" +
    "\036\uffb4\037\uffb4\040\uffb4\041\uffb4\044\uffb4\052\uffb4\053" +
    "\uffb4\056\uffb4\001\002\000\022\010\uffbe\025\uffbe\030\107" +
    "\046\uffbe\047\uffbe\050\uffbe\055\uffbe\056\uffbe\001\002\000" +
    "\004\011\124\001\002\000\064\005\uffb1\007\uffb1\011\uffb1" +
    "\012\uffb1\013\uffb1\014\uffb1\015\uffb1\021\uffb1\022\uffb1\023" +
    "\uffb1\024\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1" +
    "\034\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\044\uffb1\052" +
    "\uffb1\053\uffb1\056\uffb1\001\002\000\064\005\uffbb\007\uffbb" +
    "\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\021\uffbb\022" +
    "\uffbb\023\uffbb\024\uffbb\026\127\027\126\030\uffbb\031\uffbb" +
    "\032\uffbb\034\uffbb\036\uffbb\037\uffbb\040\131\041\uffbb\044" +
    "\uffbb\052\uffbb\053\uffbb\056\uffbb\001\002\000\020\010\uff98" +
    "\025\uff98\046\uff98\047\uff98\050\uff98\055\uff98\056\uff98\001" +
    "\002\000\020\010\uff99\025\uff99\046\uff99\047\uff99\050\uff99" +
    "\055\uff99\056\uff99\001\002\000\020\010\122\025\112\046" +
    "\115\047\116\050\121\055\114\056\073\001\002\000\020" +
    "\010\uff9a\025\uff9a\046\uff9a\047\uff9a\050\uff9a\055\uff9a\056" +
    "\uff9a\001\002\000\064\005\uffba\007\uffba\011\uffba\012\uffba" +
    "\013\uffba\014\uffba\015\uffba\021\uffba\022\uffba\023\uffba\024" +
    "\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\034\uffba" +
    "\036\uffba\037\uffba\040\uffba\041\uffba\044\uffba\052\uffba\053" +
    "\uffba\056\uffba\001\002\000\056\005\uffc0\007\uffc0\011\uffc0" +
    "\012\uffc0\013\uffc0\014\uffc0\015\134\021\uffc0\022\uffc0\023" +
    "\uffc0\024\uffc0\030\135\031\uffc0\032\uffc0\034\uffc0\036\uffc0" +
    "\037\uffc0\041\uffc0\044\uffc0\052\uffc0\053\uffc0\056\uffc0\001" +
    "\002\000\020\010\uff9c\025\uff9c\046\uff9c\047\uff9c\050\uff9c" +
    "\055\uff9c\056\uff9c\001\002\000\020\010\uff9b\025\uff9b\046" +
    "\uff9b\047\uff9b\050\uff9b\055\uff9b\056\uff9b\001\002\000\020" +
    "\010\122\025\112\046\115\047\116\050\121\055\114\056" +
    "\073\001\002\000\056\005\uffbd\007\uffbd\011\uffbd\012\uffbd" +
    "\013\uffbd\014\uffbd\015\uffbd\021\uffbd\022\uffbd\023\uffbd\024" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\034\uffbd\036\uffbd\037\uffbd" +
    "\041\uffbd\044\uffbd\052\uffbd\053\uffbd\056\uffbd\001\002\000" +
    "\024\010\uffbe\011\uffc9\025\uffbe\030\107\046\uffbe\047\uffbe" +
    "\050\uffbe\055\uffbe\056\uffbe\001\002\000\064\005\uffb8\007" +
    "\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\026\uffb8\027\uffb8\030\uffb8\031" +
    "\uffb8\032\uffb8\034\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8" +
    "\044\uffb8\052\uffb8\053\uffb8\056\uffb8\001\002\000\004\011" +
    "\147\001\002\000\006\011\uffca\012\145\001\002\000\006" +
    "\011\uffc7\012\uffc7\001\002\000\022\010\uffbe\025\uffbe\030" +
    "\107\046\uffbe\047\uffbe\050\uffbe\055\uffbe\056\uffbe\001\002" +
    "\000\006\011\uffc8\012\uffc8\001\002\000\064\005\uffb0\007" +
    "\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\024\uffb0\026\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\034\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0" +
    "\044\uffb0\052\uffb0\053\uffb0\056\uffb0\001\002\000\066\005" +
    "\uffb3\007\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3" +
    "\021\uffb3\022\uffb3\023\uffb3\024\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\031\uffb3\032\uffb3\034\uffb3\035\151\036\uffb3\037\uffb3" +
    "\040\uffb3\041\uffb3\044\uffb3\052\uffb3\053\uffb3\056\uffb3\001" +
    "\002\000\022\010\uffbe\025\uffbe\030\107\046\uffbe\047\uffbe" +
    "\050\uffbe\055\uffbe\056\uffbe\001\002\000\004\036\153\001" +
    "\002\000\064\005\uffb2\007\uffb2\011\uffb2\012\uffb2\013\uffb2" +
    "\014\uffb2\015\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\026" +
    "\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\034\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\044\uffb2\052\uffb2\053\uffb2\056" +
    "\uffb2\001\002\000\026\005\uffd4\006\uffd4\013\uffd4\014\uffd4" +
    "\041\uffd4\044\uffd4\051\uffd4\052\uffd4\053\uffd4\056\uffd4\001" +
    "\002\000\022\010\uffbe\025\uffbe\030\107\046\uffbe\047\uffbe" +
    "\050\uffbe\055\uffbe\056\uffbe\001\002\000\006\011\uffcb\012" +
    "\uffcb\001\002\000\006\011\161\012\160\001\002\000\004" +
    "\055\163\001\002\000\004\007\162\001\002\000\026\005" +
    "\uffce\006\uffce\013\uffce\014\uffce\041\uffce\044\uffce\051\uffce" +
    "\052\uffce\053\uffce\056\uffce\001\002\000\006\011\uffcc\012" +
    "\uffcc\001\002\000\030\005\uffc5\011\uffc5\013\uffc5\014\uffc5" +
    "\034\204\037\uffc5\041\uffc5\044\uffc5\052\uffc5\053\uffc5\056" +
    "\uffc5\001\002\000\044\005\uffc1\011\uffc1\013\uffc1\014\uffc1" +
    "\021\uffc1\022\uffc1\023\uffc1\024\uffc1\031\uffc1\032\uffc1\034" +
    "\uffc1\037\uffc1\041\uffc1\044\uffc1\052\uffc1\053\uffc1\056\uffc1" +
    "\001\002\000\024\005\072\013\100\014\102\037\202\041" +
    "\104\044\071\052\076\053\070\056\073\001\002\000\044" +
    "\005\uffc3\011\uffc3\013\uffc3\014\uffc3\021\173\022\172\023" +
    "\171\024\174\031\170\032\175\034\uffc3\037\uffc3\041\uffc3" +
    "\044\uffc3\052\uffc3\053\uffc3\056\uffc3\001\002\000\022\010" +
    "\uffa1\025\uffa1\030\uffa1\046\uffa1\047\uffa1\050\uffa1\055\uffa1" +
    "\056\uffa1\001\002\000\022\010\uff9e\025\uff9e\030\uff9e\046" +
    "\uff9e\047\uff9e\050\uff9e\055\uff9e\056\uff9e\001\002\000\022" +
    "\010\uff9f\025\uff9f\030\uff9f\046\uff9f\047\uff9f\050\uff9f\055" +
    "\uff9f\056\uff9f\001\002\000\022\010\uffa0\025\uffa0\030\uffa0" +
    "\046\uffa0\047\uffa0\050\uffa0\055\uffa0\056\uffa0\001\002\000" +
    "\022\010\uff9d\025\uff9d\030\uff9d\046\uff9d\047\uff9d\050\uff9d" +
    "\055\uff9d\056\uff9d\001\002\000\022\010\uffa2\025\uffa2\030" +
    "\uffa2\046\uffa2\047\uffa2\050\uffa2\055\uffa2\056\uffa2\001\002" +
    "\000\022\010\uffbe\025\uffbe\030\107\046\uffbe\047\uffbe\050" +
    "\uffbe\055\uffbe\056\uffbe\001\002\000\044\005\uffc2\011\uffc2" +
    "\013\uffc2\014\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\031" +
    "\uffc2\032\uffc2\034\uffc2\037\uffc2\041\uffc2\044\uffc2\052\uffc2" +
    "\053\uffc2\056\uffc2\001\002\000\024\005\uffaa\006\uffaa\013" +
    "\uffaa\014\uffaa\041\uffaa\044\uffaa\052\uffaa\053\uffaa\056\uffaa" +
    "\001\002\000\026\005\uffd8\006\uffd8\013\uffd8\014\uffd8\041" +
    "\uffd8\044\uffd8\051\206\052\uffd8\053\uffd8\056\uffd8\001\002" +
    "\000\022\010\uffbe\025\uffbe\030\107\046\uffbe\047\uffbe\050" +
    "\uffbe\055\uffbe\056\uffbe\001\002\000\030\005\uffc6\011\uffc6" +
    "\013\uffc6\014\uffc6\034\204\037\uffc6\041\uffc6\044\uffc6\052" +
    "\uffc6\053\uffc6\056\uffc6\001\002\000\022\010\uffbe\025\uffbe" +
    "\030\107\046\uffbe\047\uffbe\050\uffbe\055\uffbe\056\uffbe\001" +
    "\002\000\044\005\uffc4\011\uffc4\013\uffc4\014\uffc4\021\173" +
    "\022\172\023\171\024\174\031\170\032\175\034\uffc4\037" +
    "\uffc4\041\uffc4\044\uffc4\052\uffc4\053\uffc4\056\uffc4\001\002" +
    "\000\022\005\072\013\100\014\102\041\104\044\071\052" +
    "\076\053\070\056\073\001\002\000\024\005\uffa9\006\uffa9" +
    "\013\uffa9\014\uffa9\041\uffa9\044\uffa9\052\uffa9\053\uffa9\056" +
    "\uffa9\001\002\000\026\005\uffd2\006\uffd2\013\uffd2\014\uffd2" +
    "\041\uffd2\044\uffd2\051\uffd2\052\uffd2\053\uffd2\056\uffd2\001" +
    "\002\000\004\007\223\001\002\000\024\003\220\010\uffbe" +
    "\025\uffbe\030\107\046\uffbe\047\uffbe\050\uffbe\055\uffbe\056" +
    "\uffbe\001\002\000\004\007\uffac\001\002\000\004\007\uffab" +
    "\001\002\000\024\010\uffbe\011\uffc9\025\uffbe\030\107\046" +
    "\uffbe\047\uffbe\050\uffbe\055\uffbe\056\uffbe\001\002\000\004" +
    "\011\217\001\002\000\004\007\uffad\001\002\000\004\007" +
    "\222\001\002\000\004\007\uffae\001\002\000\026\005\uffd5" +
    "\006\uffd5\013\uffd5\014\uffd5\041\uffd5\044\uffd5\051\uffd5\052" +
    "\uffd5\053\uffd5\056\uffd5\001\002\000\026\005\uffd6\006\uffd6" +
    "\013\uffd6\014\uffd6\041\uffd6\044\uffd6\051\uffd6\052\uffd6\053" +
    "\uffd6\056\uffd6\001\002\000\100\005\uffa7\007\uffa7\010\uffa7" +
    "\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\021" +
    "\uffa7\022\uffa7\023\uffa7\024\uffa7\026\uffa7\027\uffa7\030\uffa7" +
    "\031\uffa7\032\uffa7\034\uffa7\035\225\036\uffa7\037\uffa7\040" +
    "\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\052\uffa7\053\uffa7" +
    "\054\227\056\uffa7\001\002\000\022\010\uffbe\025\uffbe\030" +
    "\107\046\uffbe\047\uffbe\050\uffbe\055\uffbe\056\uffbe\001\002" +
    "\000\100\005\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013" +
    "\uffa6\014\uffa6\015\uffa6\016\uffa6\021\uffa6\022\uffa6\023\uffa6" +
    "\024\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\034" +
    "\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6" +
    "\043\uffa6\044\uffa6\052\uffa6\053\uffa6\054\uffa6\056\uffa6\001" +
    "\002\000\004\056\230\001\002\000\100\005\uffa4\007\uffa4" +
    "\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016" +
    "\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\026\uffa4\027\uffa4" +
    "\030\uffa4\031\uffa4\032\uffa4\034\uffa4\035\uffa4\036\uffa4\037" +
    "\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\052\uffa4" +
    "\053\uffa4\054\uffa4\056\uffa4\001\002\000\004\036\232\001" +
    "\002\000\100\005\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3" +
    "\013\uffa3\014\uffa3\015\uffa3\016\uffa3\021\uffa3\022\uffa3\023" +
    "\uffa3\024\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3" +
    "\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042" +
    "\uffa3\043\uffa3\044\uffa3\052\uffa3\053\uffa3\054\uffa3\056\uffa3" +
    "\001\002\000\024\005\072\006\234\013\100\014\102\041" +
    "\104\044\071\052\076\053\070\056\073\001\002\000\026" +
    "\005\uffcd\006\uffcd\013\uffcd\014\uffcd\041\uffcd\044\uffcd\051" +
    "\uffcd\052\uffcd\053\uffcd\056\uffcd\001\002\000\022\010\uffbe" +
    "\025\uffbe\030\107\046\uffbe\047\uffbe\050\uffbe\055\uffbe\056" +
    "\uffbe\001\002\000\006\011\237\037\202\001\002\000\022" +
    "\005\072\013\100\014\102\041\104\044\071\052\076\053" +
    "\070\056\073\001\002\000\024\005\uffa8\006\uffa8\013\uffa8" +
    "\014\uffa8\041\uffa8\044\uffa8\052\uffa8\053\uffa8\056\uffa8\001" +
    "\002\000\026\005\uffd1\006\uffd1\013\uffd1\014\uffd1\041\uffd1" +
    "\044\uffd1\051\uffd1\052\uffd1\053\uffd1\056\uffd1\001\002\000" +
    "\004\056\073\001\002\000\004\011\244\001\002\000\004" +
    "\007\245\001\002\000\026\005\uffcf\006\uffcf\013\uffcf\014" +
    "\uffcf\041\uffcf\044\uffcf\051\uffcf\052\uffcf\053\uffcf\056\uffcf" +
    "\001\002\000\010\011\uffdc\012\uffdc\035\247\001\002\000" +
    "\004\036\250\001\002\000\006\011\uffdb\012\uffdb\001\002" +
    "\000\010\006\uffe4\017\uffe4\056\uffe4\001\002\000\010\006" +
    "\253\017\052\056\013\001\002\000\004\002\000\001\002" +
    "\000\010\007\uffef\012\uffef\035\262\001\002\000\006\007" +
    "\ufff0\012\ufff0\001\002\000\006\007\260\012\257\001\002" +
    "\000\004\056\254\001\002\000\014\005\ufff2\006\ufff2\033" +
    "\ufff2\045\ufff2\056\ufff2\001\002\000\006\007\ufff1\012\ufff1" +
    "\001\002\000\004\036\263\001\002\000\006\007\uffee\012" +
    "\uffee\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\006\001\001\000\014\005\013" +
    "\006\010\025\007\026\015\031\014\001\001\000\002\001" +
    "\001\000\006\027\255\030\254\001\001\000\004\056\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\025\023\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\032\001\001\000\002\001\001" +
    "\000\004\032\034\001\001\000\002\001\001\000\004\006" +
    "\036\001\001\000\002\001\001\000\004\003\040\001\001" +
    "\000\010\005\042\006\010\033\043\001\001\000\004\004" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\046\007\050\036\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\055\010\057\034\060\035\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\055\034\062\001\001\000\002\001\001\000\004" +
    "\003\064\001\001\000\006\005\042\006\010\001\001\000" +
    "\004\013\066\001\001\000\012\014\076\015\074\020\073" +
    "\021\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\232\001\001\000\004\040\223\001\001\000\002" +
    "\001\001\000\004\042\210\001\001\000\014\016\164\043" +
    "\165\046\163\047\166\051\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\105\051" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\117\015\112\017\116\001\001\000\004" +
    "\006\147\001\001\000\004\037\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\132" +
    "\001\001\000\004\053\124\001\001\000\002\001\001\000" +
    "\006\016\122\051\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\131\015\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\117\015\112" +
    "\017\136\001\001\000\002\001\001\000\012\016\143\045" +
    "\142\051\110\055\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\145\051\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\151\051\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\155\051\110\001\001\000\004\044\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\014\177\015\074\020\073\021\200\001\001" +
    "\000\004\050\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\176\051\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\164\046\202\047\166\051\110\001\001\000\002\001" +
    "\001\000\010\016\164\047\204\051\110\001\001\000\004" +
    "\050\175\001\001\000\010\015\074\020\206\021\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\220\051\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\143\045\142\051\110\055\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\225\001\001\000\006\016\230\051\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\076\015" +
    "\074\020\073\021\100\001\001\000\002\001\001\000\014" +
    "\016\164\043\235\046\163\047\166\051\110\001\001\000" +
    "\002\001\001\000\010\015\074\020\237\021\240\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\251\001\001\000\010\006\046\007\050\036\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		System.out.println(s.toString() + " " + s.value.toString());
	return s;

    }


	//promenljive za brojanje pojavljivanja odredjenih elemenata
	
	int globalArrayCount = 0; //R41
	int funcCount = 0; //R42
	int classCount = 0; //R43
	int statementBlocks = 0; //R44

    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
    boolean greska;
     
   public void report_fatal_error(String message, Object   info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

  public void report_error(String message, Object info)
    {
      greska=true;
      System.err.print(message);
      System.err.flush();
      if (info instanceof Symbol)
          System.err.println(" na liniji " + ((Symbol)info).left);
      else System.err.println("");
    }
    
    public void printCounts() {
    	System.out.println("Broj elemenata: ");
    	System.out.println("Deklaracije globalnih nizova - " + globalArrayCount);
    	System.out.println("Definicije funkcija u glavnom programu - " + funcCount);
    	System.out.println("Definicije unutrasnjih klasa - " + classCount);
    	System.out.println("Blokovi naredbi - " + statementBlocks);
    }
    
    public static void main(String args[]) throws Exception {
        FileReader r = new FileReader(args[0]);
        Yylex skener = new Yylex(r);
        MJParser p = new MJParser(skener);
        Symbol s = p.parse();  //pocetak parsiranja
        p.printCounts();
        if (p.greska) 
        	System.out.println("Ulazni program ima gresaka!");
        else 
        	System.out.println("Parsiranje uspesno zavrseno!");
        
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {



	boolean global = true;


  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Mulop ::= MOD 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Mulop ::= DIV 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Mulop ::= TIMES 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Addop ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Addop ::= PLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Relop ::= LTE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Relop ::= LT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Relop ::= GTE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Relop ::= GT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Relop ::= NOT_EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Relop ::= IS_EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // IdentRef ::= LSQUARE Expr RSQUARE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentRef",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // IdentRef ::= DOT IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentRef",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // IdentList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // IdentList ::= IdentList IdentRef 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Designator ::= IDENT IdentList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Unmatched ::= WHILE LPAREN Condition RPAREN Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Unmatched ::= IF Condition Matched ELSE Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Unmatched ::= IF Condition Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DesignatorsFollowUp ::= DEC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorsFollowUp",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DesignatorsFollowUp ::= INC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorsFollowUp",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DesignatorsFollowUp ::= LPAREN ActParams RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorsFollowUp",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DesignatorsFollowUp ::= EQUAL Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorsFollowUp",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FunctionCall ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FunctionCall",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FunctionCall ::= LPAREN ActParams RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FunctionCall",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Factor ::= LPAREN Expr RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Factor ::= NEW Type LSQUARE Expr RSQUARE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Factor ::= NEW Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Factor ::= STRCONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Factor ::= BOOLCONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Factor ::= CHARCONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Factor ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Factor ::= Designator FunctionCall 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // MulList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // MulList ::= MulList Mulop Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Term ::= Factor MulList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // AddList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddList",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // AddList ::= AddList Addop Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddList",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Sign ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Sign",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Sign ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Sign",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= Sign Term AddList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CondFact ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CondFact ::= CondFact Relop Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CondTerm ::= CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CondTerm ::= CondTerm AND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Condition ::= CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Condition ::= Condition OR CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ActPars ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ActPars ::= ActPars COMMA Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ActParams ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParams",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ActParams ::= ActPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParams",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OptNumbers ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptNumbers",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OptNumbers ::= OptNumbers COMMA NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptNumbers",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Matched ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
		
						parser.statementBlocks++;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Matched ::= PRINT LPAREN Expr OptNumbers RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Matched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Matched ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Matched ::= WHILE LPAREN Condition RPAREN Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Matched ::= IF Condition Matched ELSE Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Matched ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Matched ::= RETURN Expr SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Matched ::= Designator EQUAL error SEMI 
            {
              Object RESULT =null;
		 System.err.println("Uspesan oporavak od greske pri dodeli vrednosti."); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Matched ::= Designator DesignatorsFollowUp SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Parameter ::= Type IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Parameter",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Parameter ::= Type IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Parameter",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FormPars ::= Parameter 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FormPars ::= FormPars COMMA Parameter 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FormalParams ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParams",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FormalParams ::= FormPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParams",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ReturnType ::= VOID 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnType",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ReturnType ::= Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnType",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MethodDecl ::= ReturnType IDENT LPAREN FormalParams RPAREN VarDeclList LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
		
					if (!global)
						parser.funcCount++;
					
					parser.statementBlocks++;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassMethods ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethods",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassMethods ::= LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethods",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VarDeclList ::= VarDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Ext ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Ext",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Ext ::= EXTENDS Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Ext",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ClassDecl ::= CLASS IDENT Ext LBRACE VarDeclList ClassMethods RBRACE 
            {
              Object RESULT =null;
		
					parser.classCount++;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Var ::= IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;
		
			if (global)
				parser.globalArrayCount++;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Var ::= IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VarList ::= Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarList ::= VarList COMMA Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarDecl ::= Type VarList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // RhsElem ::= STRCONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RhsElem",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // RhsElem ::= BOOLCONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RhsElem",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // RhsElem ::= CHARCONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RhsElem",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // RhsElem ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RhsElem",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Rhs ::= RhsElem 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Rhs",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Rhs ::= Rhs COMMA RhsElem 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Rhs",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConstDecl ::= CONST Type IDENT EQUAL Rhs 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclarationPart ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationPart",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclarationPart ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationPart",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclarationPart ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationPart",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclarationList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclarationList ::= DeclarationList DeclarationPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= PROGRAM IDENT DeclarationList LBRACE NT$0 MethodDeclList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;

						global = false;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

