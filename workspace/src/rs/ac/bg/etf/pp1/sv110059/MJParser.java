
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jan 28 14:07:36 CET 2015
//----------------------------------------------------

package rs.ac.bg.etf.pp1.sv110059;

import java_cup.runtime.*;
import java.io.*;
import rs.etf.pp1.symboltable.*;
import rs.etf.pp1.symboltable.concepts.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jan 28 14:07:36 CET 2015
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\200\000\002\060\002\000\002\002\011\000\002\002" +
    "\004\000\002\047\003\000\002\020\004\000\002\020\002" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\022\006\000\002\022\005\000\002\024\005\000\002" +
    "\024\004\000\002\024\007\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\007\005" +
    "\000\002\007\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\004\000\002\010\005\000\002\010\003\000\002" +
    "\010\005\000\002\023\005\000\002\023\003\000\002\046" +
    "\003\000\002\046\005\000\002\051\003\000\002\061\002" +
    "\000\002\025\012\000\002\026\004\000\002\026\003\000" +
    "\002\026\002\000\002\003\004\000\002\003\002\000\002" +
    "\027\005\000\002\027\002\000\002\004\004\000\002\004" +
    "\002\000\002\062\002\000\002\006\014\000\002\052\003" +
    "\000\002\052\003\000\002\031\003\000\002\031\002\000" +
    "\002\011\005\000\002\011\003\000\002\030\004\000\002" +
    "\030\006\000\002\030\003\000\002\013\004\000\002\013" +
    "\002\000\002\014\003\000\002\014\003\000\002\016\006" +
    "\000\002\016\005\000\002\016\007\000\002\016\007\000" +
    "\002\016\006\000\002\016\006\000\002\016\005\000\002" +
    "\016\004\000\002\016\011\000\002\016\011\000\002\016" +
    "\007\000\002\016\007\000\002\016\004\000\002\016\007" +
    "\000\002\016\010\000\002\016\005\000\002\036\005\000" +
    "\002\036\002\000\002\045\003\000\002\045\002\000\002" +
    "\037\005\000\002\037\003\000\002\035\005\000\002\035" +
    "\003\000\002\040\005\000\002\040\003\000\002\041\005" +
    "\000\002\041\003\000\002\054\005\000\002\043\003\000" +
    "\002\043\002\000\002\056\005\000\002\056\002\000\002" +
    "\053\004\000\002\057\005\000\002\057\002\000\002\055" +
    "\006\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\004\000" +
    "\002\055\007\000\002\055\005\000\002\034\003\000\002" +
    "\034\003\000\002\015\007\000\002\015\007\000\002\015" +
    "\011\000\002\015\011\000\002\015\007\000\002\015\007" +
    "\000\002\063\002\000\002\050\005\000\002\032\004\000" +
    "\002\032\002\000\002\033\004\000\002\033\005\000\002" +
    "\033\005\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\012\003\000\002\012\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\004\004\005\001\002\000\004\002\340\001" +
    "\002\000\004\056\006\001\002\000\012\005\ufffe\033\ufffe" +
    "\045\ufffe\056\ufffe\001\002\000\012\005\ufffc\033\ufffc\045" +
    "\ufffc\056\ufffc\001\002\000\012\005\013\033\021\045\020" +
    "\056\014\001\002\000\012\005\ufffd\033\ufffd\045\ufffd\056" +
    "\ufffd\001\002\000\006\003\327\056\061\001\002\000\010" +
    "\006\001\017\001\056\001\001\002\000\054\003\uffe3\005" +
    "\uffe3\007\uffe3\011\uffe3\012\uffe3\015\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\024\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\056\uffe3" +
    "\001\002\000\012\005\ufffa\033\ufffa\045\ufffa\056\ufffa\001" +
    "\002\000\012\005\ufff9\033\ufff9\045\ufff9\056\ufff9\001\002" +
    "\000\012\005\ufffb\033\ufffb\045\ufffb\056\ufffb\001\002\000" +
    "\004\056\043\001\002\000\006\003\023\056\014\001\002" +
    "\000\004\056\026\001\002\000\004\007\024\001\002\000" +
    "\012\005\ufff7\033\ufff7\045\ufff7\056\ufff7\001\002\000\006" +
    "\007\037\012\036\001\002\000\006\003\027\016\030\001" +
    "\002\000\006\007\ufff5\012\ufff5\001\002\000\012\046\035" +
    "\047\034\050\032\055\031\001\002\000\006\007\ufff3\012" +
    "\ufff3\001\002\000\006\007\ufff0\012\ufff0\001\002\000\006" +
    "\007\ufff6\012\ufff6\001\002\000\006\007\ufff1\012\ufff1\001" +
    "\002\000\006\007\ufff2\012\ufff2\001\002\000\004\056\040" +
    "\001\002\000\012\005\ufff8\033\ufff8\045\ufff8\056\ufff8\001" +
    "\002\000\004\016\041\001\002\000\012\046\035\047\034" +
    "\050\032\055\031\001\002\000\006\007\ufff4\012\ufff4\001" +
    "\002\000\010\003\046\005\uffde\020\045\001\002\000\004" +
    "\005\050\001\002\000\004\056\014\001\002\000\004\005" +
    "\uffdf\001\002\000\004\005\uffe0\001\002\000\010\005\uffe2" +
    "\006\uffe2\056\uffe2\001\002\000\010\005\uffdc\006\uffdc\056" +
    "\uffdc\001\002\000\010\005\053\006\uffda\056\014\001\002" +
    "\000\010\006\uffd8\017\uffd8\056\uffd8\001\002\000\006\003" +
    "\060\056\061\001\002\000\010\005\uffdd\006\uffdd\056\uffdd" +
    "\001\002\000\004\006\057\001\002\000\012\005\uffe1\033" +
    "\uffe1\045\uffe1\056\uffe1\001\002\000\012\005\uffeb\006\uffeb" +
    "\007\071\056\uffeb\001\002\000\010\007\uffe5\012\uffe5\035" +
    "\067\001\002\000\006\007\065\012\064\001\002\000\006" +
    "\007\uffe6\012\uffe6\001\002\000\004\056\061\001\002\000" +
    "\010\005\uffed\006\uffed\056\uffed\001\002\000\006\007\uffe7" +
    "\012\uffe7\001\002\000\004\036\070\001\002\000\006\007" +
    "\uffe4\012\uffe4\001\002\000\010\005\uffec\006\uffec\056\uffec" +
    "\001\002\000\010\006\074\017\076\056\014\001\002\000" +
    "\004\056\uffd5\001\002\000\004\006\uffdb\001\002\000\010" +
    "\006\uffd9\017\uffd9\056\uffd9\001\002\000\004\056\uffd4\001" +
    "\002\000\004\056\100\001\002\000\004\010\uffd7\001\002" +
    "\000\004\010\102\001\002\000\010\003\104\011\uffd2\056" +
    "\014\001\002\000\004\056\321\001\002\000\006\011\uffcd" +
    "\012\uffcd\001\002\000\004\011\112\001\002\000\006\011" +
    "\uffd3\012\110\001\002\000\006\011\uffd0\012\uffd0\001\002" +
    "\000\006\003\104\056\014\001\002\000\006\011\uffd1\012" +
    "\uffd1\001\002\000\006\005\uffdc\056\uffdc\001\002\000\006" +
    "\005\114\056\014\001\002\000\024\005\uffcb\006\uffcb\013" +
    "\uffcb\014\uffcb\041\uffcb\044\uffcb\052\uffcb\053\uffcb\056\uffcb" +
    "\001\002\000\024\005\120\006\131\013\126\014\130\041" +
    "\132\044\117\052\124\053\116\056\121\001\002\000\004" +
    "\010\315\001\002\000\004\010\304\001\002\000\024\005" +
    "\uffcb\006\uffcb\013\uffcb\014\uffcb\041\uffcb\044\uffcb\052\uffcb" +
    "\053\uffcb\056\uffcb\001\002\000\060\007\uff93\010\uff93\011" +
    "\uff93\012\uff93\015\uff93\016\uff93\021\uff93\022\uff93\023\uff93" +
    "\024\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93\034" +
    "\uff93\035\uff93\036\uff93\037\uff93\040\uff93\042\uff93\043\uff93" +
    "\054\uff93\001\002\000\024\005\uffc9\006\uffc9\013\uffc9\014" +
    "\uffc9\041\uffc9\044\uffc9\052\uffc9\053\uffc9\056\uffc9\001\002" +
    "\000\012\010\253\016\251\042\250\043\252\001\002\000" +
    "\004\010\211\001\002\000\024\005\uffcc\006\uffcc\013\uffcc" +
    "\014\uffcc\041\uffcc\044\uffcc\052\uffcc\053\uffcc\056\uffcc\001" +
    "\002\000\004\010\202\001\002\000\024\005\uffca\006\uffca" +
    "\013\uffca\014\uffca\041\uffca\044\uffca\052\uffca\053\uffca\056" +
    "\uffca\001\002\000\024\007\136\010\uffaa\025\uffaa\030\135" +
    "\046\uffaa\047\uffaa\050\uffaa\055\uffaa\056\uffaa\001\002\000" +
    "\010\006\uffd6\017\uffd6\056\uffd6\001\002\000\004\007\133" +
    "\001\002\000\026\005\uffbc\006\uffbc\013\uffbc\014\uffbc\041" +
    "\uffbc\044\uffbc\051\uffbc\052\uffbc\053\uffbc\056\uffbc\001\002" +
    "\000\004\007\201\001\002\000\020\010\uffab\025\uffab\046" +
    "\uffab\047\uffab\050\uffab\055\uffab\056\uffab\001\002\000\026" +
    "\005\uffc1\006\uffc1\013\uffc1\014\uffc1\041\uffc1\044\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\056\uffc1\001\002\000\020\010\150" +
    "\025\140\046\143\047\144\050\147\055\142\056\121\001" +
    "\002\000\004\056\014\001\002\000\046\007\uffa3\010\166" +
    "\011\uffa3\012\uffa3\015\uffa3\021\uffa3\022\uffa3\023\uffa3\024" +
    "\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\034\uffa3" +
    "\036\uffa3\037\uffa3\040\uffa3\001\002\000\044\007\uffa2\011" +
    "\uffa2\012\uffa2\015\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2" +
    "\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\034\uffa2\036" +
    "\uffa2\037\uffa2\040\uffa2\001\002\000\044\007\uffa1\011\uffa1" +
    "\012\uffa1\015\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\026" +
    "\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\034\uffa1\036\uffa1" +
    "\037\uffa1\040\uffa1\001\002\000\044\007\uffa0\011\uffa0\012" +
    "\uffa0\015\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\026\uffa0" +
    "\027\uffa0\030\uffa0\031\uffa0\032\uffa0\034\uffa0\036\uffa0\037" +
    "\uffa0\040\uffa0\001\002\000\036\007\uffa8\011\uffa8\012\uffa8" +
    "\015\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\030\uffa8\031" +
    "\uffa8\032\uffa8\034\uffa8\036\uffa8\037\uffa8\001\002\000\044" +
    "\007\uffa5\011\uffa5\012\uffa5\015\uffa5\021\uffa5\022\uffa5\023" +
    "\uffa5\024\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5" +
    "\034\uffa5\036\uffa5\037\uffa5\040\uffa5\001\002\000\044\007" +
    "\uff9f\011\uff9f\012\uff9f\015\uff9f\021\uff9f\022\uff9f\023\uff9f" +
    "\024\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\034" +
    "\uff9f\036\uff9f\037\uff9f\040\uff9f\001\002\000\022\010\uffaa" +
    "\025\uffaa\030\135\046\uffaa\047\uffaa\050\uffaa\055\uffaa\056" +
    "\uffaa\001\002\000\004\011\152\001\002\000\044\007\uff9c" +
    "\011\uff9c\012\uff9c\015\uff9c\021\uff9c\022\uff9c\023\uff9c\024" +
    "\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\034\uff9c" +
    "\036\uff9c\037\uff9c\040\uff9c\001\002\000\044\007\uffa7\011" +
    "\uffa7\012\uffa7\015\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7" +
    "\026\155\027\154\030\uffa7\031\uffa7\032\uffa7\034\uffa7\036" +
    "\uffa7\037\uffa7\040\157\001\002\000\020\010\uff82\025\uff82" +
    "\046\uff82\047\uff82\050\uff82\055\uff82\056\uff82\001\002\000" +
    "\020\010\uff83\025\uff83\046\uff83\047\uff83\050\uff83\055\uff83" +
    "\056\uff83\001\002\000\020\010\150\025\140\046\143\047" +
    "\144\050\147\055\142\056\121\001\002\000\020\010\uff84" +
    "\025\uff84\046\uff84\047\uff84\050\uff84\055\uff84\056\uff84\001" +
    "\002\000\044\007\uffa6\011\uffa6\012\uffa6\015\uffa6\021\uffa6" +
    "\022\uffa6\023\uffa6\024\uffa6\026\uffa6\027\uffa6\030\uffa6\031" +
    "\uffa6\032\uffa6\034\uffa6\036\uffa6\037\uffa6\040\uffa6\001\002" +
    "\000\036\007\uffac\011\uffac\012\uffac\015\162\021\uffac\022" +
    "\uffac\023\uffac\024\uffac\030\163\031\uffac\032\uffac\034\uffac" +
    "\036\uffac\037\uffac\001\002\000\020\010\uff86\025\uff86\046" +
    "\uff86\047\uff86\050\uff86\055\uff86\056\uff86\001\002\000\020" +
    "\010\uff85\025\uff85\046\uff85\047\uff85\050\uff85\055\uff85\056" +
    "\uff85\001\002\000\020\010\150\025\140\046\143\047\144" +
    "\050\147\055\142\056\121\001\002\000\036\007\uffa9\011" +
    "\uffa9\012\uffa9\015\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9" +
    "\030\uffa9\031\uffa9\032\uffa9\034\uffa9\036\uffa9\037\uffa9\001" +
    "\002\000\024\010\uffaa\011\uffb5\025\uffaa\030\135\046\uffaa" +
    "\047\uffaa\050\uffaa\055\uffaa\056\uffaa\001\002\000\004\011" +
    "\174\001\002\000\006\011\uffb6\012\172\001\002\000\006" +
    "\011\uffb3\012\uffb3\001\002\000\022\010\uffaa\025\uffaa\030" +
    "\135\046\uffaa\047\uffaa\050\uffaa\055\uffaa\056\uffaa\001\002" +
    "\000\006\011\uffb4\012\uffb4\001\002\000\044\007\uffa4\011" +
    "\uffa4\012\uffa4\015\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4" +
    "\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\034\uffa4\036" +
    "\uffa4\037\uffa4\040\uffa4\001\002\000\046\007\uff9e\011\uff9e" +
    "\012\uff9e\015\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\026" +
    "\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\034\uff9e\035\176" +
    "\036\uff9e\037\uff9e\040\uff9e\001\002\000\022\010\uffaa\025" +
    "\uffaa\030\135\046\uffaa\047\uffaa\050\uffaa\055\uffaa\056\uffaa" +
    "\001\002\000\004\036\200\001\002\000\044\007\uff9d\011" +
    "\uff9d\012\uff9d\015\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d" +
    "\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\034\uff9d\036" +
    "\uff9d\037\uff9d\040\uff9d\001\002\000\026\005\uffc2\006\uffc2" +
    "\013\uffc2\014\uffc2\041\uffc2\044\uffc2\051\uffc2\052\uffc2\053" +
    "\uffc2\056\uffc2\001\002\000\022\010\uffaa\025\uffaa\030\135" +
    "\046\uffaa\047\uffaa\050\uffaa\055\uffaa\056\uffaa\001\002\000" +
    "\006\011\uffb7\012\uffb7\001\002\000\006\011\206\012\205" +
    "\001\002\000\004\055\210\001\002\000\004\007\207\001" +
    "\002\000\026\005\uffba\006\uffba\013\uffba\014\uffba\041\uffba" +
    "\044\uffba\051\uffba\052\uffba\053\uffba\056\uffba\001\002\000" +
    "\006\011\uffb8\012\uffb8\001\002\000\024\003\213\010\uffaa" +
    "\025\uffaa\030\135\046\uffaa\047\uffaa\050\uffaa\055\uffaa\056" +
    "\uffaa\001\002\000\010\011\uffb1\034\222\037\uffb1\001\002" +
    "\000\004\011\241\001\002\000\024\011\uffad\021\uffad\022" +
    "\uffad\023\uffad\024\uffad\031\uffad\032\uffad\034\uffad\037\uffad" +
    "\001\002\000\024\011\uffaf\021\227\022\226\023\225\024" +
    "\230\031\224\032\231\034\uffaf\037\uffaf\001\002\000\006" +
    "\011\217\037\220\001\002\000\022\005\120\013\126\014" +
    "\130\041\132\044\117\052\124\053\116\056\121\001\002" +
    "\000\022\010\uffaa\025\uffaa\030\135\046\uffaa\047\uffaa\050" +
    "\uffaa\055\uffaa\056\uffaa\001\002\000\010\011\uffb2\034\222" +
    "\037\uffb2\001\002\000\022\010\uffaa\025\uffaa\030\135\046" +
    "\uffaa\047\uffaa\050\uffaa\055\uffaa\056\uffaa\001\002\000\024" +
    "\011\uffb0\021\227\022\226\023\225\024\230\031\224\032" +
    "\231\034\uffb0\037\uffb0\001\002\000\022\010\uff8b\025\uff8b" +
    "\030\uff8b\046\uff8b\047\uff8b\050\uff8b\055\uff8b\056\uff8b\001" +
    "\002\000\022\010\uff88\025\uff88\030\uff88\046\uff88\047\uff88" +
    "\050\uff88\055\uff88\056\uff88\001\002\000\022\010\uff89\025" +
    "\uff89\030\uff89\046\uff89\047\uff89\050\uff89\055\uff89\056\uff89" +
    "\001\002\000\022\010\uff8a\025\uff8a\030\uff8a\046\uff8a\047" +
    "\uff8a\050\uff8a\055\uff8a\056\uff8a\001\002\000\022\010\uff87" +
    "\025\uff87\030\uff87\046\uff87\047\uff87\050\uff87\055\uff87\056" +
    "\uff87\001\002\000\022\010\uff8c\025\uff8c\030\uff8c\046\uff8c" +
    "\047\uff8c\050\uff8c\055\uff8c\056\uff8c\001\002\000\022\010" +
    "\uffaa\025\uffaa\030\135\046\uffaa\047\uffaa\050\uffaa\055\uffaa" +
    "\056\uffaa\001\002\000\024\011\uffae\021\uffae\022\uffae\023" +
    "\uffae\024\uffae\031\uffae\032\uffae\034\uffae\037\uffae\001\002" +
    "\000\024\005\uff99\006\uff99\013\uff99\014\uff99\041\uff99\044" +
    "\uff99\052\uff99\053\uff99\056\uff99\001\002\000\026\005\uffca" +
    "\006\uffca\013\uffca\014\uffca\041\uffca\044\uffca\051\236\052" +
    "\uffca\053\uffca\056\uffca\001\002\000\022\005\120\013\126" +
    "\014\130\041\132\044\117\052\124\053\116\056\121\001" +
    "\002\000\024\005\uff97\006\uff97\013\uff97\014\uff97\041\uff97" +
    "\044\uff97\052\uff97\053\uff97\056\uff97\001\002\000\026\005" +
    "\uffc0\006\uffc0\013\uffc0\014\uffc0\041\uffc0\044\uffc0\051\uffc0" +
    "\052\uffc0\053\uffc0\056\uffc0\001\002\000\022\005\120\013" +
    "\126\014\130\041\132\044\117\052\124\053\116\056\121" +
    "\001\002\000\024\005\uff98\006\uff98\013\uff98\014\uff98\041" +
    "\uff98\044\uff98\052\uff98\053\uff98\056\uff98\001\002\000\026" +
    "\005\uffca\006\uffca\013\uffca\014\uffca\041\uffca\044\uffca\051" +
    "\244\052\uffca\053\uffca\056\uffca\001\002\000\022\005\120" +
    "\013\126\014\130\041\132\044\117\052\124\053\116\056" +
    "\121\001\002\000\024\005\uff96\006\uff96\013\uff96\014\uff96" +
    "\041\uff96\044\uff96\052\uff96\053\uff96\056\uff96\001\002\000" +
    "\026\005\uffbf\006\uffbf\013\uffbf\014\uffbf\041\uffbf\044\uffbf" +
    "\051\uffbf\052\uffbf\053\uffbf\056\uffbf\001\002\000\004\007" +
    "\267\001\002\000\004\007\uff9b\001\002\000\024\003\263" +
    "\010\uffaa\025\uffaa\030\135\046\uffaa\047\uffaa\050\uffaa\055" +
    "\uffaa\056\uffaa\001\002\000\004\007\uff9a\001\002\000\026" +
    "\003\255\010\uffaa\011\uffb5\025\uffaa\030\135\046\uffaa\047" +
    "\uffaa\050\uffaa\055\uffaa\056\uffaa\001\002\000\004\011\261" +
    "\001\002\000\006\007\257\011\256\001\002\000\004\007" +
    "\260\001\002\000\026\005\uffc4\006\uffc4\013\uffc4\014\uffc4" +
    "\041\uffc4\044\uffc4\051\uffc4\052\uffc4\053\uffc4\056\uffc4\001" +
    "\002\000\026\005\uffc5\006\uffc5\013\uffc5\014\uffc5\041\uffc5" +
    "\044\uffc5\051\uffc5\052\uffc5\053\uffc5\056\uffc5\001\002\000" +
    "\004\007\262\001\002\000\026\005\uffc6\006\uffc6\013\uffc6" +
    "\014\uffc6\041\uffc6\044\uffc6\051\uffc6\052\uffc6\053\uffc6\056" +
    "\uffc6\001\002\000\004\007\266\001\002\000\004\007\265" +
    "\001\002\000\026\005\uffc8\006\uffc8\013\uffc8\014\uffc8\041" +
    "\uffc8\044\uffc8\051\uffc8\052\uffc8\053\uffc8\056\uffc8\001\002" +
    "\000\026\005\uffc3\006\uffc3\013\uffc3\014\uffc3\041\uffc3\044" +
    "\uffc3\051\uffc3\052\uffc3\053\uffc3\056\uffc3\001\002\000\026" +
    "\005\uffc7\006\uffc7\013\uffc7\014\uffc7\041\uffc7\044\uffc7\051" +
    "\uffc7\052\uffc7\053\uffc7\056\uffc7\001\002\000\060\007\uff90" +
    "\010\uff90\011\uff90\012\uff90\015\uff90\016\uff90\021\uff90\022" +
    "\uff90\023\uff90\024\uff90\026\uff90\027\uff90\030\uff90\031\uff90" +
    "\032\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90\042" +
    "\uff90\043\uff90\054\uff90\001\002\000\060\007\uff92\010\uff92" +
    "\011\uff92\012\uff92\015\uff92\016\uff92\021\uff92\022\uff92\023" +
    "\uff92\024\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92" +
    "\034\uff92\035\272\036\uff92\037\uff92\040\uff92\042\uff92\043" +
    "\uff92\054\274\001\002\000\024\003\276\010\uffaa\025\uffaa" +
    "\030\135\046\uffaa\047\uffaa\050\uffaa\055\uffaa\056\uffaa\001" +
    "\002\000\060\007\uff91\010\uff91\011\uff91\012\uff91\015\uff91" +
    "\016\uff91\021\uff91\022\uff91\023\uff91\024\uff91\026\uff91\027" +
    "\uff91\030\uff91\031\uff91\032\uff91\034\uff91\035\uff91\036\uff91" +
    "\037\uff91\040\uff91\042\uff91\043\uff91\054\uff91\001\002\000" +
    "\004\056\275\001\002\000\060\007\uff8f\010\uff8f\011\uff8f" +
    "\012\uff8f\015\uff8f\016\uff8f\021\uff8f\022\uff8f\023\uff8f\024" +
    "\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\034\uff8f" +
    "\035\uff8f\036\uff8f\037\uff8f\040\uff8f\042\uff8f\043\uff8f\054" +
    "\uff8f\001\002\000\004\036\301\001\002\000\004\036\300" +
    "\001\002\000\060\007\uff8e\010\uff8e\011\uff8e\012\uff8e\015" +
    "\uff8e\016\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e\026\uff8e" +
    "\027\uff8e\030\uff8e\031\uff8e\032\uff8e\034\uff8e\035\uff8e\036" +
    "\uff8e\037\uff8e\040\uff8e\042\uff8e\043\uff8e\054\uff8e\001\002" +
    "\000\060\007\uff8d\010\uff8d\011\uff8d\012\uff8d\015\uff8d\016" +
    "\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d\026\uff8d\027\uff8d" +
    "\030\uff8d\031\uff8d\032\uff8d\034\uff8d\035\uff8d\036\uff8d\037" +
    "\uff8d\040\uff8d\042\uff8d\043\uff8d\054\uff8d\001\002\000\024" +
    "\005\120\006\303\013\126\014\130\041\132\044\117\052" +
    "\124\053\116\056\121\001\002\000\026\005\uffb9\006\uffb9" +
    "\013\uffb9\014\uffb9\041\uffb9\044\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\056\uffb9\001\002\000\024\003\305\010\uffaa\025\uffaa" +
    "\030\135\046\uffaa\047\uffaa\050\uffaa\055\uffaa\056\uffaa\001" +
    "\002\000\004\011\312\001\002\000\006\011\307\037\220" +
    "\001\002\000\022\005\120\013\126\014\130\041\132\044" +
    "\117\052\124\053\116\056\121\001\002\000\024\005\uff95" +
    "\006\uff95\013\uff95\014\uff95\041\uff95\044\uff95\052\uff95\053" +
    "\uff95\056\uff95\001\002\000\026\005\uffbe\006\uffbe\013\uffbe" +
    "\014\uffbe\041\uffbe\044\uffbe\051\uffbe\052\uffbe\053\uffbe\056" +
    "\uffbe\001\002\000\022\005\120\013\126\014\130\041\132" +
    "\044\117\052\124\053\116\056\121\001\002\000\024\005" +
    "\uff94\006\uff94\013\uff94\014\uff94\041\uff94\044\uff94\052\uff94" +
    "\053\uff94\056\uff94\001\002\000\026\005\uffbd\006\uffbd\013" +
    "\uffbd\014\uffbd\041\uffbd\044\uffbd\051\uffbd\052\uffbd\053\uffbd" +
    "\056\uffbd\001\002\000\004\056\121\001\002\000\004\011" +
    "\317\001\002\000\004\007\320\001\002\000\026\005\uffbb" +
    "\006\uffbb\013\uffbb\014\uffbb\041\uffbb\044\uffbb\051\uffbb\052" +
    "\uffbb\053\uffbb\056\uffbb\001\002\000\010\011\uffcf\012\uffcf" +
    "\035\322\001\002\000\004\036\323\001\002\000\006\011" +
    "\uffce\012\uffce\001\002\000\010\006\uffd8\017\uffd8\056\uffd8" +
    "\001\002\000\010\006\326\017\076\056\014\001\002\000" +
    "\004\002\000\001\002\000\006\007\336\012\335\001\002" +
    "\000\006\007\333\012\332\001\002\000\006\007\uffe9\012" +
    "\uffe9\001\002\000\004\056\061\001\002\000\012\005\uffef" +
    "\033\uffef\045\uffef\056\uffef\001\002\000\006\007\uffea\012" +
    "\uffea\001\002\000\004\056\061\001\002\000\012\005\uffee" +
    "\033\uffee\045\uffee\056\uffee\001\002\000\006\007\uffe8\012" +
    "\uffe8\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\047\006\001\001\000\002\001\001\000\004\020\007" +
    "\001\001\000\014\007\014\021\010\022\016\025\015\051" +
    "\011\001\001\000\002\001\001\000\006\010\327\046\330" +
    "\001\001\000\004\060\323\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\021\001\001\000\004\024\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\041\001\001" +
    "\000\002\001\001\000\004\026\043\001\001\000\002\001" +
    "\001\000\004\051\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\061\050\001\001\000\004\003\051\001" +
    "\001\000\010\005\054\027\055\051\053\001\001\000\004" +
    "\004\071\001\001\000\006\023\061\046\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\074\051\072\052\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\100\001\001\000\002" +
    "\001\001\000\012\011\105\030\106\031\104\051\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\110\051" +
    "\102\001\001\000\002\001\001\000\004\003\112\001\001" +
    "\000\006\005\054\051\053\001\001\000\004\013\114\001" +
    "\001\000\012\014\124\015\121\016\126\050\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\301\001" +
    "\001\000\004\063\267\001\001\000\002\001\001\000\004" +
    "\034\246\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\043\136\054\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\050\140\053\144\055\145\001\001\000\004\051" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\056\160\001\001\000" +
    "\004\057\152\001\001\000\002\001\001\000\006\043\136" +
    "\054\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\050\140\055\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\050\140\053\164\055\145\001" +
    "\001\000\002\001\001\000\012\037\167\043\136\045\166" +
    "\054\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\043\136\054\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\043" +
    "\136\054\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\043\136\054\202\001\001\000" +
    "\004\036\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\035\215\040\211\041\214\043\136\054\213\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\231\001\001\000\002\001\001\000\012\014\233" +
    "\015\121\016\234\050\122\001\001\000\012\040\220\041" +
    "\214\043\136\054\213\001\001\000\002\001\001\000\010" +
    "\041\222\043\136\054\213\001\001\000\004\042\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\043\136\054\232\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\236\016\237\050" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\241\015\121\016\242\050\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\244\016\245\050\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\043\136\054\263\001\001" +
    "\000\002\001\001\000\012\037\167\043\136\045\253\054" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\270\001\001\000\004\033\272\001\001\000\006" +
    "\043\136\054\276\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\124\015" +
    "\121\016\126\050\122\001\001\000\002\001\001\000\014" +
    "\035\305\040\211\041\214\043\136\054\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\307\016\310" +
    "\050\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\312\016\313\050\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\315\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\324\001" +
    "\001\000\010\006\074\051\072\052\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\333\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\336\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	Tab.init();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		System.out.println(s.toString() + " " + s.value.toString());
	return s;

    }


	//promenljive za brojanje pojavljivanja odredjenih elemenata
	
	int globalCharVarCount = 0; //TODO: R40
	int globalArrayCount = 0; //R41
	int funcCount = 0; //R42
	int classCount = 0; //R43
	int statementBlocks = 0; //R44
	int funcCallsInMain = 0; //TODO: R45
	int newStatementCount = 0; //R46
	int classMethodCount = 0; //R47
	int classFieldCount = 0; //R48
	int classDerivationCount = 0; //R49

    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
    boolean greska;
     
   public void report_fatal_error(String message, Object   info) throws java.lang.Exception {
   	  greska=true;
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info)
    {
      greska=true;
      System.err.print(message);
      System.err.flush();
      if (info instanceof Symbol)
          System.err.println(" na liniji " + ((Symbol)info).left);
      else System.err.println("");
    }
    
    public void report_info(String message, Object info)
    {
      System.out.print(message);
      System.out.flush();
      if (info instanceof Symbol)
          System.out.println(" na liniji " + ((Symbol)info).left);
      else System.out.println("");
    }
    
    public void printCounts() {
    	System.out.println("Broj elemenata: ");
    	System.out.println("Deklaracije globalnih nizova - " + globalArrayCount);
    	System.out.println("Definicije funkcija u glavnom programu - " + funcCount);
    	System.out.println("Definicije unutrasnjih klasa - " + classCount);
    	System.out.println("Blokovi naredbi - " + statementBlocks);
    	System.out.println("Naredbe stvaranja objekta - " + newStatementCount);
    	System.out.println("Definicije metoda unutrasnjih klasa - " + classMethodCount);
    	System.out.println("Definicije polja unutrasnjih klasa - " + classFieldCount);
    	System.out.println("Izvodjenja klasa - " + classDerivationCount);
    }
    
    public static void main(String args[]) throws Exception {
        FileReader r = new FileReader(args[0]);
        Yylex skener = new Yylex(r);
        MJParser p = new MJParser(skener);
        Symbol s = p.parse();  //pocetak parsiranja
        Tab.dump();
        if (p.greska) 
        	System.out.println("Ulazni program ima gresaka!");
        else {
        	p.printCounts();
        	System.out.println("Parsiranje uspesno zavrseno!");
        }
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {



	boolean global = true;
	boolean classDef = false;
	boolean methodDef = false;
	Struct var_type=Tab.noType;
	Obj currentMethod = null;
	boolean returnFound = false;
	int currentLevel = -1;
	

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Mulop ::= MOD 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Mulop ::= DIV 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Mulop ::= TIMES 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Addop ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Addop ::= PLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Relop ::= LTE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Relop ::= LT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Relop ::= GTE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Relop ::= GT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Relop ::= NOT_EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Relop ::= IS_EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // IdentRef ::= LSQUARE error RSQUARE 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri indeksiranju niza.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentRef",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // IdentRef ::= LSQUARE Expr RSQUARE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentRef",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // IdentRef ::= DOT IDENT 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentRef",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // IdentList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // IdentList ::= IdentList IdentRef 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Designator ::= IDENT NT$3 IdentList 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$3 ::= 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

	Obj obj = Tab.find(name);
	if (obj == Tab.noObj) {
		parser.report_error("Semanticka greska na liniji "+nameleft+": ime "+name+" nije deklarisano.", null);
	}
	RESULT = obj;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Unmatched ::= WHILE LPAREN error RPAREN Unmatched 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" unutar izraza u while konstrukciji.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Unmatched ::= WHILE LPAREN Condition RPAREN Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Unmatched ::= IF LPAREN error RPAREN Matched ELSE Unmatched 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" unutar izraza u if konstrukciji.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Unmatched ::= IF LPAREN Condition RPAREN Matched ELSE Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Unmatched ::= IF LPAREN error RPAREN Statement 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" unutar izraza u if konstrukciji.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Unmatched ::= IF LPAREN Condition RPAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DesignatorsFollowUp ::= DEC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorsFollowUp",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DesignatorsFollowUp ::= INC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorsFollowUp",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Factor ::= LPAREN Expr RPAREN 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Factor ::= NEW Type LSQUARE Expr RSQUARE 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Factor ::= NEW Type 
            {
              Struct RESULT =null;
		
				parser.newStatementCount++;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Factor ::= STRCONST 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Factor ::= BOOLCONST 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Factor ::= CHARCONST 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Factor ::= NUMBER 
            {
              Struct RESULT =null;
		 RESULT = Tab.intType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Factor ::= Designator 
            {
              Struct RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = d.getType(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Factor ::= Designator LPAREN ActParams RPAREN 
            {
              Struct RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
	if (Obj.Meth == func.getKind()) {
		parser.report_info("Pronadjen poziv funkcije "+func.getName()+" na liniji "+funcleft, null);
		RESULT = func.getType();
	}
	else {
		parser.report_error("Semanticka greska na liniji "+funcleft+": ime "+func.getName()+" nije funkcija.", null);
		RESULT = Tab.noType;
	}
	

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // MulList ::= 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulList",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // MulList ::= MulList Mulop Factor 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	//semanticka provera kompatibilnosti tipova? epsilon smena?
	RESULT = t;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulList",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Term ::= Factor MulList 
            {
              Struct RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct te = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	//uporedi te i t tipove - semanticka provera
	RESULT = te;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // AddList ::= 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddList",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // AddList ::= AddList Addop Term 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	//semanticka provera kompatibilnosti tipova? epsilon smena?
	RESULT = t;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddList",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Sign ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Sign",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Sign ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Sign",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Sign Term AddList 
            {
              Struct RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct te = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (te.equals(t) && te==Tab.intType)
		RESULT = te;
	else {
		parser.report_error("Semanticka greska na liniji "+teleft+": nekompatibilni tipovu u izrazu za sabiranje", null);
		RESULT = Tab.noType;
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CondFact ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CondFact ::= CondFact Relop Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CondTerm ::= CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CondTerm ::= CondTerm AND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Condition ::= CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Condition ::= Condition OR CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ActPars ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ActPars ::= ActPars COMMA Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ActParams ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParams",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ActParams ::= ActPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParams",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OptNumbers ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptNumbers",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OptNumbers ::= OptNumbers COMMA NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptNumbers",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Matched ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
		
						parser.statementBlocks++;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Matched ::= PRINT LPAREN Expr OptNumbers RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Matched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Matched ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Matched ::= WHILE LPAREN error RPAREN Matched 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" unutar izraza u while konstrukciji.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Matched ::= WHILE LPAREN Condition RPAREN Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Matched ::= IF LPAREN error RPAREN Matched ELSE Matched 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" unutar izraza u if konstrukciji.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Matched ::= IF LPAREN Condition RPAREN Matched ELSE Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Matched ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Matched ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					returnFound = true;
					Struct currMethType = currentMethod.getType();
					if (!currMethType.compatibleWith(t)) {
						parser.report_error("Semanticka greska na liniji "+tleft+": tip izraza u return naredbi se ne slaze sa tipom povratne vrednosti funkcije "+currentMethod.getName(),null);
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Matched ::= Designator EQUAL error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri iskazu dodele vrednosti.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Matched ::= Designator LPAREN error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri pozivu funkcije.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Matched ::= Designator LPAREN error RPAREN SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri zadavanju liste parametara u pozivu funkcije",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Matched ::= Designator LPAREN ActParams RPAREN SEMI 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
	if (Obj.Meth == func.getKind()) {
		parser.report_info("Pronadjen poziv funkcije "+func.getName()+" na liniji "+funcleft, null);
		RESULT = func.getType();
	}
	else {
		parser.report_error("Semanticka greska na liniji "+funcleft+": ime "+func.getName()+" nije funkcija.", null);
		RESULT = Tab.noType;
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Matched ::= Designator DesignatorsFollowUp SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Matched ::= Designator EQUAL Expr SEMI 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
	if (!e.assignableTo(dest.getType())) {
		parser.report_error("Semanticka greska na liniji "+destleft+": izraz tipa "+e+" ne moze biti dodeljen tipu "+dest.getType(),null);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Parameter ::= error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.report_error("Izvrsen oporavak do , ili ) u liniji "+lleft+" pri deklaraciji formalnog parametra funkcije",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Parameter",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Parameter ::= Type IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Parameter",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Parameter ::= Type IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Parameter",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FormPars ::= Parameter 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FormPars ::= FormPars COMMA Parameter 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FormalParams ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParams",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FormalParams ::= FormPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParams",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ReturnType ::= VOID 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnType",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ReturnType ::= Type 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnType",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MethodDecl ::= ReturnType IDENT NT$2 LPAREN FormalParams RPAREN VarDeclList LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		
					methodDef = false;
					if (!classDef)
						parser.funcCount++;
					else
						parser.classMethodCount++;
					parser.statementBlocks++;
					
					if (!returnFound && retType != Tab.noType) {
						parser.report_error("Semanticka greska na liniji " +methNameleft+": funkcija "+methName+" nema return iskaz.", null);
					}
					returnFound = false;
					currentMethod = null;
					Tab.chainLocalSymbols(currentMethod);
					Tab.closeScope();
					currentLevel--;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$2 ::= 
            {
              Object RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 
					currentMethod = Tab.insert(Obj.Meth, methName, retType);
					Tab.openScope();
					currentLevel++;
					methodDef = true;
					parser.report_info("Obradjuje se funkcija na liniji "+methNameleft, null);
				 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ClassMethods ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethods",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ClassMethods ::= LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethods",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VarDeclList ::= VarDeclList VarDecl 
            {
              Object RESULT =null;
		
					if (classDef && !methodDef) {
						parser.classFieldCount++;
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Ext ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Ext",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Ext ::= error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.report_error("Izvrsen oporavak do { u liniji "+lleft+" pri deklaraciji prosirenja natklase.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Ext",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Ext ::= EXTENDS Type 
            {
              Object RESULT =null;
		
			parser.classDerivationCount++;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Ext",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassDecl ::= CLASS IDENT Ext LBRACE NT$1 VarDeclList ClassMethods RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
					parser.classCount++;
					classDef = false;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$1 ::= 
            {
              Object RESULT =null;

					classDef = true;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	
	Obj typeNode = Tab.find(typeName);
	if (typeNode == Tab.noObj) {
		parser.report_error("Semanticka greska na liniji "+typeNameleft+ ": Nije pronadjen tip " + typeName + " u tabeli simbola.", null);
		var_type = RESULT = Tab.noType;
	}
	else {
		if (Obj.Type == typeNode.getKind()) {
			var_type = RESULT = typeNode.getType();
		}
		else {
			parser.report_error("Semanticka greska na liniji "+typeNameleft+ ": Ime " + typeName + " ne predstavlja tip.", null);
			var_type = RESULT = Tab.noType;
		}
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Var ::= IDENT LSQUARE RSQUARE 
            {
              String RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
			if (global && !classDef)
				parser.globalArrayCount++;
			RESULT = varName;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Var ::= IDENT 
            {
              String RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = varName;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VarList ::= Var 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	Obj temp = Tab.find(varName);
	if (temp.getLevel() == currentLevel) {
		parser.report_error("Semanticka greska na liniji "+varNameleft+": redefinicija promenljive "+varName, null);
	}
	else {
		Tab.insert(Obj.Var, varName, var_type);
		parser.report_info("Deklarisana promenljiva "+varName+" na liniji "+varNameleft, null);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VarList ::= VarList COMMA Var 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
			
	Obj temp = Tab.find(varName);
	if (temp.getLevel() == currentLevel) {
		parser.report_error("Semanticka greska na liniji "+varNameleft+": redefinicija promenljive "+varName, null);
	}
	else {
		Tab.insert(Obj.Var, varName, var_type);
		parser.report_info("Deklarisana promenljiva "+varName+" na liniji "+varNameleft, null);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // GlobalVarList ::= error COMMA Var 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
Tab.insert(Obj.Var, varName, var_type); parser.report_error("Izvrsen oporavak do , u liniji "+lleft+" pri definiciji globalne promenljive",null); 

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // GlobalVarList ::= Var 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	Obj temp = Tab.find(varName);
	if (temp.getLevel() == currentLevel) {
		parser.report_error("Semanticka greska na liniji "+varNameleft+": redefinicija globalne promenljive "+varName, null);
	}
	else {
		Tab.insert(Obj.Var, varName, var_type);
		parser.report_info("Deklarisana globalna promenljiva "+varName+" na liniji "+varNameleft, null);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // GlobalVarList ::= GlobalVarList COMMA Var 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	Obj temp = Tab.find(varName);
	if (temp.getLevel() == currentLevel) {
		parser.report_error("Semanticka greska na liniji "+varNameleft+": redefinicija promenljive "+varName, null);
	}
	else {
		Tab.insert(Obj.Var, varName, var_type);
		parser.report_info("Deklarisana promenljiva "+varName+" na liniji "+varNameleft, null);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarDecl ::= Type error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.report_error("Izvrsen oporavak do { u liniji "+lleft+" pri definiciji lokalne promenljive/polja unutrasnje klase",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarDecl ::= Type error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri definiciji lokalne promenljive/polja unutrasnje klase",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDecl ::= Type VarList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // GlobalVarDecl ::= Type error SEMI 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri definiciji globalne promenljive",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GlobalVarDecl ::= Type GlobalVarList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Rhs ::= STRCONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Rhs",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Rhs ::= BOOLCONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Rhs",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Rhs ::= CHARCONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Rhs",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Rhs ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Rhs",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstPart ::= ConstPart COMMA IDENT EQUAL Rhs 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstPart",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstPart ::= IDENT error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstPart",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstPart ::= IDENT EQUAL Rhs 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstPart",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstDecl ::= CONST error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri definiciji globalne promenljive tipa konstante",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDecl ::= CONST Type ConstPart SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclarationPart ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationPart",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclarationPart ::= GlobalVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationPart",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclarationPart ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationPart",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclarationList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclarationList ::= DeclarationList DeclarationPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = Tab.insert(Obj.Prog, pName, Tab.noType);
	Tab.openScope();
	currentLevel++;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= PROGRAM ProgName DeclarationList LBRACE NT$0 MethodDeclList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		
	Tab.chainLocalSymbols(p);
	Tab.closeScope();
	currentLevel--;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

						global = false;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

