
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jan 29 16:30:17 CET 2015
//----------------------------------------------------

package rs.ac.bg.etf.pp1.sv110059;

import java_cup.runtime.*;
import java.io.*;
import rs.etf.pp1.symboltable.*;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.visitors.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jan 29 16:30:17 CET 2015
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\062\002\000\002\002\011\000\002\002" +
    "\004\000\002\047\003\000\002\021\004\000\002\021\002" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\023\006\000\002\023\005\000\002\025\005\000\002" +
    "\025\004\000\002\025\007\000\002\051\003\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\007\005\000\002\007\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\004\000\002\010\005\000\002" +
    "\010\003\000\002\010\005\000\002\024\005\000\002\024" +
    "\003\000\002\013\003\000\002\013\005\000\002\052\003" +
    "\000\002\063\002\000\002\026\012\000\002\027\004\000" +
    "\002\027\003\000\002\027\002\000\002\003\004\000\002" +
    "\003\002\000\002\030\005\000\002\030\002\000\002\004" +
    "\004\000\002\004\002\000\002\064\002\000\002\006\014" +
    "\000\002\053\003\000\002\053\003\000\002\032\003\000" +
    "\002\032\002\000\002\011\005\000\002\011\003\000\002" +
    "\031\004\000\002\031\006\000\002\031\003\000\002\014" +
    "\004\000\002\014\002\000\002\015\003\000\002\015\003" +
    "\000\002\017\006\000\002\017\005\000\002\017\007\000" +
    "\002\017\007\000\002\017\006\000\002\017\006\000\002" +
    "\017\005\000\002\017\004\000\002\017\011\000\002\017" +
    "\011\000\002\017\007\000\002\017\007\000\002\017\004" +
    "\000\002\017\007\000\002\017\010\000\002\017\005\000" +
    "\002\020\003\000\002\037\004\000\002\037\002\000\002" +
    "\046\003\000\002\046\002\000\002\040\005\000\002\040" +
    "\003\000\002\036\005\000\002\036\003\000\002\041\005" +
    "\000\002\041\003\000\002\042\005\000\002\042\003\000" +
    "\002\055\005\000\002\044\003\000\002\044\002\000\002" +
    "\057\005\000\002\057\002\000\002\054\004\000\002\060" +
    "\005\000\002\060\002\000\002\056\006\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\004\000\002\056\007\000\002" +
    "\056\005\000\002\035\003\000\002\035\003\000\002\016" +
    "\007\000\002\016\007\000\002\016\011\000\002\016\011" +
    "\000\002\016\007\000\002\016\007\000\002\065\002\000" +
    "\002\050\005\000\002\033\004\000\002\033\002\000\002" +
    "\034\004\000\002\034\005\000\002\034\005\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\012\003\000" +
    "\002\012\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\004\004\005\001\002\000\004\002\342\001" +
    "\002\000\004\056\006\001\002\000\012\005\ufffe\033\ufffe" +
    "\045\ufffe\056\ufffe\001\002\000\012\005\ufffc\033\ufffc\045" +
    "\ufffc\056\ufffc\001\002\000\012\005\013\033\021\045\020" +
    "\056\014\001\002\000\012\005\ufffd\033\ufffd\045\ufffd\056" +
    "\ufffd\001\002\000\006\003\331\056\062\001\002\000\010" +
    "\006\001\017\001\056\001\001\002\000\054\003\uffe2\005" +
    "\uffe2\007\uffe2\011\uffe2\012\uffe2\015\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\056\uffe2" +
    "\001\002\000\012\005\ufffa\033\ufffa\045\ufffa\056\ufffa\001" +
    "\002\000\012\005\ufff9\033\ufff9\045\ufff9\056\ufff9\001\002" +
    "\000\012\005\ufffb\033\ufffb\045\ufffb\056\ufffb\001\002\000" +
    "\004\056\044\001\002\000\006\003\023\056\014\001\002" +
    "\000\004\056\027\001\002\000\004\007\024\001\002\000" +
    "\012\005\ufff7\033\ufff7\045\ufff7\056\ufff7\001\002\000\006" +
    "\007\040\012\037\001\002\000\006\003\030\016\031\001" +
    "\002\000\006\003\ufff3\016\ufff3\001\002\000\006\007\ufff5" +
    "\012\ufff5\001\002\000\012\046\036\047\035\050\033\055" +
    "\032\001\002\000\006\007\ufff2\012\ufff2\001\002\000\006" +
    "\007\uffef\012\uffef\001\002\000\006\007\ufff6\012\ufff6\001" +
    "\002\000\006\007\ufff0\012\ufff0\001\002\000\006\007\ufff1" +
    "\012\ufff1\001\002\000\004\056\027\001\002\000\012\005" +
    "\ufff8\033\ufff8\045\ufff8\056\ufff8\001\002\000\004\016\042" +
    "\001\002\000\012\046\036\047\035\050\033\055\032\001" +
    "\002\000\006\007\ufff4\012\ufff4\001\002\000\010\003\047" +
    "\005\uffdd\020\046\001\002\000\004\005\051\001\002\000" +
    "\004\056\014\001\002\000\004\005\uffde\001\002\000\004" +
    "\005\uffdf\001\002\000\010\005\uffe1\006\uffe1\056\uffe1\001" +
    "\002\000\010\005\uffdb\006\uffdb\056\uffdb\001\002\000\010" +
    "\005\054\006\uffd9\056\014\001\002\000\010\006\uffd7\017" +
    "\uffd7\056\uffd7\001\002\000\006\003\061\056\062\001\002" +
    "\000\010\005\uffdc\006\uffdc\056\uffdc\001\002\000\004\006" +
    "\060\001\002\000\012\005\uffe0\033\uffe0\045\uffe0\056\uffe0" +
    "\001\002\000\012\005\uffea\006\uffea\007\072\056\uffea\001" +
    "\002\000\010\007\uffe4\012\uffe4\035\070\001\002\000\006" +
    "\007\uffe5\012\uffe5\001\002\000\006\007\066\012\065\001" +
    "\002\000\004\056\062\001\002\000\010\005\uffec\006\uffec" +
    "\056\uffec\001\002\000\006\007\uffe6\012\uffe6\001\002\000" +
    "\004\036\071\001\002\000\006\007\uffe3\012\uffe3\001\002" +
    "\000\010\005\uffeb\006\uffeb\056\uffeb\001\002\000\010\006" +
    "\075\017\077\056\014\001\002\000\004\056\uffd4\001\002" +
    "\000\004\006\uffda\001\002\000\010\006\uffd8\017\uffd8\056" +
    "\uffd8\001\002\000\004\056\uffd3\001\002\000\004\056\101" +
    "\001\002\000\004\010\uffd6\001\002\000\004\010\103\001" +
    "\002\000\010\003\105\011\uffd1\056\014\001\002\000\004" +
    "\056\323\001\002\000\006\011\uffcc\012\uffcc\001\002\000" +
    "\006\011\uffd2\012\321\001\002\000\004\011\111\001\002" +
    "\000\006\011\uffcf\012\uffcf\001\002\000\006\005\uffdb\056" +
    "\uffdb\001\002\000\006\005\113\056\014\001\002\000\024" +
    "\005\uffca\006\uffca\013\uffca\014\uffca\041\uffca\044\uffca\052" +
    "\uffca\053\uffca\056\uffca\001\002\000\024\005\117\006\131" +
    "\013\126\014\130\041\132\044\116\052\124\053\115\056" +
    "\120\001\002\000\004\010\315\001\002\000\004\010\uffb7" +
    "\001\002\000\024\005\uffca\006\uffca\013\uffca\014\uffca\041" +
    "\uffca\044\uffca\052\uffca\053\uffca\056\uffca\001\002\000\060" +
    "\007\uff91\010\uff91\011\uff91\012\uff91\015\uff91\016\uff91\021" +
    "\uff91\022\uff91\023\uff91\024\uff91\026\uff91\027\uff91\030\uff91" +
    "\031\uff91\032\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040" +
    "\uff91\042\uff91\043\uff91\054\uff91\001\002\000\012\010\264" +
    "\016\261\042\262\043\263\001\002\000\004\010\247\001" +
    "\002\000\024\005\uffc8\006\uffc8\013\uffc8\014\uffc8\041\uffc8" +
    "\044\uffc8\052\uffc8\053\uffc8\056\uffc8\001\002\000\004\010" +
    "\211\001\002\000\024\005\uffcb\006\uffcb\013\uffcb\014\uffcb" +
    "\041\uffcb\044\uffcb\052\uffcb\053\uffcb\056\uffcb\001\002\000" +
    "\004\010\202\001\002\000\024\005\uffc9\006\uffc9\013\uffc9" +
    "\014\uffc9\041\uffc9\044\uffc9\052\uffc9\053\uffc9\056\uffc9\001" +
    "\002\000\024\007\136\010\uffa8\025\uffa8\030\135\046\uffa8" +
    "\047\uffa8\050\uffa8\055\uffa8\056\uffa8\001\002\000\010\006" +
    "\uffd5\017\uffd5\056\uffd5\001\002\000\004\007\133\001\002" +
    "\000\026\005\uffbb\006\uffbb\013\uffbb\014\uffbb\041\uffbb\044" +
    "\uffbb\051\uffbb\052\uffbb\053\uffbb\056\uffbb\001\002\000\004" +
    "\007\201\001\002\000\020\010\uffa9\025\uffa9\046\uffa9\047" +
    "\uffa9\050\uffa9\055\uffa9\056\uffa9\001\002\000\026\005\uffc0" +
    "\006\uffc0\013\uffc0\014\uffc0\041\uffc0\044\uffc0\051\uffc0\052" +
    "\uffc0\053\uffc0\056\uffc0\001\002\000\020\010\150\025\140" +
    "\046\143\047\144\050\147\055\142\056\120\001\002\000" +
    "\004\056\014\001\002\000\046\007\uffa1\010\166\011\uffa1" +
    "\012\uffa1\015\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\026" +
    "\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\034\uffa1\036\uffa1" +
    "\037\uffa1\040\uffa1\001\002\000\044\007\uffa0\011\uffa0\012" +
    "\uffa0\015\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\026\uffa0" +
    "\027\uffa0\030\uffa0\031\uffa0\032\uffa0\034\uffa0\036\uffa0\037" +
    "\uffa0\040\uffa0\001\002\000\044\007\uff9f\011\uff9f\012\uff9f" +
    "\015\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\026\uff9f\027" +
    "\uff9f\030\uff9f\031\uff9f\032\uff9f\034\uff9f\036\uff9f\037\uff9f" +
    "\040\uff9f\001\002\000\044\007\uff9e\011\uff9e\012\uff9e\015" +
    "\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\026\uff9e\027\uff9e" +
    "\030\uff9e\031\uff9e\032\uff9e\034\uff9e\036\uff9e\037\uff9e\040" +
    "\uff9e\001\002\000\036\007\uffa6\011\uffa6\012\uffa6\015\uffa6" +
    "\021\uffa6\022\uffa6\023\uffa6\024\uffa6\030\uffa6\031\uffa6\032" +
    "\uffa6\034\uffa6\036\uffa6\037\uffa6\001\002\000\044\007\uffa3" +
    "\011\uffa3\012\uffa3\015\uffa3\021\uffa3\022\uffa3\023\uffa3\024" +
    "\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\034\uffa3" +
    "\036\uffa3\037\uffa3\040\uffa3\001\002\000\044\007\uff9d\011" +
    "\uff9d\012\uff9d\015\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d" +
    "\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\034\uff9d\036" +
    "\uff9d\037\uff9d\040\uff9d\001\002\000\022\010\uffa8\025\uffa8" +
    "\030\135\046\uffa8\047\uffa8\050\uffa8\055\uffa8\056\uffa8\001" +
    "\002\000\004\011\152\001\002\000\044\007\uff9a\011\uff9a" +
    "\012\uff9a\015\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\026" +
    "\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\034\uff9a\036\uff9a" +
    "\037\uff9a\040\uff9a\001\002\000\044\007\uffa5\011\uffa5\012" +
    "\uffa5\015\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\026\155" +
    "\027\154\030\uffa5\031\uffa5\032\uffa5\034\uffa5\036\uffa5\037" +
    "\uffa5\040\157\001\002\000\020\010\uff80\025\uff80\046\uff80" +
    "\047\uff80\050\uff80\055\uff80\056\uff80\001\002\000\020\010" +
    "\uff81\025\uff81\046\uff81\047\uff81\050\uff81\055\uff81\056\uff81" +
    "\001\002\000\020\010\150\025\140\046\143\047\144\050" +
    "\147\055\142\056\120\001\002\000\020\010\uff82\025\uff82" +
    "\046\uff82\047\uff82\050\uff82\055\uff82\056\uff82\001\002\000" +
    "\044\007\uffa4\011\uffa4\012\uffa4\015\uffa4\021\uffa4\022\uffa4" +
    "\023\uffa4\024\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032" +
    "\uffa4\034\uffa4\036\uffa4\037\uffa4\040\uffa4\001\002\000\036" +
    "\007\uffaa\011\uffaa\012\uffaa\015\162\021\uffaa\022\uffaa\023" +
    "\uffaa\024\uffaa\030\163\031\uffaa\032\uffaa\034\uffaa\036\uffaa" +
    "\037\uffaa\001\002\000\020\010\uff84\025\uff84\046\uff84\047" +
    "\uff84\050\uff84\055\uff84\056\uff84\001\002\000\020\010\uff83" +
    "\025\uff83\046\uff83\047\uff83\050\uff83\055\uff83\056\uff83\001" +
    "\002\000\020\010\150\025\140\046\143\047\144\050\147" +
    "\055\142\056\120\001\002\000\036\007\uffa7\011\uffa7\012" +
    "\uffa7\015\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\030\uffa7" +
    "\031\uffa7\032\uffa7\034\uffa7\036\uffa7\037\uffa7\001\002\000" +
    "\024\010\uffa8\011\uffb3\025\uffa8\030\135\046\uffa8\047\uffa8" +
    "\050\uffa8\055\uffa8\056\uffa8\001\002\000\004\011\174\001" +
    "\002\000\006\011\uffb4\012\172\001\002\000\006\011\uffb1" +
    "\012\uffb1\001\002\000\022\010\uffa8\025\uffa8\030\135\046" +
    "\uffa8\047\uffa8\050\uffa8\055\uffa8\056\uffa8\001\002\000\006" +
    "\011\uffb2\012\uffb2\001\002\000\044\007\uffa2\011\uffa2\012" +
    "\uffa2\015\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\026\uffa2" +
    "\027\uffa2\030\uffa2\031\uffa2\032\uffa2\034\uffa2\036\uffa2\037" +
    "\uffa2\040\uffa2\001\002\000\046\007\uff9c\011\uff9c\012\uff9c" +
    "\015\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\026\uff9c\027" +
    "\uff9c\030\uff9c\031\uff9c\032\uff9c\034\uff9c\035\176\036\uff9c" +
    "\037\uff9c\040\uff9c\001\002\000\022\010\uffa8\025\uffa8\030" +
    "\135\046\uffa8\047\uffa8\050\uffa8\055\uffa8\056\uffa8\001\002" +
    "\000\004\036\200\001\002\000\044\007\uff9b\011\uff9b\012" +
    "\uff9b\015\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\026\uff9b" +
    "\027\uff9b\030\uff9b\031\uff9b\032\uff9b\034\uff9b\036\uff9b\037" +
    "\uff9b\040\uff9b\001\002\000\026\005\uffc1\006\uffc1\013\uffc1" +
    "\014\uffc1\041\uffc1\044\uffc1\051\uffc1\052\uffc1\053\uffc1\056" +
    "\uffc1\001\002\000\022\010\uffa8\025\uffa8\030\135\046\uffa8" +
    "\047\uffa8\050\uffa8\055\uffa8\056\uffa8\001\002\000\006\011" +
    "\uffb5\012\204\001\002\000\004\055\210\001\002\000\004" +
    "\011\206\001\002\000\004\007\207\001\002\000\026\005" +
    "\uffb9\006\uffb9\013\uffb9\014\uffb9\041\uffb9\044\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\056\uffb9\001\002\000\004\011\uffb6\001" +
    "\002\000\024\003\213\010\uffa8\025\uffa8\030\135\046\uffa8" +
    "\047\uffa8\050\uffa8\055\uffa8\056\uffa8\001\002\000\010\011" +
    "\uffaf\034\222\037\uffaf\001\002\000\004\011\241\001\002" +
    "\000\024\011\uffab\021\uffab\022\uffab\023\uffab\024\uffab\031" +
    "\uffab\032\uffab\034\uffab\037\uffab\001\002\000\024\011\uffad" +
    "\021\227\022\225\023\226\024\230\031\224\032\231\034" +
    "\uffad\037\uffad\001\002\000\006\011\217\037\220\001\002" +
    "\000\022\005\117\013\126\014\130\041\132\044\116\052" +
    "\124\053\115\056\120\001\002\000\022\010\uffa8\025\uffa8" +
    "\030\135\046\uffa8\047\uffa8\050\uffa8\055\uffa8\056\uffa8\001" +
    "\002\000\010\011\uffb0\034\222\037\uffb0\001\002\000\022" +
    "\010\uffa8\025\uffa8\030\135\046\uffa8\047\uffa8\050\uffa8\055" +
    "\uffa8\056\uffa8\001\002\000\024\011\uffae\021\227\022\225" +
    "\023\226\024\230\031\224\032\231\034\uffae\037\uffae\001" +
    "\002\000\022\010\uff89\025\uff89\030\uff89\046\uff89\047\uff89" +
    "\050\uff89\055\uff89\056\uff89\001\002\000\022\010\uff87\025" +
    "\uff87\030\uff87\046\uff87\047\uff87\050\uff87\055\uff87\056\uff87" +
    "\001\002\000\022\010\uff86\025\uff86\030\uff86\046\uff86\047" +
    "\uff86\050\uff86\055\uff86\056\uff86\001\002\000\022\010\uff88" +
    "\025\uff88\030\uff88\046\uff88\047\uff88\050\uff88\055\uff88\056" +
    "\uff88\001\002\000\022\010\uff85\025\uff85\030\uff85\046\uff85" +
    "\047\uff85\050\uff85\055\uff85\056\uff85\001\002\000\022\010" +
    "\uff8a\025\uff8a\030\uff8a\046\uff8a\047\uff8a\050\uff8a\055\uff8a" +
    "\056\uff8a\001\002\000\022\010\uffa8\025\uffa8\030\135\046" +
    "\uffa8\047\uffa8\050\uffa8\055\uffa8\056\uffa8\001\002\000\024" +
    "\011\uffac\021\uffac\022\uffac\023\uffac\024\uffac\031\uffac\032" +
    "\uffac\034\uffac\037\uffac\001\002\000\024\005\uff97\006\uff97" +
    "\013\uff97\014\uff97\041\uff97\044\uff97\052\uff97\053\uff97\056" +
    "\uff97\001\002\000\026\005\uffc9\006\uffc9\013\uffc9\014\uffc9" +
    "\041\uffc9\044\uffc9\051\236\052\uffc9\053\uffc9\056\uffc9\001" +
    "\002\000\022\005\117\013\126\014\130\041\132\044\116" +
    "\052\124\053\115\056\120\001\002\000\024\005\uff95\006" +
    "\uff95\013\uff95\014\uff95\041\uff95\044\uff95\052\uff95\053\uff95" +
    "\056\uff95\001\002\000\026\005\uffbf\006\uffbf\013\uffbf\014" +
    "\uffbf\041\uffbf\044\uffbf\051\uffbf\052\uffbf\053\uffbf\056\uffbf" +
    "\001\002\000\022\005\117\013\126\014\130\041\132\044" +
    "\116\052\124\053\115\056\120\001\002\000\024\005\uff96" +
    "\006\uff96\013\uff96\014\uff96\041\uff96\044\uff96\052\uff96\053" +
    "\uff96\056\uff96\001\002\000\026\005\uffc9\006\uffc9\013\uffc9" +
    "\014\uffc9\041\uffc9\044\uffc9\051\244\052\uffc9\053\uffc9\056" +
    "\uffc9\001\002\000\022\005\117\013\126\014\130\041\132" +
    "\044\116\052\124\053\115\056\120\001\002\000\024\005" +
    "\uff94\006\uff94\013\uff94\014\uff94\041\uff94\044\uff94\052\uff94" +
    "\053\uff94\056\uff94\001\002\000\026\005\uffbe\006\uffbe\013" +
    "\uffbe\014\uffbe\041\uffbe\044\uffbe\051\uffbe\052\uffbe\053\uffbe" +
    "\056\uffbe\001\002\000\024\003\250\010\uffa8\025\uffa8\030" +
    "\135\046\uffa8\047\uffa8\050\uffa8\055\uffa8\056\uffa8\001\002" +
    "\000\004\011\255\001\002\000\006\011\252\037\220\001" +
    "\002\000\022\005\117\013\126\014\130\041\132\044\116" +
    "\052\124\053\115\056\120\001\002\000\024\005\uff93\006" +
    "\uff93\013\uff93\014\uff93\041\uff93\044\uff93\052\uff93\053\uff93" +
    "\056\uff93\001\002\000\026\005\uffbd\006\uffbd\013\uffbd\014" +
    "\uffbd\041\uffbd\044\uffbd\051\uffbd\052\uffbd\053\uffbd\056\uffbd" +
    "\001\002\000\022\005\117\013\126\014\130\041\132\044" +
    "\116\052\124\053\115\056\120\001\002\000\024\005\uff92" +
    "\006\uff92\013\uff92\014\uff92\041\uff92\044\uff92\052\uff92\053" +
    "\uff92\056\uff92\001\002\000\026\005\uffbc\006\uffbc\013\uffbc" +
    "\014\uffbc\041\uffbc\044\uffbc\051\uffbc\052\uffbc\053\uffbc\056" +
    "\uffbc\001\002\000\004\007\300\001\002\000\024\003\274" +
    "\010\uffa8\025\uffa8\030\135\046\uffa8\047\uffa8\050\uffa8\055" +
    "\uffa8\056\uffa8\001\002\000\004\007\uff99\001\002\000\004" +
    "\007\uff98\001\002\000\026\003\266\010\uffa8\011\uffb3\025" +
    "\uffa8\030\135\046\uffa8\047\uffa8\050\uffa8\055\uffa8\056\uffa8" +
    "\001\002\000\004\011\272\001\002\000\006\007\270\011" +
    "\267\001\002\000\004\007\271\001\002\000\026\005\uffc3" +
    "\006\uffc3\013\uffc3\014\uffc3\041\uffc3\044\uffc3\051\uffc3\052" +
    "\uffc3\053\uffc3\056\uffc3\001\002\000\026\005\uffc4\006\uffc4" +
    "\013\uffc4\014\uffc4\041\uffc4\044\uffc4\051\uffc4\052\uffc4\053" +
    "\uffc4\056\uffc4\001\002\000\004\007\273\001\002\000\026" +
    "\005\uffc5\006\uffc5\013\uffc5\014\uffc5\041\uffc5\044\uffc5\051" +
    "\uffc5\052\uffc5\053\uffc5\056\uffc5\001\002\000\004\007\277" +
    "\001\002\000\004\007\276\001\002\000\026\005\uffc7\006" +
    "\uffc7\013\uffc7\014\uffc7\041\uffc7\044\uffc7\051\uffc7\052\uffc7" +
    "\053\uffc7\056\uffc7\001\002\000\026\005\uffc2\006\uffc2\013" +
    "\uffc2\014\uffc2\041\uffc2\044\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\056\uffc2\001\002\000\026\005\uffc6\006\uffc6\013\uffc6\014" +
    "\uffc6\041\uffc6\044\uffc6\051\uffc6\052\uffc6\053\uffc6\056\uffc6" +
    "\001\002\000\060\007\uff8e\010\uff8e\011\uff8e\012\uff8e\015" +
    "\uff8e\016\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e\026\uff8e" +
    "\027\uff8e\030\uff8e\031\uff8e\032\uff8e\034\uff8e\035\uff8e\036" +
    "\uff8e\037\uff8e\040\uff8e\042\uff8e\043\uff8e\054\uff8e\001\002" +
    "\000\060\007\uff90\010\uff90\011\uff90\012\uff90\015\uff90\016" +
    "\uff90\021\uff90\022\uff90\023\uff90\024\uff90\026\uff90\027\uff90" +
    "\030\uff90\031\uff90\032\uff90\034\uff90\035\303\036\uff90\037" +
    "\uff90\040\uff90\042\uff90\043\uff90\054\305\001\002\000\024" +
    "\003\307\010\uffa8\025\uffa8\030\135\046\uffa8\047\uffa8\050" +
    "\uffa8\055\uffa8\056\uffa8\001\002\000\060\007\uff8f\010\uff8f" +
    "\011\uff8f\012\uff8f\015\uff8f\016\uff8f\021\uff8f\022\uff8f\023" +
    "\uff8f\024\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f" +
    "\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\042\uff8f\043" +
    "\uff8f\054\uff8f\001\002\000\004\056\306\001\002\000\060" +
    "\007\uff8d\010\uff8d\011\uff8d\012\uff8d\015\uff8d\016\uff8d\021" +
    "\uff8d\022\uff8d\023\uff8d\024\uff8d\026\uff8d\027\uff8d\030\uff8d" +
    "\031\uff8d\032\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040" +
    "\uff8d\042\uff8d\043\uff8d\054\uff8d\001\002\000\004\036\312" +
    "\001\002\000\004\036\311\001\002\000\060\007\uff8c\010" +
    "\uff8c\011\uff8c\012\uff8c\015\uff8c\016\uff8c\021\uff8c\022\uff8c" +
    "\023\uff8c\024\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\032" +
    "\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\042\uff8c" +
    "\043\uff8c\054\uff8c\001\002\000\060\007\uff8b\010\uff8b\011" +
    "\uff8b\012\uff8b\015\uff8b\016\uff8b\021\uff8b\022\uff8b\023\uff8b" +
    "\024\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\034" +
    "\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\042\uff8b\043\uff8b" +
    "\054\uff8b\001\002\000\024\005\117\006\314\013\126\014" +
    "\130\041\132\044\116\052\124\053\115\056\120\001\002" +
    "\000\026\005\uffb8\006\uffb8\013\uffb8\014\uffb8\041\uffb8\044" +
    "\uffb8\051\uffb8\052\uffb8\053\uffb8\056\uffb8\001\002\000\004" +
    "\056\120\001\002\000\004\011\317\001\002\000\004\007" +
    "\320\001\002\000\026\005\uffba\006\uffba\013\uffba\014\uffba" +
    "\041\uffba\044\uffba\051\uffba\052\uffba\053\uffba\056\uffba\001" +
    "\002\000\006\003\105\056\014\001\002\000\006\011\uffd0" +
    "\012\uffd0\001\002\000\010\011\uffce\012\uffce\035\324\001" +
    "\002\000\004\036\325\001\002\000\006\011\uffcd\012\uffcd" +
    "\001\002\000\010\006\uffd7\017\uffd7\056\uffd7\001\002\000" +
    "\010\006\330\017\077\056\014\001\002\000\004\002\000" +
    "\001\002\000\006\007\340\012\337\001\002\000\006\007" +
    "\uffe8\012\uffe8\001\002\000\006\007\335\012\334\001\002" +
    "\000\004\056\062\001\002\000\012\005\uffee\033\uffee\045" +
    "\uffee\056\uffee\001\002\000\006\007\uffe9\012\uffe9\001\002" +
    "\000\004\056\062\001\002\000\012\005\uffed\033\uffed\045" +
    "\uffed\056\uffed\001\002\000\006\007\uffe7\012\uffe7\001\002" +
    "\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\047\006\001\001\000\002\001\001\000\004\021\007" +
    "\001\001\000\014\007\014\022\010\023\016\026\015\052" +
    "\011\001\001\000\002\001\001\000\006\010\332\013\331" +
    "\001\001\000\004\062\325\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\021\001\001\000\006\025\024\051" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\061\042\001\001\000\002\001\001\000" +
    "\004\027\044\001\001\000\002\001\001\000\004\052\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\051\001\001\000\004\003\052\001\001\000\010\005\055" +
    "\030\056\052\054\001\001\000\004\004\072\001\001\000" +
    "\006\013\062\024\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\075" +
    "\052\073\053\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\064\101\001\001\000\002\001\001\000\012\011" +
    "\105\031\107\032\106\052\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\111\001\001\000\006\005\055" +
    "\052\054\001\001\000\004\014\113\001\001\000\014\015" +
    "\124\016\122\017\126\020\121\050\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\312\001\001\000" +
    "\004\065\300\001\001\000\004\035\257\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\044\136" +
    "\055\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\050\140\054\144\056\145\001\001\000" +
    "\004\052\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\160\001" +
    "\001\000\004\060\152\001\001\000\002\001\001\000\006" +
    "\044\136\055\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\050\140\056\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\050\140\054\164\056" +
    "\145\001\001\000\002\001\001\000\012\040\167\044\136" +
    "\046\166\055\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\044\136\055\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\044\136\055\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\044\136\055\202\001" +
    "\001\000\004\037\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\036\215\041\211\042\214\044\136\055\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\231\001\001\000\002\001\001\000\014" +
    "\015\233\016\122\017\234\020\121\050\120\001\001\000" +
    "\012\041\220\042\214\044\136\055\213\001\001\000\002" +
    "\001\001\000\010\042\222\044\136\055\213\001\001\000" +
    "\004\043\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\044\136\055\232\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\236\017\237\020\121\050\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\015\241\016\122\017\242\020" +
    "\121\050\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\244\017\245\020\121\050\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\036\250\041\211" +
    "\042\214\044\136\055\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\252\017\253\020\121\050\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\255\017\256\020\121\050\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\044\136\055" +
    "\274\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\040\167\044\136\046\264\055\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\301\001\001\000" +
    "\004\034\303\001\001\000\006\044\136\055\307\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\015\124\016\122\017\126\020\121\050" +
    "\120\001\001\000\002\001\001\000\004\050\315\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\031\321\052\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\326\001\001\000\010\006\075\052\073\053\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\335\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\340\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	Tab.init();
	System.out.println("==================SEMANTICKA OBRADA====================");
	Struct boolType = new Struct(Struct.Bool);
    Tab.insert(Obj.Type, "bool", boolType);
    Struct stringType = new Struct(Struct.Array, Tab.charType);
    Tab.insert(Obj.Type, "string", stringType);
	

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	return s;

    }


	//promenljive za brojanje pojavljivanja odredjenih elemenata
	
	int globalCharVarCount = 0; //TODO: R40
	int globalArrayCount = 0; //R41
	int funcCount = 0; //R42
	int classCount = 0; //R43
	int statementBlocks = 0; //R44
	int funcCallsInMain = 0; //TODO: R45
	int newStatementCount = 0; //R46
	int classMethodCount = 0; //R47
	int classFieldCount = 0; //R48
	int classDerivationCount = 0; //R49

    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
    boolean greska;
     
   public void report_fatal_error(String message, Object   info) throws java.lang.Exception {
   	  greska=true;
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info)
    {
      greska=true;
      System.err.print(message);
      System.err.flush();
      if (info instanceof Symbol)
          System.err.println(" na liniji " + ((Symbol)info).left);
      else System.err.println("");
    }
    
    public void report_info(String message, Object info)
    {
      System.out.print(message);
      System.out.flush();
      if (info instanceof Symbol)
          System.out.println(" na liniji " + ((Symbol)info).left);
      else System.out.println("");
    }
   
   	DumpSymbolTableVisitor dstv = new DumpSymbolTableVisitor();
   	
   	public void report_error(String symName, int line, String msg) {
   	  greska=true;
      System.err.print("Greska na "+line+"("+symName+"), "+msg);
      System.err.flush();
      System.err.println("");
   	}
   	
    public void report_info(String symName, int line, Obj obj) {
    	  dstv.visitObjNode(obj);
    	  System.out.print("Pretraga na "+line+"("+symName+"), nadjeno "+dstv.getOutput());
	      System.out.flush();
	      System.out.println("");
    }
    
    
    public void printCounts() {
    	System.out.println("Broj elemenata: ");
    	System.out.println("Deklaracije globalnih nizova - " + globalArrayCount);
    	System.out.println("Definicije funkcija u glavnom programu - " + funcCount);
    	System.out.println("Definicije unutrasnjih klasa - " + classCount);
    	System.out.println("Blokovi naredbi - " + statementBlocks);
    	System.out.println("Naredbe stvaranja objekta - " + newStatementCount);
    	System.out.println("Definicije metoda unutrasnjih klasa - " + classMethodCount);
    	System.out.println("Definicije polja unutrasnjih klasa - " + classFieldCount);
    	System.out.println("Izvodjenja klasa - " + classDerivationCount);
    }
    
    public static void main(String args[]) throws Exception {
        FileReader r = new FileReader(args[0]);
        Yylex skener = new Yylex(r);
        MJParser p = new MJParser(skener);
       // Symbol s = p.debug_parse();  //pocetak parsiranja
       Symbol s = p.parse();
       
        if (p.greska) {
        	 Tab.dump();
        	System.out.println("Ulazni program ima gresaka!");
        }
        else {
        	System.out.println("==================SINTAKSNA ANALIZA====================");
        	p.printCounts();
        	Tab.dump();
        	System.out.println("Parsiranje uspesno zavrseno!");
        }
        
    }

    String getTypeName(Struct t) {
    	StringBuilder output = new StringBuilder();
    	switch (t.getKind()) {
		case Struct.None:
			output.append("notype");
			break;
		case Struct.Int:
			output.append("int");
			break;
		case Struct.Char:
			output.append("char");
			break;
		case Struct.Array:
			output.append("Arr of ");
			
			switch (t.getElemType().getKind()) {
			case Struct.None:
				output.append("notype");
				break;
			case Struct.Int:
				output.append("int");
				break;
			case Struct.Char:
				output.append("char");
				break;
			case Struct.Class:
				output.append("Class");
				break;
			}
			break;
		case Struct.Class:
			output.append("Class");
			break;
		}
		return output.toString();
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {



	boolean global = true;
	boolean classDef = false;
	boolean methodDef = false;
	Struct var_type=Tab.noType;
	Obj currentMethod = null;
	boolean returnFound = false;
	int currentLevel = -1;
	boolean isVoid=false;
	Obj curr_ident = null;
	Obj[] actualParameters = null;
	boolean designatorIsArrElem = false;
	boolean insideWhile = false;


  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Mulop ::= MOD 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Mulop ::= DIV 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Mulop ::= TIMES 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Addop ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Addop ::= PLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Relop ::= LTE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Relop ::= LT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Relop ::= GTE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Relop ::= GT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Relop ::= NOT_EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Relop ::= IS_EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // IdentRef ::= LSQUARE error RSQUARE 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
				designatorIsArrElem = true;
				parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri indeksiranju niza.",null);
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentRef",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // IdentRef ::= LSQUARE Expr RSQUARE 
            {
              Object RESULT =null;
		int dummyleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dummyright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object dummy = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				 designatorIsArrElem = true;
				 if (curr_ident.getType().getKind()!=Struct.Array) 
                              parser.report_error("Semanticka greska u liniji "+dummyleft+": Ocekivan niz na mestu identifikatora "+curr_ident.getName(),null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentRef",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // IdentRef ::= DOT IDENT 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if (curr_ident.getKind() == Struct.Class) {
					Obj obj = Tab.find(ident);
					if (obj == Tab.noObj) {
						parser.report_error("Semanticka greska na liniji "+identleft+": ime "+ident+" nije deklarisano.", null);
					}
					RESULT = obj;
					curr_ident = obj;
					designatorIsArrElem = false;
					
				}
				else {
					parser.report_error("Semanticka greska u liniji "+identleft+": "+curr_ident.getName()+" mora biti promenljiva klasnog tipa.",null);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentRef",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // IdentList ::= 
            {
              Object RESULT =null;
		 RESULT = Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // IdentList ::= IdentList IdentRef 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int irleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int irright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object ir = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
	if (ir != null)
		RESULT = ir;
	else
		RESULT = il;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Designator ::= IDENT NT$3 IdentList 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$3 ::= 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

	Obj obj = Tab.find(name);
	if (obj == Tab.noObj) {
		parser.report_error(name, nameleft, "nije deklarisano");
	}
	parser.report_info(name, nameleft, obj);
	RESULT = obj;
	curr_ident = obj;
	designatorIsArrElem = false;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Unmatched ::= WhileLoop LPAREN error RPAREN Unmatched 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 insideWhile = false; parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" unutar izraza u while konstrukciji.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Unmatched ::= WhileLoop LPAREN Condition RPAREN Unmatched 
            {
              Object RESULT =null;
		 insideWhile = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Unmatched ::= IF LPAREN error RPAREN Matched ELSE Unmatched 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" unutar izraza u if konstrukciji.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Unmatched ::= IF LPAREN Condition RPAREN Matched ELSE Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Unmatched ::= IF LPAREN error RPAREN Statement 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" unutar izraza u if konstrukciji.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Unmatched ::= IF LPAREN Condition RPAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DesignatorsFollowUp ::= DEC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorsFollowUp",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DesignatorsFollowUp ::= INC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorsFollowUp",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Factor ::= LPAREN Expr RPAREN 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Factor ::= NEW Type LSQUARE Expr RSQUARE 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Factor ::= NEW Type 
            {
              Struct RESULT =null;
		
				parser.newStatementCount++;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Factor ::= STRCONST 
            {
              Struct RESULT =null;
		 RESULT = Tab.find("string").getType(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Factor ::= BOOLCONST 
            {
              Struct RESULT =null;
		 RESULT = Tab.find("bool").getType(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Factor ::= CHARCONST 
            {
              Struct RESULT =null;
		 RESULT = Tab.charType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Factor ::= NUMBER 
            {
              Struct RESULT =null;
		 RESULT = Tab.intType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Factor ::= Designator 
            {
              Struct RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = d.getType(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Factor ::= Designator LPAREN ActParams RPAREN 
            {
              Struct RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
	if (Obj.Meth == func.getKind()) {
		parser.report_info("Pronadjen poziv funkcije "+func.getName()+" na liniji "+funcleft, null);
		RESULT = func.getType();
	}
	else {
		parser.report_error("Semanticka greska na liniji "+funcleft+": ime "+func.getName()+" nije funkcija.", null);
		RESULT = Tab.noType;
	}
	

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // MulList ::= 
            {
              Struct RESULT =null;
		
	RESULT = Tab.noType;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulList",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // MulList ::= MulList Mulop Factor 
            {
              Struct RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct te = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (te==Tab.noType || (te.equals(t) && te==Tab.intType))
		RESULT = t;
	else {
		parser.report_error("Semanticka greska na liniji "+teleft+": nekompatibilni tipovu u izrazu za mnozenje", null);
		RESULT = Tab.noType;
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulList",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Term ::= Factor MulList 
            {
              Struct RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct te = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (t==Tab.noType || (te.equals(t) && te==Tab.intType))
		RESULT = te;
	else {
		parser.report_error("Semanticka greska na liniji "+teleft+": nekompatibilni tipovu u izrazu za mnozenje 2", null);
		RESULT = Tab.noType;
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // AddList ::= 
            {
              Struct RESULT =null;
		
	RESULT = Tab.noType;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddList",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // AddList ::= AddList Addop Term 
            {
              Struct RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct te = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (te==Tab.noType || (te.equals(t) && te==Tab.intType))
		RESULT = t;
	else {
		parser.report_error("Semanticka greska na liniji "+teleft+": nekompatibilni tipovu u izrazu za sabiranje 2", null);
		RESULT = Tab.noType;
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddList",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Sign ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Sign",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Sign ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Sign",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Sign Term AddList 
            {
              Struct RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct te = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (t==Tab.noType || (te.equals(t) && te==Tab.intType))
		RESULT = te;
	else {
		parser.report_error("Semanticka greska na liniji "+teleft+": nekompatibilni tipovu u izrazu za sabiranje", null);
		RESULT = Tab.noType;
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CondFact ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CondFact ::= CondFact Relop Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CondTerm ::= CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CondTerm ::= CondTerm AND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Condition ::= CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Condition ::= Condition OR CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ActPars ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ActPars ::= ActPars COMMA Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ActParams ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParams",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ActParams ::= ActPars 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		//provera na broj argumenata!!!
		int i=0;
	    for (Obj obj:currentMethod.getLocalSymbols()) {
	    	if (actualParameters[i].getType() != obj.getType() || (obj.getType().getKind()==Struct.Array && actualParameters[i].getType().getElemType() != obj.getType().getElemType())) {
	    		parser.report_error(obj.getName(), paramsleft, "nekompatibilni tipovi stvarnih sa formalnim parametrima");
	    	}
	    	else {
	    		parser.report_info(obj.getName(), paramsleft, obj);
	    	}
	    	i++;
	    }

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParams",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OptNumbers ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptNumbers",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OptNumbers ::= COMMA NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptNumbers",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // WhileLoop ::= WHILE 
            {
              Object RESULT =null;
		
	insideWhile = true;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("WhileLoop",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Matched ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
		
						parser.statementBlocks++;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Matched ::= PRINT LPAREN Expr OptNumbers RPAREN SEMI 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct dest = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
	if (dest != Tab.intType && dest != Tab.charType && dest != Tab.find("bool").getType() && dest != Tab.find("string").getType()) {
		parser.report_error("Greska na liniji "+destleft+": u pozivu read(Expr, [, number]) expr mora biti tipa int, char, bool ili string", null);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Matched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
	if (dest.getType() != Tab.intType && dest.getType() != Tab.charType && dest.getType() != Tab.find("bool").getType() && dest.getType() != Tab.find("string").getType()) {
		parser.report_error(dest.getName(), destleft, "u pozivu read(Designator) designator mora biti tipa int, char, bool ili string");
	}
	if (dest.getKind() != Obj.Var && dest.getKind() != Obj.Fld) {
		parser.report_error(parser.getTypeName(dest.getType()), destleft, "designator mora biti promenljiva, element niza ili polje unutar objekta");
	}
	if (dest.getType().getKind()==Struct.Array && !designatorIsArrElem) {
		parser.report_error(parser.getTypeName(dest.getType()), destleft, "designator mora biti promenljiva, element niza ili polje unutar objekta");
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Matched ::= BREAK SEMI 
            {
              Object RESULT =null;
		int dummyleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int dummyright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object dummy = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					if (!insideWhile) {
						parser.report_error("break", dummyleft, "moze se koristiti samo u while petlji");
					}
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Matched ::= WhileLoop LPAREN error RPAREN Matched 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 insideWhile = false; parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" unutar izraza u while konstrukciji.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Matched ::= WhileLoop LPAREN Condition RPAREN Matched 
            {
              Object RESULT =null;
		 insideWhile = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Matched ::= IF LPAREN error RPAREN Matched ELSE Matched 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" unutar izraza u if konstrukciji.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Matched ::= IF LPAREN Condition RPAREN Matched ELSE Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Matched ::= RETURN SEMI 
            {
              Object RESULT =null;
		int dummyleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int dummyright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object dummy = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					returnFound = true;
					if (!isVoid) {
						parser.report_error("Semnaticka greska u liniji "+dummyleft+": nedostaje return iskaz.", null);
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Matched ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					returnFound = true;
					Struct currMethType = currentMethod.getType();
					if (!currMethType.compatibleWith(t)) {
						parser.report_error("Semanticka greska na liniji "+tleft+": tip izraza u return naredbi se ne slaze sa tipom povratne vrednosti funkcije "+currentMethod.getName(),null);
					}
					if (isVoid) {
						parser.report_error("Semanticka greska na liniji "+tleft+": metod ne sme imati return sa izrazom jer je deklarisan sa void",null);
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Matched ::= Designator EQUAL error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri iskazu dodele vrednosti.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Matched ::= Designator LPAREN error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri pozivu funkcije.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Matched ::= Designator LPAREN error RPAREN SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri zadavanju liste parametara u pozivu funkcije",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Matched ::= Designator LPAREN ActParams RPAREN SEMI 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
	if (Obj.Meth == func.getKind()) {
		parser.report_info("Pronadjen poziv funkcije "+func.getName()+" na liniji "+funcleft, null);
		RESULT = func.getType();
	}
	else {
		parser.report_error("Semanticka greska na liniji "+funcleft+": ime "+func.getName()+" nije funkcija.", null);
		RESULT = Tab.noType;
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Matched ::= Designator DesignatorsFollowUp SEMI 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
	if (dest.getType() != Tab.intType) {
		parser.report_error(parser.getTypeName(dest.getType()), destleft, "designator mora biti tipa int u postfiksnom inkrementu i dekrementu");
	}
	if (dest.getKind() == Obj.Con) {
		parser.report_error(parser.getTypeName(dest.getType()), destleft, "ne moze se menjati vrednost konstantnom objektu");
	}
	if (dest.getKind() != Obj.Var && dest.getKind() != Obj.Fld) {
		parser.report_error(parser.getTypeName(dest.getType()), destleft, "designatormora biti promenljiva, element niza ili polje unutar objekta");
	}
	if (dest.getType().getKind()==Struct.Array && !designatorIsArrElem) {
		parser.report_error(parser.getTypeName(dest.getType()), destleft, "designator mora biti promenljiva, element niza ili polje unutar objekta");
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Matched ::= Designator EQUAL Expr SEMI 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
	if (!e.assignableTo(dest.getType()) && dest.getType().getKind() != Struct.Array) {
		parser.report_error("Semanticka greska na liniji "+destleft+": izraz tipa "+parser.getTypeName(e)+" ne moze biti dodeljen tipu "+parser.getTypeName(dest.getType()),null);
	}
	else if (!e.assignableTo(dest.getType().getElemType()) && dest.getType().getKind() == Struct.Array) {
		parser.report_error("Semanticka greska na liniji "+destleft+": izraz tipa "+parser.getTypeName(e)+" ne moze biti dodeljen tipu "+parser.getTypeName(dest.getType()),null);
	}
	if (dest.getKind() == Obj.Con) {
		parser.report_error(parser.getTypeName(dest.getType()), destleft, "ne moze se menjati vrednost konstantnom objektu");
	}
	if (dest.getKind() != Obj.Var && dest.getKind() != Obj.Fld) {
		parser.report_error(parser.getTypeName(dest.getType()), destleft, "designator mora biti promenljiva, element niza ili polje unutar objekta");
	}
	if (dest.getType().getKind()==Struct.Array && !designatorIsArrElem) {
		parser.report_error(parser.getTypeName(dest.getType()), destleft, "designator mora biti promenljiva, element niza ili polje unutar objekta");
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Parameter ::= error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.report_error("Izvrsen oporavak do , ili ) u liniji "+lleft+" pri deklaraciji formalnog parametra funkcije",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Parameter",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Parameter ::= Type IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
			Obj temp = Tab.find(varName);
			if (temp.getLevel() == currentLevel) {
				parser.report_error(varName, varNameleft, "duplikat imena u formalnim parametrima funkcije");
			}
			else {
				Tab.insert(Obj.Var, varName, new Struct(Struct.Array, var_type));
				parser.report_info("Deklarisan parametar "+varName+" na liniji "+varNameleft, null);
			}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Parameter",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Parameter ::= Type IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	Obj temp = Tab.find(varName);
	if (temp.getLevel() == currentLevel) {
		parser.report_error(varName, varNameleft, "duplikat imena u formalnim parametrima funkcije");
	}
	else {
		Tab.insert(Obj.Var, varName, var_type);
		parser.report_info("Deklarisan parametar "+varName+" na liniji "+varNameleft, null);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Parameter",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FormPars ::= Parameter 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FormPars ::= FormPars COMMA Parameter 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FormalParams ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParams",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FormalParams ::= FormPars 
            {
              Object RESULT =null;
		
	if (currentMethod.getName().equals("main")) {
		parser.report_error("Main funkcija ne sme sadrzati argumente",null);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParams",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ReturnType ::= VOID 
            {
              Struct RESULT =null;
		
	isVoid=true;
	RESULT = Tab.noType;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnType",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ReturnType ::= Type 
            {
              Struct RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = retType;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnType",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodDecl ::= ReturnType IDENT NT$2 LPAREN FormalParams RPAREN VarDeclList LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		
					methodDef = false;
					if (!classDef)
						parser.funcCount++;
					else
						parser.classMethodCount++;
					parser.statementBlocks++;
					
					if (!returnFound && retType != Tab.noType) {
						parser.report_error("Semanticka greska na liniji " +methNameleft+": funkcija "+methName+" nema return iskaz.", null);
					}
					returnFound = false;
					Tab.chainLocalSymbols(currentMethod);
					currentMethod = null;
					Tab.closeScope();
					currentLevel--;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$2 ::= 
            {
              Object RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 
					if (Tab.find(methName) != Tab.noObj) {
						parser.report_error(methName, methNameleft, "duplikat imena u tabeli simbola");
					}
					currentMethod = Tab.insert(Obj.Meth, methName, retType);
					Tab.openScope();
					currentLevel++;
					methodDef = true;
					parser.report_info("Obradjuje se funkcija na liniji "+methNameleft, null);
					if (currentMethod.getName().equals("main") && retType != Tab.noType) {
						parser.report_error("Main funkcija mora imati povratni tip void", null);
					}
				 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ClassMethods ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethods",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ClassMethods ::= LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethods",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VarDeclList ::= VarDeclList VarDecl 
            {
              Object RESULT =null;
		
					if (classDef && !methodDef) {
						parser.classFieldCount++;
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Ext ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Ext",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Ext ::= error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.report_error("Izvrsen oporavak do { u liniji "+lleft+" pri deklaraciji prosirenja natklase.",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Ext",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Ext ::= EXTENDS Type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			parser.classDerivationCount++;
			if (t.getKind() != Struct.Class) {
				parser.report_error(parser.getTypeName(t), tleft, "nije klasnog tipa");
			}
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Ext",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassDecl ::= CLASS IDENT Ext LBRACE NT$1 VarDeclList ClassMethods RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		
					parser.classCount++;
					classDef = false;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$1 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

					classDef = true;
					Obj tmp = Tab.find(name);
					if (tmp != Tab.noObj) {
						parser.report_error(name, nameleft, "duplikat naziva klase");
					}
					else {
						Tab.insert(Obj.Type, name, Tab.nullType);
					}
					
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	
	Obj typeNode = Tab.find(typeName);
	if (typeNode == Tab.noObj) {
		parser.report_error("Semanticka greska na liniji "+typeNameleft+ ": Nije pronadjen tip " + typeName + " u tabeli simbola.", null);
		var_type = RESULT = Tab.noType;
	}
	else {
		if (Obj.Type == typeNode.getKind()) {
			var_type = RESULT = typeNode.getType();
		}
		else {
			parser.report_error("Semanticka greska na liniji "+typeNameleft+ ": Ime " + typeName + " ne predstavlja tip.", null);
			var_type = RESULT = Tab.noType;
		}
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Var ::= IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
			if (global && !classDef)
				parser.globalArrayCount++;

			Obj temp = Tab.find(varName);
			if (temp.getLevel() == currentLevel) {
				parser.report_error("Semanticka greska na liniji "+varNameleft+": redefinicija promenljive "+varName, null);
			}
			else {
				Tab.insert(Obj.Var, varName, new Struct(Struct.Array, var_type));
				parser.report_info("Deklarisana promenljiva "+varName+" na liniji "+varNameleft, null);
			}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Var ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	Obj temp = Tab.find(varName);
	if (temp.getLevel() == currentLevel) {
		parser.report_error("Semanticka greska na liniji "+varNameleft+": redefinicija promenljive "+varName, null);
	}
	else {
		Tab.insert(Obj.Var, varName, var_type);
		parser.report_info("Deklarisana promenljiva "+varName+" na liniji "+varNameleft, null);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VarList ::= Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VarList ::= VarList COMMA Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // GlobalVarList ::= error COMMA Var 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // GlobalVarList ::= Var 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object varName = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // GlobalVarList ::= GlobalVarList COMMA Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarDecl ::= Type error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.report_error("Izvrsen oporavak do { u liniji "+lleft+" pri definiciji lokalne promenljive/polja unutrasnje klase",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarDecl ::= Type error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri definiciji lokalne promenljive/polja unutrasnje klase",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarDecl ::= Type VarList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // GlobalVarDecl ::= Type error SEMI 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri definiciji globalne promenljive",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // GlobalVarDecl ::= Type GlobalVarList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Rhs ::= STRCONST 
            {
              Struct RESULT =null;
		 RESULT = Tab.find("string").getType(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Rhs",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Rhs ::= BOOLCONST 
            {
              Struct RESULT =null;
		 RESULT = Tab.find("bool").getType(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Rhs",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Rhs ::= CHARCONST 
            {
              Struct RESULT =null;
		 RESULT = Tab.charType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Rhs",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Rhs ::= NUMBER 
            {
              Struct RESULT =null;
		 RESULT = Tab.intType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Rhs",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstVar ::= IDENT 
            {
              Obj RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	Obj temp = Tab.find(varName);
	if (temp.getLevel() == currentLevel) {
		parser.report_error("Semanticka greska na liniji "+varNameleft+": redefinicija promenljive "+varName, null);
		RESULT = Tab.noObj;
	}
	else {
		Obj obj = Tab.insert(Obj.Con, varName, var_type);
		parser.report_info("Deklarisana promenljiva "+varName+" na liniji "+varNameleft, null);
		RESULT = obj;
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstVar",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstPart ::= ConstPart COMMA ConstVar EQUAL Rhs 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (!e.assignableTo(dest.getType()) && dest.getType().getKind() != Struct.Array) {
		parser.report_error("Semanticka greska na liniji "+destleft+": izraz tipa "+parser.getTypeName(e)+" ne moze biti dodeljen tipu "+parser.getTypeName(dest.getType().getElemType()),null);
	}
	else if (!e.assignableTo(dest.getType().getElemType()) && dest.getType().getKind() == Struct.Array) {
		parser.report_error("Semanticka greska na liniji "+destleft+": izraz tipa "+parser.getTypeName(e)+" ne moze biti dodeljen tipu "+parser.getTypeName(dest.getType().getElemType()),null);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstPart",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstPart ::= ConstVar error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	parser.report_error("Izvrsen oporavak do ; u linij "+lleft+" pri definiciji konstante.", null);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstPart",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstPart ::= ConstVar EQUAL Rhs 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (!e.assignableTo(dest.getType()) && dest.getType().getKind() != Struct.Array) {
		parser.report_error("Semanticka greska na liniji "+destleft+": izraz tipa "+parser.getTypeName(e)+" ne moze biti dodeljen tipu "+parser.getTypeName(dest.getType()),null);
	}
	else if (!e.assignableTo(dest.getType().getElemType()) && dest.getType().getKind() == Struct.Array) {
		parser.report_error("Semanticka greska na liniji "+destleft+": izraz tipa "+parser.getTypeName(e)+" ne moze biti dodeljen tipu "+parser.getTypeName(dest.getType()),null);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstPart",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstDecl ::= CONST error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+lleft+" pri definiciji globalne promenljive tipa konstante",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDecl ::= CONST Type ConstPart SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclarationPart ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationPart",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclarationPart ::= GlobalVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationPart",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclarationPart ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationPart",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclarationList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclarationList ::= DeclarationList DeclarationPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = Tab.insert(Obj.Prog, pName, Tab.noType);
	Tab.openScope();
	currentLevel++;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= PROGRAM ProgName DeclarationList LBRACE NT$0 MethodDeclList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		
	
	Obj myMain = Tab.find("main");
	if (myMain==Tab.noObj) {
		parser.report_error("Greska : ulazni fajl ne sadrzi main metodu", null);
	}
	Tab.chainLocalSymbols(p);
	Tab.closeScope();
	currentLevel--;
	

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

						global = false;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

